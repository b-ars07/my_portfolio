var arrow = (function() {
    return {
        init: function() {
            const scrollHeight = $('.js-section-content').offset().top;

            $('.arrow').on('click', function() {

                $('body').animate({
                    scrollTop: scrollHeight
                }, 1800);

                return false;
            });
        }
    }
})();

$(function() {
    if ($('.arrow').length) {
        arrow.init();
    }
});

$(function() {
    var
        auth_btn = $('.welcome__auth-btn'),
        main_btn = $('.welcome-menu-auth__item:first-child'),
        card = $('.card__wrapper');

    auth_btn.on('click', function(evt) {
        evt.preventDefault();

        var _this = $(this);

        _this.toggleClass('active');
        setTimeout(function() {
            card.toggleClass('active');
        }, 400);
    });

    main_btn.on('click', function(evt) {
        evt.preventDefault();
        setTimeout(function() {
            card.toggleClass('active');
        }, 400);

    });
});

$(function() {
    var hamburger = $('#hamburger-icon');

    hamburger.on('click', function(evt) {
        evt.preventDefault();

        hamburger.toggleClass('active');
        return false;
    });
});
(function() {

    /**
     * Parralax on header
     */
    var parallax = (function() {
        var
            bg = document.querySelector('.js-bg-header'),
            user = document.querySelector('.js-user'),
            sectionText = document.querySelector('.js-header-title');

        return {
            move: function(block, windowScroll, strafeAmount) {
                var
                    strafe = windowScroll / -strafeAmount + '%',
                    style = block.style,
                    transformString = 'translate3d(0,' + strafe + ', 0)';

                style.transform = transformString;
                style.webkitTransform = transformString;
            },
            init: function(wScroll) {
                this.move(bg, wScroll, 45);
                this.move(sectionText, wScroll, 20);
                this.move(user, wScroll, 4);
            }
        }



    })();


    /**
     * window scroll
     */
    window.onscroll = function() {
        var wScroll = window.pageYOffset;

        if ($('#paralaxScroll').length) {
            parallax.init(wScroll);
        }


    }
})();
/******/
(function(modules) { // webpackBootstrap
    /******/ // The module cache
    /******/
    var installedModules = {};
    /******/
    /******/ // The require function
    /******/
    function __webpack_require__(moduleId) {
        /******/
        /******/ // Check if module is in cache
        /******/
        if (installedModules[moduleId])
        /******/
            return installedModules[moduleId].exports;
        /******/
        /******/ // Create a new module (and put it into the cache)
        /******/
        var module = installedModules[moduleId] = {
            /******/
            exports: {},
            /******/
            id: moduleId,
            /******/
            loaded: false
                /******/
        };
        /******/
        /******/ // Execute the module function
        /******/
        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        /******/
        /******/ // Flag the module as loaded
        /******/
        module.loaded = true;
        /******/
        /******/ // Return the exports of the module
        /******/
        return module.exports;
        /******/
    }
    /******/
    /******/
    /******/ // expose the modules object (__webpack_modules__)
    /******/
    __webpack_require__.m = modules;
    /******/
    /******/ // expose the module cache
    /******/
    __webpack_require__.c = installedModules;
    /******/
    /******/ // __webpack_public_path__
    /******/
    __webpack_require__.p = "";
    /******/
    /******/ // Load entry module and return exports
    /******/
    return __webpack_require__(0);
    /******/
})
/************************************************************************/
/******/
([
    /* 0 */
    /***/
    (function(module, exports, __webpack_require__) {

        'use strict';

        var _canvas = __webpack_require__(1);

        var _haze = __webpack_require__(3);

        var _haze2 = _interopRequireDefault(_haze);

        var _hazeWater = __webpack_require__(11);

        var _hazeWater2 = _interopRequireDefault(_hazeWater);

        var _gsap = __webpack_require__(12);

        var _gsap2 = _interopRequireDefault(_gsap);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        var divSelector = '.welcome-background';
        var canvasSelector = '.welcome-background-canvas';
        var filePath = './assets/img/water.jpg';
        var fileMapsPath = './assets/img/water-maps.jpg';

        var canvas = document.querySelector(canvasSelector);

        var textureAlign = { x: 0.5, y: 0.9 };
        var textures = [{
            file: filePath,
            name: 'image',
            align: textureAlign,
            scale: { x: 1, y: 1 }
        }, {
            file: fileMapsPath,
            name: 'maps',
            align: textureAlign,
            scale: { x: 0.2, y: 0.2 }
        }];

        var haze = new _haze2.default({
            canvas: canvas,
            shader: _hazeWater2.default,
            textures: textures,
            loop: 10000
        });

        haze.gl.createUniform('2f', 'mouse', 0.5, 0.5);

        var smooth = function smooth() {
            var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 6;

            var samples = [];
            return function(v) {
                samples = samples.concat(v);
                if (samples.length > n) {
                    samples = samples.slice(samples.length - n, samples.length);
                }
                return samples.reduce(function(l, cur) {
                    return l + cur;
                }) / samples.length;
            };
        };

        var curve = function curve(v) {
            var p = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.8;
            return v == 0 ? 0 : Math.pow(Math.abs(v), p) * (v / Math.abs(v));
        };

        var smoothX = smooth();
        var smoothY = smooth();

        var isTouchDevice = 'ontouchstart' in document.documentElement;

        var parallaxPos = {
            _x: 0,
            _y: 0,
            _willUpdate: false,
            get x() {
                return this._x;
            },
            set x(v) {
                this._x = v;
                this.updatePos();
            },
            get y() {
                return this._y;
            },
            set y(v) {
                this._y = v;
                this.updatePos();
            },
            updatePos: function updatePos() {
                var _this = this;

                if (this._willUpdate) return;
                this._willUpdate = true;

                requestAnimationFrame(function() {
                    _this._willUpdate = false;
                    haze.gl.createUniform('2f', 'mouse', -(-1 + _this.x * 2), -(-1 + _this.y * 2));
                });
            }
        };
        window.addEventListener('mousemove', function(event) {
            if (!isTouchDevice) {
                _gsap2.default.to(parallaxPos, 1, {
                    x: event.pageX / window.innerWidth,
                    y: event.pageY / window.innerHeight
                });
            }
        });

        function getDPI() {
            if (typeof window.devicePixelRatio != "undefined") {
                return window.devicePixelRatio;
            } else {
                return 1;
            }
        }
        window.addEventListener('resize', updateSize);

        function updateSize() {
            var container = document.querySelector(divSelector);
            var dimensions = container.getBoundingClientRect();
            haze.width = dimensions.width;
            haze.height = dimensions.height;
            // haze.dpi=getDPI();
            haze.dpi = 1;
            haze.gl.createUniform('1f', 'dpi', haze.dpi);
            haze.gl.createUniform('2f', 'resolution', haze.width * haze.dpi, haze.height * haze.dpi);
        }
        updateSize();

        /***/
    }),
    /* 1 */
    /***/
    (function(module, exports, __webpack_require__) {

        'use strict';

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.createCanvas = createCanvas;

        var _curry = __webpack_require__(2);

        var _curry2 = _interopRequireDefault(_curry);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

        exports.default = function(width, height) {
            var dpiAware = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

            var object = {
                _width: width,
                _height: height,
                dpi: 1,
                canvas: null,
                ctx: null,
                appendTo: function appendTo(obj) {
                    if (typeof obj == 'string') obj = document.querySelector(obj);
                    obj.appendChild(this.canvas);
                    return this;
                },

                set fillStyle(v) {
                    this.ctx.fillStyle = v;
                },
                get fillStyle() {
                    return this.ctx.fillStyle;
                },
                setFillStyle: function setFillStyle(v) {
                    this.fillStyle = v;
                    return this;
                },
                setFill: function setFill(v) {
                    return this.setFillStyle(v);
                },

                set strokeStyle(v) {
                    this.ctx.strokeStyle = v;
                },
                get strokeStyle() {
                    return this.ctx.strokeStyle;
                },
                setStrokeStyle: function setStrokeStyle(v) {
                    this.strokeStyle = v;
                    return this;
                },
                setStroke: function setStroke(v) {
                    return this.setStrokeStyle(v);
                },

                set lineCap(v) {
                    this.ctx.lineCap = v;
                },
                get lineCap() {
                    return this.ctx.lineCap;
                },
                setLineCap: function setLineCap(v) {
                    this.lineCap = v;
                    return this;
                },

                set lineWidth(v) {
                    this.ctx.lineWidth = v;
                },
                get lineWidth() {
                    return this.ctx.lineWidth;
                },
                setLineWidth: function setLineWidth(v) {
                    this.lineWidth = v;
                    return this;
                },

                set globalAlpha(v) {
                    this.ctx.globalAlpha = v;
                },
                get globalAlpha() {
                    return this.ctx.globalAlpha;
                },
                setGlobalAlpha: function setGlobalAlpha(v) {
                    this.globalAlpha = v;
                    return this;
                },
                alpha: function alpha(v) {
                    return this.setGlobalAlpha(v);
                },

                get width() {
                    return this._width;
                },
                set width(v) {
                    this.canvas.setAttribute('width', v * this.dpi);
                    this.canvas.style.width = v + 'px';
                    this._width = v;
                },
                get height() {
                    return this._height;
                },
                set height(v) {
                    this.canvas.setAttribute('height', v * this.dpi);
                    this.canvas.style.height = v + 'px';
                    this._height = v;
                },
                clear: function clear() {
                    this.clearRect(0, 0, this.width, this.height);
                },
                clearRect: function clearRect(x, y, w, h) {
                    var _ctx;

                    (_ctx = this.ctx).clearRect.apply(_ctx, _toConsumableArray(d(x, y, w, h)));
                    return this;
                },
                fillRect: function fillRect(x, y, w, h) {
                    var _ctx2;

                    (_ctx2 = this.ctx).fillRect.apply(_ctx2, _toConsumableArray(d(x, y, w, h)));
                    return this;
                },
                beginPath: function beginPath() {
                    this.ctx.beginPath();
                    return this;
                },
                moveTo: function moveTo(x, y) {
                    var _ctx3;

                    (_ctx3 = this.ctx).moveTo.apply(_ctx3, _toConsumableArray(d(x, y)));
                    return this;
                },
                lineTo: function lineTo(x, y) {
                    var _ctx4;

                    (_ctx4 = this.ctx).lineTo.apply(_ctx4, _toConsumableArray(d(x, y)));
                    return this;
                },
                quadraticCurveTo: function quadraticCurveTo(cpx, cpy, x, y) {
                    var _ctx5;

                    (_ctx5 = this.ctx).quadraticCurveTo.apply(_ctx5, _toConsumableArray(d(cpx, cpy, x, y)));
                    return this;
                },
                bezierCurveTo: function bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) {
                    var _ctx6;

                    (_ctx6 = this.ctx).bezierCurveTo.apply(_ctx6, _toConsumableArray(d(cp1x, cp1y, cp2x, cp2y, x, y)));
                    return this;
                },
                arc: function arc(x, y, r, sAngle, eAngle) {
                    var _ctx7;

                    var counterclockwise = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;

                    (_ctx7 = this.ctx).arc.apply(_ctx7, _toConsumableArray(d(x, y, r, sAngle, eAngle, counterclockwise)));
                    return this;
                },
                circle: function circle(x, y, r) {
                    this.arc(x, y, r, 0, Math.PI * 2);
                    return this;
                },
                fill: function fill() {
                    this.ctx.fill();
                    return this;
                },
                stroke: function stroke() {
                    this.ctx.stroke();
                    return this;
                }
            };

            var dpi = dpiAware ? window.devicePixelRatio : 1;
            var d = function d() {
                for (var _len = arguments.length, values = Array(_len), _key = 0; _key < _len; _key++) {
                    values[_key] = arguments[_key];
                }

                return mult(dpi, values);
            }; //multiplies values to the current dpi

            object.dpi = dpi;
            object.canvas = createCanvas(width, height, object.dpi);
            object.ctx = object.canvas.getContext('2d');
            return object;
        };

        var mult = (0, _curry2.default)(function(multiplier, value) {
            return !Array.isArray(value) ? value * multiplier : value.map(function(v) {
                return v * multiplier;
            });
        });

        function createCanvas(width, height) {
            var multiplier = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;

            var canvas = document.createElement("canvas");
            if (multiplier != 1) {
                canvas.style.width = width + 'px';
                canvas.style.height = height + 'px';
            }
            canvas.width = width * multiplier;
            canvas.height = height * multiplier;
            return canvas;
        }

        /***/
    }),
    /* 2 */
    /***/
    (function(module, exports) {

        var slice = Array.prototype.slice;
        var toArray = function(a) { return slice.call(a) }
        var tail = function(a) { return slice.call(a, 1) }

        // fn, [value] -> fn
        //-- create a curried function, incorporating any number of
        //-- pre-existing arguments (e.g. if you're further currying a function).
        var createFn = function(fn, args, totalArity) {
            var remainingArity = totalArity - args.length;

            switch (remainingArity) {
                case 0:
                    return function() { return processInvocation(fn, concatArgs(args, arguments), totalArity) };
                case 1:
                    return function(a) { return processInvocation(fn, concatArgs(args, arguments), totalArity) };
                case 2:
                    return function(a, b) { return processInvocation(fn, concatArgs(args, arguments), totalArity) };
                case 3:
                    return function(a, b, c) { return processInvocation(fn, concatArgs(args, arguments), totalArity) };
                case 4:
                    return function(a, b, c, d) { return processInvocation(fn, concatArgs(args, arguments), totalArity) };
                case 5:
                    return function(a, b, c, d, e) { return processInvocation(fn, concatArgs(args, arguments), totalArity) };
                case 6:
                    return function(a, b, c, d, e, f) { return processInvocation(fn, concatArgs(args, arguments), totalArity) };
                case 7:
                    return function(a, b, c, d, e, f, g) { return processInvocation(fn, concatArgs(args, arguments), totalArity) };
                case 8:
                    return function(a, b, c, d, e, f, g, h) { return processInvocation(fn, concatArgs(args, arguments), totalArity) };
                case 9:
                    return function(a, b, c, d, e, f, g, h, i) { return processInvocation(fn, concatArgs(args, arguments), totalArity) };
                case 10:
                    return function(a, b, c, d, e, f, g, h, i, j) { return processInvocation(fn, concatArgs(args, arguments), totalArity) };
                default:
                    return createEvalFn(fn, args, remainingArity);
            }
        }

        // [value], arguments -> [value]
        //-- concat new arguments onto old arguments array
        var concatArgs = function(args1, args2) {
            return args1.concat(toArray(args2));
        }

        // fn, [value], int -> fn
        //-- create a function of the correct arity by the use of eval,
        //-- so that curry can handle functions of any arity
        var createEvalFn = function(fn, args, arity) {
            var argList = makeArgList(arity);

            //-- hack for IE's faulty eval parsing -- http://stackoverflow.com/a/6807726
            var fnStr = 'false||' +
                'function(' + argList + '){ return processInvocation(fn, concatArgs(args, arguments)); }';
            return eval(fnStr);
        }

        var makeArgList = function(len) {
            var a = [];
            for (var i = 0; i < len; i += 1) a.push('a' + i.toString());
            return a.join(',');
        }

        var trimArrLength = function(arr, length) {
            if (arr.length > length) return arr.slice(0, length);
            else return arr;
        }

        // fn, [value] -> value
        //-- handle a function being invoked.
        //-- if the arg list is long enough, the function will be called
        //-- otherwise, a new curried version is created.
        var processInvocation = function(fn, argsArr, totalArity) {
            argsArr = trimArrLength(argsArr, totalArity);

            if (argsArr.length === totalArity) return fn.apply(null, argsArr);
            return createFn(fn, argsArr, totalArity);
        }

        // fn -> fn
        //-- curries a function! <3
        var curry = function(fn) {
            return createFn(fn, [], fn.length);
        }

        // num, fn -> fn
        //-- curries a function to a certain arity! <33
        curry.to = curry(function(arity, fn) {
            return createFn(fn, [], arity);
        });

        // num, fn -> fn
        //-- adapts a function in the context-first style
        //-- to a curried version. <3333
        curry.adaptTo = curry(function(num, fn) {
            return curry.to(num, function(context) {
                var args = tail(arguments).concat(context);
                return fn.apply(this, args);
            });
        })

        // fn -> fn
        //-- adapts a function in the context-first style to
        //-- a curried version. <333
        curry.adapt = function(fn) {
            return curry.adaptTo(fn.length, fn)
        }


        module.exports = curry;


        /***/
    }),
    /* 3 */
    /***/
    (function(module, exports, __webpack_require__) {

        'use strict';

        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        var _glObj = __webpack_require__(4);

        var _glObj2 = _interopRequireDefault(_glObj);

        var _simple = __webpack_require__(6);

        var _simple2 = _interopRequireDefault(_simple);

        var _canvas = __webpack_require__(1);

        var _lodash = __webpack_require__(7);

        var _fill = __webpack_require__(9);

        var _fill2 = _interopRequireDefault(_fill);

        var _eventDispatcher = __webpack_require__(10);

        var _eventDispatcher2 = _interopRequireDefault(_eventDispatcher);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function Haze(_ref) {
            var _this = this;

            var canvas = _ref.canvas,
                frag = _ref.shader,
                _ref$textures = _ref.textures,
                textures = _ref$textures === undefined ? [] : _ref$textures,
                _ref$loops = _ref.loops,
                loops = _ref$loops === undefined ? 1000 : _ref$loops;

            this.loops = loops;
            this.canvas = canvas;
            this._width = canvas.width;
            this._height = canvas.height;
            var gl = new _glObj2.default(canvas, null, _simple2.default, frag);
            this.gl = gl;
            var haze = this;
            this._textures = textures.map(function(v, i) {
                return loadTexture(_this, i, v);
            });

            Promise.all(this._textures).then(start);

            function start() {
                var last = 0;
                var frame = 1000 / 60;
                var time = 0;
                gl.createUniform("1f", "time", time);

                (function update(now) {
                    var delta = now - last;
                    var incr = delta / frame;
                    if (incr > 1.5) incr = 1.5;
                    incr *= haze.timeScale;
                    time += incr;
                    if (time > haze.loops) time = 0;
                    last = now;
                    gl.createUniform("1f", "time", time);
                    haze.dispatchEvent('predraw', {
                        deltaTime: incr
                    });
                    gl.draw();
                    requestAnimationFrame(update);
                })(0);
            }
        }

        function loadTexture(haze, index, options) {
            var defaultOptions = {
                file: null,
                name: null,
                repeat: false,
                fill: true,
                align: {
                    x: 0.5,
                    y: 0.5
                },
                scale: {
                    x: 1,
                    y: 1
                }
            };
            options = (0, _lodash.assign)(defaultOptions, options);

            return new Promise(function(resolve, reject) {
                var image = new Image();
                image.addEventListener('load', function(event) {
                    haze.gl.createUniform('1i', options.name, index);
                    resolve(processTexture(haze, index, image, options));
                });
                image.src = options.file;
            });
        }

        function processTexture(haze, index, image, options) {
            var canvas = document.createElement('canvas');
            var ctx = canvas.getContext('2d');

            var textureObj = (0, _lodash.assign)({
                canvas: canvas,
                haze: haze,
                index: index,
                image: image,
                options: options,
                updateTexture: function updateTexture() {
                    haze.gl.createTexture(canvas, index, options.repeat ? haze.gl.gl.REPEAT : null);
                },
                render: function render() {
                    canvas.width = (options.fill ? haze.width : image.width) * haze.dpi * options.scale.x;
                    canvas.height = (options.fill ? haze.height : image.height) * haze.dpi * options.scale.y;

                    var dimensions = {
                        x: 0,
                        y: 0,
                        width: canvas.width,
                        height: canvas.height
                    };

                    if (options.fill) {
                        dimensions = (0, _fill2.default)(image.width, image.height, canvas.width, canvas.height, options.align.x, options.align.y);
                    }

                    ctx.drawImage(image, dimensions.x, dimensions.y, dimensions.width, dimensions.height);

                    this.updateTexture();
                },
                updateSize: function updateSize() {
                    this.render();
                    this.dispatchEvent('resize');
                }
            }, (0, _eventDispatcher2.default)());

            textureObj.updateSize();
            haze.addEventListener('resize', textureObj.updateSize.bind(textureObj));

            return textureObj;
        }

        Haze.prototype = (0, _lodash.assign)({
            canvas: null,
            _width: 0,
            _height: 0,
            _dpi: 1,
            _willUpdateSize: false,
            _throttledUpdateSize: null,
            timeScale: 1,
            _textures: null,
            loops: 1000,
            get width() {
                return this._width;
            },
            set width(v) {
                if (this._width == v) return;
                this._width = v;
                this.updateSize();
            },
            get height() {
                return this._height;
            },
            set height(v) {
                if (this._height == v) return;
                this._height = v;
                this.updateSize();
            },
            get dpi() {
                return this._dpi;
            },
            set dpi(v) {
                if (this._dpi == v) return;
                this._dpi = v;
                this.updateSize();
            },
            updateSize: function updateSize() {
                var _this2 = this;

                if (this._throttledUpdateSize == null) {
                    this._throttledUpdateSize = (0, _lodash.throttle)(function() {
                        if (_this2._willUpdateSize) return;
                        _this2._willUpdateSize = true;

                        requestAnimationFrame(function() {
                            _this2._willUpdateSize = false;

                            _this2.canvas.width = _this2.width * _this2.dpi;
                            _this2.canvas.style.width = _this2.width + 'px';
                            _this2.canvas.height = _this2.height * _this2.dpi;
                            _this2.canvas.style.height = _this2.height + 'px';

                            _this2.dispatchEvent('resize');
                            _this2.gl.gl.viewport(0, 0, _this2.canvas.width, _this2.canvas.height);
                        });
                    }, 300);
                }

                this._throttledUpdateSize();
            },
            getTextureByName: function getTextureByName(name) {
                var _this3 = this;

                return new Promise(function(resolve, reject) {
                    _this3._textures.forEach(function(v) {
                        return v.then(function(texture) {
                            if (texture.options.name == name) resolve(texture);
                        });
                    });
                });
            }
        }, (0, _eventDispatcher2.default)());

        exports.default = Haze;

        /***/
    }),
    /* 4 */
    /***/
    (function(module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        var _webgl = __webpack_require__(5);

        var WebGL = _interopRequireWildcard(_webgl);

        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) { return obj; } else {
                var newObj = {};
                if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } }
                newObj.default = obj;
                return newObj;
            }
        }

        function GL(canvas, options, vert, frag) {
            this.init(canvas, options, vert, frag);
        }
        GL.prototype = {
            canvas: null,
            gl: null,
            program: null,
            width: 0,
            height: 0,
            init: function init(canvas, options, vert, frag) {
                this.canvas = canvas;
                this.width = canvas.width;
                this.height = canvas.height;
                this.gl = WebGL.getContext(canvas, options);
                this.program = this.createProgram(vert, frag);
                this.useProgram(this.program);
            },
            createProgram: function createProgram(vert, frag) {
                var program = WebGL.createProgram(this.gl, vert, frag);
                return program;
            },
            useProgram: function useProgram(program) {
                this.program = program;
                this.gl.useProgram(program);
            },
            createTexture: function createTexture(source, i, wrap) {
                return WebGL.createTexture(this.gl, source, i, wrap);
            },
            createUniform: function createUniform(type, name) {
                for (var _len = arguments.length, v = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
                    v[_key - 2] = arguments[_key];
                }

                WebGL.createUniform.apply(WebGL, [this.gl, this.program, type, name].concat(v));
            },
            activeTexture: function activeTexture(i) {
                WebGL.activeTexture(this.gl, i);
            },
            updateTexture: function updateTexture(source) {
                WebGL.updateTexture(this.gl, source);
            },
            draw: function draw() {
                WebGL.setRectangle(this.gl, -1, -1, 2, 2);
                this.gl.drawArrays(this.gl.TRIANGLES, 0, 6);
            }
        };

        exports.default = GL;

        /***/
    }),
    /* 5 */
    /***/
    (function(module, exports) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.getContext = getContext;
        exports.createProgram = createProgram;
        exports.createShader = createShader;
        exports.createTexture = createTexture;
        exports.createUniform = createUniform;
        exports.activeTexture = activeTexture;
        exports.updateTexture = updateTexture;
        exports.setRectangle = setRectangle;

        function getContext(canvas) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            var contexts = ["webgl", "experimental-webgl"];
            var context = null;

            contexts.some(function(name) {
                try {
                    context = canvas.getContext(name, options);
                } catch (e) {};
                return context != null;
            });

            if (context == null) {
                document.body.classList.add("no-webgl");
            }

            return context;
        }

        function createProgram(gl, vertexScript, fragScript) {
            var vertexShader = createShader(gl, vertexScript, gl.VERTEX_SHADER);
            var fragShader = createShader(gl, fragScript, gl.FRAGMENT_SHADER);

            var program = gl.createProgram();
            gl.attachShader(program, vertexShader);
            gl.attachShader(program, fragShader);

            gl.linkProgram(program);

            var linked = gl.getProgramParameter(program, gl.LINK_STATUS);
            if (!linked) {
                var lastError = gl.getProgramInfoLog(program);
                error("Error in program linking: " + lastError);
                gl.deleteProgram(program);
                return null;
            }

            var positionLocation = gl.getAttribLocation(program, "a_position");
            var texCoordLocation = gl.getAttribLocation(program, "a_texCoord");

            var texCoordBuffer = gl.createBuffer();
            gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);

            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-1.0, -1.0, 1.0, -1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 1.0]), gl.STATIC_DRAW);

            gl.enableVertexAttribArray(texCoordLocation);
            gl.vertexAttribPointer(texCoordLocation, 2, gl.FLOAT, false, 0, 0);

            // Create a buffer for the position of the rectangle corners.
            var buffer = gl.createBuffer();
            gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
            gl.enableVertexAttribArray(positionLocation);
            gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);

            return program;
        }

        function createShader(gl, script, type) {
            var shader = gl.createShader(type);
            gl.shaderSource(shader, script);
            gl.compileShader(shader);

            var compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);

            if (!compiled) {
                var lastError = gl.getShaderInfoLog(shader);
                error("Error compiling shader '" + shader + "':" + lastError);
                gl.deleteShader(shader);
                return null;
            }
            return shader;
        }

        function createTexture(gl, source, i) {
            var wrap = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

            if (wrap == null) wrap = gl.CLAMP_TO_EDGE;
            var texture = gl.createTexture();
            activeTexture(gl, i);
            gl.bindTexture(gl.TEXTURE_2D, texture);

            // Set the parameters so we can render any size image.
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrap);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrap);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
            updateTexture(gl, source);

            return texture;
        }

        function createUniform(gl, program, type, name) {
            var location = gl.getUniformLocation(program, "u_" + name);

            for (var _len = arguments.length, args = Array(_len > 4 ? _len - 4 : 0), _key = 4; _key < _len; _key++) {
                args[_key - 4] = arguments[_key];
            }

            gl["uniform" + type].apply(gl, [location].concat(args));
        }

        function activeTexture(gl, i) {
            gl.activeTexture(gl["TEXTURE" + i]);
        }

        function updateTexture(gl, source) {
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, source);
        }

        function setRectangle(gl, x, y, width, height) {
            var x1 = x;
            var x2 = x + width;
            var y1 = y;
            var y2 = y + height;
            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([x1, y1, x2, y1, x1, y2, x1, y2, x2, y1, x2, y2]), gl.STATIC_DRAW);
        }

        function error(msg) {
            console.error(msg);
        }

        /***/
    }),
    /* 6 */
    /***/
    (function(module, exports) {

        module.exports = "precision mediump float;\n\nattribute vec2 a_position;\nvarying vec2 v_position;\n\nvoid main() {\n  v_position=(a_position+1.0)*0.5;\n  v_position.y=1.0-v_position.y;\n  gl_Position = vec4(a_position,0.0,1.0);\n}\n"

        /***/
    }),
    /* 7 */
    /***/
    (function(module, exports, __webpack_require__) {

        var __WEBPACK_AMD_DEFINE_RESULT__; /* WEBPACK VAR INJECTION */
        (function(global, module) {
            /**
             * @license
             * Lodash <https://lodash.com/>
             * Copyright JS Foundation and other contributors <https://js.foundation/>
             * Released under MIT license <https://lodash.com/license>
             * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
             * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
             */
            ;
            (function() {

                /** Used as a safe reference for `undefined` in pre-ES5 environments. */
                var undefined;

                /** Used as the semantic version number. */
                var VERSION = '4.17.4';

                /** Used as the size to enable large array optimizations. */
                var LARGE_ARRAY_SIZE = 200;

                /** Error message constants. */
                var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
                    FUNC_ERROR_TEXT = 'Expected a function';

                /** Used to stand-in for `undefined` hash values. */
                var HASH_UNDEFINED = '__lodash_hash_undefined__';

                /** Used as the maximum memoize cache size. */
                var MAX_MEMOIZE_SIZE = 500;

                /** Used as the internal argument placeholder. */
                var PLACEHOLDER = '__lodash_placeholder__';

                /** Used to compose bitmasks for cloning. */
                var CLONE_DEEP_FLAG = 1,
                    CLONE_FLAT_FLAG = 2,
                    CLONE_SYMBOLS_FLAG = 4;

                /** Used to compose bitmasks for value comparisons. */
                var COMPARE_PARTIAL_FLAG = 1,
                    COMPARE_UNORDERED_FLAG = 2;

                /** Used to compose bitmasks for function metadata. */
                var WRAP_BIND_FLAG = 1,
                    WRAP_BIND_KEY_FLAG = 2,
                    WRAP_CURRY_BOUND_FLAG = 4,
                    WRAP_CURRY_FLAG = 8,
                    WRAP_CURRY_RIGHT_FLAG = 16,
                    WRAP_PARTIAL_FLAG = 32,
                    WRAP_PARTIAL_RIGHT_FLAG = 64,
                    WRAP_ARY_FLAG = 128,
                    WRAP_REARG_FLAG = 256,
                    WRAP_FLIP_FLAG = 512;

                /** Used as default options for `_.truncate`. */
                var DEFAULT_TRUNC_LENGTH = 30,
                    DEFAULT_TRUNC_OMISSION = '...';

                /** Used to detect hot functions by number of calls within a span of milliseconds. */
                var HOT_COUNT = 800,
                    HOT_SPAN = 16;

                /** Used to indicate the type of lazy iteratees. */
                var LAZY_FILTER_FLAG = 1,
                    LAZY_MAP_FLAG = 2,
                    LAZY_WHILE_FLAG = 3;

                /** Used as references for various `Number` constants. */
                var INFINITY = 1 / 0,
                    MAX_SAFE_INTEGER = 9007199254740991,
                    MAX_INTEGER = 1.7976931348623157e+308,
                    NAN = 0 / 0;

                /** Used as references for the maximum length and index of an array. */
                var MAX_ARRAY_LENGTH = 4294967295,
                    MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
                    HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

                /** Used to associate wrap methods with their bit flags. */
                var wrapFlags = [
                    ['ary', WRAP_ARY_FLAG],
                    ['bind', WRAP_BIND_FLAG],
                    ['bindKey', WRAP_BIND_KEY_FLAG],
                    ['curry', WRAP_CURRY_FLAG],
                    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
                    ['flip', WRAP_FLIP_FLAG],
                    ['partial', WRAP_PARTIAL_FLAG],
                    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
                    ['rearg', WRAP_REARG_FLAG]
                ];

                /** `Object#toString` result references. */
                var argsTag = '[object Arguments]',
                    arrayTag = '[object Array]',
                    asyncTag = '[object AsyncFunction]',
                    boolTag = '[object Boolean]',
                    dateTag = '[object Date]',
                    domExcTag = '[object DOMException]',
                    errorTag = '[object Error]',
                    funcTag = '[object Function]',
                    genTag = '[object GeneratorFunction]',
                    mapTag = '[object Map]',
                    numberTag = '[object Number]',
                    nullTag = '[object Null]',
                    objectTag = '[object Object]',
                    promiseTag = '[object Promise]',
                    proxyTag = '[object Proxy]',
                    regexpTag = '[object RegExp]',
                    setTag = '[object Set]',
                    stringTag = '[object String]',
                    symbolTag = '[object Symbol]',
                    undefinedTag = '[object Undefined]',
                    weakMapTag = '[object WeakMap]',
                    weakSetTag = '[object WeakSet]';

                var arrayBufferTag = '[object ArrayBuffer]',
                    dataViewTag = '[object DataView]',
                    float32Tag = '[object Float32Array]',
                    float64Tag = '[object Float64Array]',
                    int8Tag = '[object Int8Array]',
                    int16Tag = '[object Int16Array]',
                    int32Tag = '[object Int32Array]',
                    uint8Tag = '[object Uint8Array]',
                    uint8ClampedTag = '[object Uint8ClampedArray]',
                    uint16Tag = '[object Uint16Array]',
                    uint32Tag = '[object Uint32Array]';

                /** Used to match empty string literals in compiled template source. */
                var reEmptyStringLeading = /\b__p \+= '';/g,
                    reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
                    reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

                /** Used to match HTML entities and HTML characters. */
                var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
                    reUnescapedHtml = /[&<>"']/g,
                    reHasEscapedHtml = RegExp(reEscapedHtml.source),
                    reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

                /** Used to match template delimiters. */
                var reEscape = /<%-([\s\S]+?)%>/g,
                    reEvaluate = /<%([\s\S]+?)%>/g,
                    reInterpolate = /<%=([\s\S]+?)%>/g;

                /** Used to match property names within property paths. */
                var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
                    reIsPlainProp = /^\w*$/,
                    reLeadingDot = /^\./,
                    rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

                /**
                 * Used to match `RegExp`
                 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
                 */
                var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
                    reHasRegExpChar = RegExp(reRegExpChar.source);

                /** Used to match leading and trailing whitespace. */
                var reTrim = /^\s+|\s+$/g,
                    reTrimStart = /^\s+/,
                    reTrimEnd = /\s+$/;

                /** Used to match wrap detail comments. */
                var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
                    reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
                    reSplitDetails = /,? & /;

                /** Used to match words composed of alphanumeric characters. */
                var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

                /** Used to match backslashes in property paths. */
                var reEscapeChar = /\\(\\)?/g;

                /**
                 * Used to match
                 * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
                 */
                var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

                /** Used to match `RegExp` flags from their coerced string values. */
                var reFlags = /\w*$/;

                /** Used to detect bad signed hexadecimal string values. */
                var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

                /** Used to detect binary string values. */
                var reIsBinary = /^0b[01]+$/i;

                /** Used to detect host constructors (Safari). */
                var reIsHostCtor = /^\[object .+?Constructor\]$/;

                /** Used to detect octal string values. */
                var reIsOctal = /^0o[0-7]+$/i;

                /** Used to detect unsigned integer values. */
                var reIsUint = /^(?:0|[1-9]\d*)$/;

                /** Used to match Latin Unicode letters (excluding mathematical operators). */
                var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

                /** Used to ensure capturing order of template delimiters. */
                var reNoMatch = /($^)/;

                /** Used to match unescaped characters in compiled string literals. */
                var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

                /** Used to compose unicode character classes. */
                var rsAstralRange = '\\ud800-\\udfff',
                    rsComboMarksRange = '\\u0300-\\u036f',
                    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
                    rsComboSymbolsRange = '\\u20d0-\\u20ff',
                    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
                    rsDingbatRange = '\\u2700-\\u27bf',
                    rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
                    rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
                    rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
                    rsPunctuationRange = '\\u2000-\\u206f',
                    rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
                    rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
                    rsVarRange = '\\ufe0e\\ufe0f',
                    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

                /** Used to compose unicode capture groups. */
                var rsApos = "['\u2019]",
                    rsAstral = '[' + rsAstralRange + ']',
                    rsBreak = '[' + rsBreakRange + ']',
                    rsCombo = '[' + rsComboRange + ']',
                    rsDigits = '\\d+',
                    rsDingbat = '[' + rsDingbatRange + ']',
                    rsLower = '[' + rsLowerRange + ']',
                    rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
                    rsFitz = '\\ud83c[\\udffb-\\udfff]',
                    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
                    rsNonAstral = '[^' + rsAstralRange + ']',
                    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
                    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
                    rsUpper = '[' + rsUpperRange + ']',
                    rsZWJ = '\\u200d';

                /** Used to compose unicode regexes. */
                var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
                    rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
                    rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
                    rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
                    reOptMod = rsModifier + '?',
                    rsOptVar = '[' + rsVarRange + ']?',
                    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
                    rsOrdLower = '\\d*(?:(?:1st|2nd|3rd|(?![123])\\dth)\\b)',
                    rsOrdUpper = '\\d*(?:(?:1ST|2ND|3RD|(?![123])\\dTH)\\b)',
                    rsSeq = rsOptVar + reOptMod + rsOptJoin,
                    rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
                    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

                /** Used to match apostrophes. */
                var reApos = RegExp(rsApos, 'g');

                /**
                 * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
                 * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
                 */
                var reComboMark = RegExp(rsCombo, 'g');

                /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
                var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

                /** Used to match complex or compound words. */
                var reUnicodeWord = RegExp([
                    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
                    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
                    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
                    rsUpper + '+' + rsOptContrUpper,
                    rsOrdUpper,
                    rsOrdLower,
                    rsDigits,
                    rsEmoji
                ].join('|'), 'g');

                /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
                var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']');

                /** Used to detect strings that need a more robust regexp to match words. */
                var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

                /** Used to assign default `context` object properties. */
                var contextProps = [
                    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
                    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
                    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
                    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
                    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
                ];

                /** Used to make template sourceURLs easier to identify. */
                var templateCounter = -1;

                /** Used to identify `toStringTag` values of typed arrays. */
                var typedArrayTags = {};
                typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
                    typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
                    typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
                    typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
                    typedArrayTags[uint32Tag] = true;
                typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
                    typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
                    typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
                    typedArrayTags[errorTag] = typedArrayTags[funcTag] =
                    typedArrayTags[mapTag] = typedArrayTags[numberTag] =
                    typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
                    typedArrayTags[setTag] = typedArrayTags[stringTag] =
                    typedArrayTags[weakMapTag] = false;

                /** Used to identify `toStringTag` values supported by `_.clone`. */
                var cloneableTags = {};
                cloneableTags[argsTag] = cloneableTags[arrayTag] =
                    cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
                    cloneableTags[boolTag] = cloneableTags[dateTag] =
                    cloneableTags[float32Tag] = cloneableTags[float64Tag] =
                    cloneableTags[int8Tag] = cloneableTags[int16Tag] =
                    cloneableTags[int32Tag] = cloneableTags[mapTag] =
                    cloneableTags[numberTag] = cloneableTags[objectTag] =
                    cloneableTags[regexpTag] = cloneableTags[setTag] =
                    cloneableTags[stringTag] = cloneableTags[symbolTag] =
                    cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
                    cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
                cloneableTags[errorTag] = cloneableTags[funcTag] =
                    cloneableTags[weakMapTag] = false;

                /** Used to map Latin Unicode letters to basic Latin letters. */
                var deburredLetters = {
                    // Latin-1 Supplement block.
                    '\xc0': 'A',
                    '\xc1': 'A',
                    '\xc2': 'A',
                    '\xc3': 'A',
                    '\xc4': 'A',
                    '\xc5': 'A',
                    '\xe0': 'a',
                    '\xe1': 'a',
                    '\xe2': 'a',
                    '\xe3': 'a',
                    '\xe4': 'a',
                    '\xe5': 'a',
                    '\xc7': 'C',
                    '\xe7': 'c',
                    '\xd0': 'D',
                    '\xf0': 'd',
                    '\xc8': 'E',
                    '\xc9': 'E',
                    '\xca': 'E',
                    '\xcb': 'E',
                    '\xe8': 'e',
                    '\xe9': 'e',
                    '\xea': 'e',
                    '\xeb': 'e',
                    '\xcc': 'I',
                    '\xcd': 'I',
                    '\xce': 'I',
                    '\xcf': 'I',
                    '\xec': 'i',
                    '\xed': 'i',
                    '\xee': 'i',
                    '\xef': 'i',
                    '\xd1': 'N',
                    '\xf1': 'n',
                    '\xd2': 'O',
                    '\xd3': 'O',
                    '\xd4': 'O',
                    '\xd5': 'O',
                    '\xd6': 'O',
                    '\xd8': 'O',
                    '\xf2': 'o',
                    '\xf3': 'o',
                    '\xf4': 'o',
                    '\xf5': 'o',
                    '\xf6': 'o',
                    '\xf8': 'o',
                    '\xd9': 'U',
                    '\xda': 'U',
                    '\xdb': 'U',
                    '\xdc': 'U',
                    '\xf9': 'u',
                    '\xfa': 'u',
                    '\xfb': 'u',
                    '\xfc': 'u',
                    '\xdd': 'Y',
                    '\xfd': 'y',
                    '\xff': 'y',
                    '\xc6': 'Ae',
                    '\xe6': 'ae',
                    '\xde': 'Th',
                    '\xfe': 'th',
                    '\xdf': 'ss',
                    // Latin Extended-A block.
                    '\u0100': 'A',
                    '\u0102': 'A',
                    '\u0104': 'A',
                    '\u0101': 'a',
                    '\u0103': 'a',
                    '\u0105': 'a',
                    '\u0106': 'C',
                    '\u0108': 'C',
                    '\u010a': 'C',
                    '\u010c': 'C',
                    '\u0107': 'c',
                    '\u0109': 'c',
                    '\u010b': 'c',
                    '\u010d': 'c',
                    '\u010e': 'D',
                    '\u0110': 'D',
                    '\u010f': 'd',
                    '\u0111': 'd',
                    '\u0112': 'E',
                    '\u0114': 'E',
                    '\u0116': 'E',
                    '\u0118': 'E',
                    '\u011a': 'E',
                    '\u0113': 'e',
                    '\u0115': 'e',
                    '\u0117': 'e',
                    '\u0119': 'e',
                    '\u011b': 'e',
                    '\u011c': 'G',
                    '\u011e': 'G',
                    '\u0120': 'G',
                    '\u0122': 'G',
                    '\u011d': 'g',
                    '\u011f': 'g',
                    '\u0121': 'g',
                    '\u0123': 'g',
                    '\u0124': 'H',
                    '\u0126': 'H',
                    '\u0125': 'h',
                    '\u0127': 'h',
                    '\u0128': 'I',
                    '\u012a': 'I',
                    '\u012c': 'I',
                    '\u012e': 'I',
                    '\u0130': 'I',
                    '\u0129': 'i',
                    '\u012b': 'i',
                    '\u012d': 'i',
                    '\u012f': 'i',
                    '\u0131': 'i',
                    '\u0134': 'J',
                    '\u0135': 'j',
                    '\u0136': 'K',
                    '\u0137': 'k',
                    '\u0138': 'k',
                    '\u0139': 'L',
                    '\u013b': 'L',
                    '\u013d': 'L',
                    '\u013f': 'L',
                    '\u0141': 'L',
                    '\u013a': 'l',
                    '\u013c': 'l',
                    '\u013e': 'l',
                    '\u0140': 'l',
                    '\u0142': 'l',
                    '\u0143': 'N',
                    '\u0145': 'N',
                    '\u0147': 'N',
                    '\u014a': 'N',
                    '\u0144': 'n',
                    '\u0146': 'n',
                    '\u0148': 'n',
                    '\u014b': 'n',
                    '\u014c': 'O',
                    '\u014e': 'O',
                    '\u0150': 'O',
                    '\u014d': 'o',
                    '\u014f': 'o',
                    '\u0151': 'o',
                    '\u0154': 'R',
                    '\u0156': 'R',
                    '\u0158': 'R',
                    '\u0155': 'r',
                    '\u0157': 'r',
                    '\u0159': 'r',
                    '\u015a': 'S',
                    '\u015c': 'S',
                    '\u015e': 'S',
                    '\u0160': 'S',
                    '\u015b': 's',
                    '\u015d': 's',
                    '\u015f': 's',
                    '\u0161': 's',
                    '\u0162': 'T',
                    '\u0164': 'T',
                    '\u0166': 'T',
                    '\u0163': 't',
                    '\u0165': 't',
                    '\u0167': 't',
                    '\u0168': 'U',
                    '\u016a': 'U',
                    '\u016c': 'U',
                    '\u016e': 'U',
                    '\u0170': 'U',
                    '\u0172': 'U',
                    '\u0169': 'u',
                    '\u016b': 'u',
                    '\u016d': 'u',
                    '\u016f': 'u',
                    '\u0171': 'u',
                    '\u0173': 'u',
                    '\u0174': 'W',
                    '\u0175': 'w',
                    '\u0176': 'Y',
                    '\u0177': 'y',
                    '\u0178': 'Y',
                    '\u0179': 'Z',
                    '\u017b': 'Z',
                    '\u017d': 'Z',
                    '\u017a': 'z',
                    '\u017c': 'z',
                    '\u017e': 'z',
                    '\u0132': 'IJ',
                    '\u0133': 'ij',
                    '\u0152': 'Oe',
                    '\u0153': 'oe',
                    '\u0149': "'n",
                    '\u017f': 's'
                };

                /** Used to map characters to HTML entities. */
                var htmlEscapes = {
                    '&': '&amp;',
                    '<': '&lt;',
                    '>': '&gt;',
                    '"': '&quot;',
                    "'": '&#39;'
                };

                /** Used to map HTML entities to characters. */
                var htmlUnescapes = {
                    '&amp;': '&',
                    '&lt;': '<',
                    '&gt;': '>',
                    '&quot;': '"',
                    '&#39;': "'"
                };

                /** Used to escape characters for inclusion in compiled string literals. */
                var stringEscapes = {
                    '\\': '\\',
                    "'": "'",
                    '\n': 'n',
                    '\r': 'r',
                    '\u2028': 'u2028',
                    '\u2029': 'u2029'
                };

                /** Built-in method references without a dependency on `root`. */
                var freeParseFloat = parseFloat,
                    freeParseInt = parseInt;

                /** Detect free variable `global` from Node.js. */
                var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

                /** Detect free variable `self`. */
                var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

                /** Used as a reference to the global object. */
                var root = freeGlobal || freeSelf || Function('return this')();

                /** Detect free variable `exports`. */
                var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

                /** Detect free variable `module`. */
                var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

                /** Detect the popular CommonJS extension `module.exports`. */
                var moduleExports = freeModule && freeModule.exports === freeExports;

                /** Detect free variable `process` from Node.js. */
                var freeProcess = moduleExports && freeGlobal.process;

                /** Used to access faster Node.js helpers. */
                var nodeUtil = (function() {
                    try {
                        return freeProcess && freeProcess.binding && freeProcess.binding('util');
                    } catch (e) {}
                }());

                /* Node.js helper references. */
                var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
                    nodeIsDate = nodeUtil && nodeUtil.isDate,
                    nodeIsMap = nodeUtil && nodeUtil.isMap,
                    nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
                    nodeIsSet = nodeUtil && nodeUtil.isSet,
                    nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

                /*--------------------------------------------------------------------------*/

                /**
                 * Adds the key-value `pair` to `map`.
                 *
                 * @private
                 * @param {Object} map The map to modify.
                 * @param {Array} pair The key-value pair to add.
                 * @returns {Object} Returns `map`.
                 */
                function addMapEntry(map, pair) {
                    // Don't return `map.set` because it's not chainable in IE 11.
                    map.set(pair[0], pair[1]);
                    return map;
                }

                /**
                 * Adds `value` to `set`.
                 *
                 * @private
                 * @param {Object} set The set to modify.
                 * @param {*} value The value to add.
                 * @returns {Object} Returns `set`.
                 */
                function addSetEntry(set, value) {
                    // Don't return `set.add` because it's not chainable in IE 11.
                    set.add(value);
                    return set;
                }

                /**
                 * A faster alternative to `Function#apply`, this function invokes `func`
                 * with the `this` binding of `thisArg` and the arguments of `args`.
                 *
                 * @private
                 * @param {Function} func The function to invoke.
                 * @param {*} thisArg The `this` binding of `func`.
                 * @param {Array} args The arguments to invoke `func` with.
                 * @returns {*} Returns the result of `func`.
                 */
                function apply(func, thisArg, args) {
                    switch (args.length) {
                        case 0:
                            return func.call(thisArg);
                        case 1:
                            return func.call(thisArg, args[0]);
                        case 2:
                            return func.call(thisArg, args[0], args[1]);
                        case 3:
                            return func.call(thisArg, args[0], args[1], args[2]);
                    }
                    return func.apply(thisArg, args);
                }

                /**
                 * A specialized version of `baseAggregator` for arrays.
                 *
                 * @private
                 * @param {Array} [array] The array to iterate over.
                 * @param {Function} setter The function to set `accumulator` values.
                 * @param {Function} iteratee The iteratee to transform keys.
                 * @param {Object} accumulator The initial aggregated object.
                 * @returns {Function} Returns `accumulator`.
                 */
                function arrayAggregator(array, setter, iteratee, accumulator) {
                    var index = -1,
                        length = array == null ? 0 : array.length;

                    while (++index < length) {
                        var value = array[index];
                        setter(accumulator, value, iteratee(value), array);
                    }
                    return accumulator;
                }

                /**
                 * A specialized version of `_.forEach` for arrays without support for
                 * iteratee shorthands.
                 *
                 * @private
                 * @param {Array} [array] The array to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @returns {Array} Returns `array`.
                 */
                function arrayEach(array, iteratee) {
                    var index = -1,
                        length = array == null ? 0 : array.length;

                    while (++index < length) {
                        if (iteratee(array[index], index, array) === false) {
                            break;
                        }
                    }
                    return array;
                }

                /**
                 * A specialized version of `_.forEachRight` for arrays without support for
                 * iteratee shorthands.
                 *
                 * @private
                 * @param {Array} [array] The array to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @returns {Array} Returns `array`.
                 */
                function arrayEachRight(array, iteratee) {
                    var length = array == null ? 0 : array.length;

                    while (length--) {
                        if (iteratee(array[length], length, array) === false) {
                            break;
                        }
                    }
                    return array;
                }

                /**
                 * A specialized version of `_.every` for arrays without support for
                 * iteratee shorthands.
                 *
                 * @private
                 * @param {Array} [array] The array to iterate over.
                 * @param {Function} predicate The function invoked per iteration.
                 * @returns {boolean} Returns `true` if all elements pass the predicate check,
                 *  else `false`.
                 */
                function arrayEvery(array, predicate) {
                    var index = -1,
                        length = array == null ? 0 : array.length;

                    while (++index < length) {
                        if (!predicate(array[index], index, array)) {
                            return false;
                        }
                    }
                    return true;
                }

                /**
                 * A specialized version of `_.filter` for arrays without support for
                 * iteratee shorthands.
                 *
                 * @private
                 * @param {Array} [array] The array to iterate over.
                 * @param {Function} predicate The function invoked per iteration.
                 * @returns {Array} Returns the new filtered array.
                 */
                function arrayFilter(array, predicate) {
                    var index = -1,
                        length = array == null ? 0 : array.length,
                        resIndex = 0,
                        result = [];

                    while (++index < length) {
                        var value = array[index];
                        if (predicate(value, index, array)) {
                            result[resIndex++] = value;
                        }
                    }
                    return result;
                }

                /**
                 * A specialized version of `_.includes` for arrays without support for
                 * specifying an index to search from.
                 *
                 * @private
                 * @param {Array} [array] The array to inspect.
                 * @param {*} target The value to search for.
                 * @returns {boolean} Returns `true` if `target` is found, else `false`.
                 */
                function arrayIncludes(array, value) {
                    var length = array == null ? 0 : array.length;
                    return !!length && baseIndexOf(array, value, 0) > -1;
                }

                /**
                 * This function is like `arrayIncludes` except that it accepts a comparator.
                 *
                 * @private
                 * @param {Array} [array] The array to inspect.
                 * @param {*} target The value to search for.
                 * @param {Function} comparator The comparator invoked per element.
                 * @returns {boolean} Returns `true` if `target` is found, else `false`.
                 */
                function arrayIncludesWith(array, value, comparator) {
                    var index = -1,
                        length = array == null ? 0 : array.length;

                    while (++index < length) {
                        if (comparator(value, array[index])) {
                            return true;
                        }
                    }
                    return false;
                }

                /**
                 * A specialized version of `_.map` for arrays without support for iteratee
                 * shorthands.
                 *
                 * @private
                 * @param {Array} [array] The array to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @returns {Array} Returns the new mapped array.
                 */
                function arrayMap(array, iteratee) {
                    var index = -1,
                        length = array == null ? 0 : array.length,
                        result = Array(length);

                    while (++index < length) {
                        result[index] = iteratee(array[index], index, array);
                    }
                    return result;
                }

                /**
                 * Appends the elements of `values` to `array`.
                 *
                 * @private
                 * @param {Array} array The array to modify.
                 * @param {Array} values The values to append.
                 * @returns {Array} Returns `array`.
                 */
                function arrayPush(array, values) {
                    var index = -1,
                        length = values.length,
                        offset = array.length;

                    while (++index < length) {
                        array[offset + index] = values[index];
                    }
                    return array;
                }

                /**
                 * A specialized version of `_.reduce` for arrays without support for
                 * iteratee shorthands.
                 *
                 * @private
                 * @param {Array} [array] The array to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @param {*} [accumulator] The initial value.
                 * @param {boolean} [initAccum] Specify using the first element of `array` as
                 *  the initial value.
                 * @returns {*} Returns the accumulated value.
                 */
                function arrayReduce(array, iteratee, accumulator, initAccum) {
                    var index = -1,
                        length = array == null ? 0 : array.length;

                    if (initAccum && length) {
                        accumulator = array[++index];
                    }
                    while (++index < length) {
                        accumulator = iteratee(accumulator, array[index], index, array);
                    }
                    return accumulator;
                }

                /**
                 * A specialized version of `_.reduceRight` for arrays without support for
                 * iteratee shorthands.
                 *
                 * @private
                 * @param {Array} [array] The array to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @param {*} [accumulator] The initial value.
                 * @param {boolean} [initAccum] Specify using the last element of `array` as
                 *  the initial value.
                 * @returns {*} Returns the accumulated value.
                 */
                function arrayReduceRight(array, iteratee, accumulator, initAccum) {
                    var length = array == null ? 0 : array.length;
                    if (initAccum && length) {
                        accumulator = array[--length];
                    }
                    while (length--) {
                        accumulator = iteratee(accumulator, array[length], length, array);
                    }
                    return accumulator;
                }

                /**
                 * A specialized version of `_.some` for arrays without support for iteratee
                 * shorthands.
                 *
                 * @private
                 * @param {Array} [array] The array to iterate over.
                 * @param {Function} predicate The function invoked per iteration.
                 * @returns {boolean} Returns `true` if any element passes the predicate check,
                 *  else `false`.
                 */
                function arraySome(array, predicate) {
                    var index = -1,
                        length = array == null ? 0 : array.length;

                    while (++index < length) {
                        if (predicate(array[index], index, array)) {
                            return true;
                        }
                    }
                    return false;
                }

                /**
                 * Gets the size of an ASCII `string`.
                 *
                 * @private
                 * @param {string} string The string inspect.
                 * @returns {number} Returns the string size.
                 */
                var asciiSize = baseProperty('length');

                /**
                 * Converts an ASCII `string` to an array.
                 *
                 * @private
                 * @param {string} string The string to convert.
                 * @returns {Array} Returns the converted array.
                 */
                function asciiToArray(string) {
                    return string.split('');
                }

                /**
                 * Splits an ASCII `string` into an array of its words.
                 *
                 * @private
                 * @param {string} The string to inspect.
                 * @returns {Array} Returns the words of `string`.
                 */
                function asciiWords(string) {
                    return string.match(reAsciiWord) || [];
                }

                /**
                 * The base implementation of methods like `_.findKey` and `_.findLastKey`,
                 * without support for iteratee shorthands, which iterates over `collection`
                 * using `eachFunc`.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to inspect.
                 * @param {Function} predicate The function invoked per iteration.
                 * @param {Function} eachFunc The function to iterate over `collection`.
                 * @returns {*} Returns the found element or its key, else `undefined`.
                 */
                function baseFindKey(collection, predicate, eachFunc) {
                    var result;
                    eachFunc(collection, function(value, key, collection) {
                        if (predicate(value, key, collection)) {
                            result = key;
                            return false;
                        }
                    });
                    return result;
                }

                /**
                 * The base implementation of `_.findIndex` and `_.findLastIndex` without
                 * support for iteratee shorthands.
                 *
                 * @private
                 * @param {Array} array The array to inspect.
                 * @param {Function} predicate The function invoked per iteration.
                 * @param {number} fromIndex The index to search from.
                 * @param {boolean} [fromRight] Specify iterating from right to left.
                 * @returns {number} Returns the index of the matched value, else `-1`.
                 */
                function baseFindIndex(array, predicate, fromIndex, fromRight) {
                    var length = array.length,
                        index = fromIndex + (fromRight ? 1 : -1);

                    while ((fromRight ? index-- : ++index < length)) {
                        if (predicate(array[index], index, array)) {
                            return index;
                        }
                    }
                    return -1;
                }

                /**
                 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
                 *
                 * @private
                 * @param {Array} array The array to inspect.
                 * @param {*} value The value to search for.
                 * @param {number} fromIndex The index to search from.
                 * @returns {number} Returns the index of the matched value, else `-1`.
                 */
                function baseIndexOf(array, value, fromIndex) {
                    return value === value ?
                        strictIndexOf(array, value, fromIndex) :
                        baseFindIndex(array, baseIsNaN, fromIndex);
                }

                /**
                 * This function is like `baseIndexOf` except that it accepts a comparator.
                 *
                 * @private
                 * @param {Array} array The array to inspect.
                 * @param {*} value The value to search for.
                 * @param {number} fromIndex The index to search from.
                 * @param {Function} comparator The comparator invoked per element.
                 * @returns {number} Returns the index of the matched value, else `-1`.
                 */
                function baseIndexOfWith(array, value, fromIndex, comparator) {
                    var index = fromIndex - 1,
                        length = array.length;

                    while (++index < length) {
                        if (comparator(array[index], value)) {
                            return index;
                        }
                    }
                    return -1;
                }

                /**
                 * The base implementation of `_.isNaN` without support for number objects.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
                 */
                function baseIsNaN(value) {
                    return value !== value;
                }

                /**
                 * The base implementation of `_.mean` and `_.meanBy` without support for
                 * iteratee shorthands.
                 *
                 * @private
                 * @param {Array} array The array to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @returns {number} Returns the mean.
                 */
                function baseMean(array, iteratee) {
                    var length = array == null ? 0 : array.length;
                    return length ? (baseSum(array, iteratee) / length) : NAN;
                }

                /**
                 * The base implementation of `_.property` without support for deep paths.
                 *
                 * @private
                 * @param {string} key The key of the property to get.
                 * @returns {Function} Returns the new accessor function.
                 */
                function baseProperty(key) {
                    return function(object) {
                        return object == null ? undefined : object[key];
                    };
                }

                /**
                 * The base implementation of `_.propertyOf` without support for deep paths.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @returns {Function} Returns the new accessor function.
                 */
                function basePropertyOf(object) {
                    return function(key) {
                        return object == null ? undefined : object[key];
                    };
                }

                /**
                 * The base implementation of `_.reduce` and `_.reduceRight`, without support
                 * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @param {*} accumulator The initial value.
                 * @param {boolean} initAccum Specify using the first or last element of
                 *  `collection` as the initial value.
                 * @param {Function} eachFunc The function to iterate over `collection`.
                 * @returns {*} Returns the accumulated value.
                 */
                function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
                    eachFunc(collection, function(value, index, collection) {
                        accumulator = initAccum ?
                            (initAccum = false, value) :
                            iteratee(accumulator, value, index, collection);
                    });
                    return accumulator;
                }

                /**
                 * The base implementation of `_.sortBy` which uses `comparer` to define the
                 * sort order of `array` and replaces criteria objects with their corresponding
                 * values.
                 *
                 * @private
                 * @param {Array} array The array to sort.
                 * @param {Function} comparer The function to define sort order.
                 * @returns {Array} Returns `array`.
                 */
                function baseSortBy(array, comparer) {
                    var length = array.length;

                    array.sort(comparer);
                    while (length--) {
                        array[length] = array[length].value;
                    }
                    return array;
                }

                /**
                 * The base implementation of `_.sum` and `_.sumBy` without support for
                 * iteratee shorthands.
                 *
                 * @private
                 * @param {Array} array The array to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @returns {number} Returns the sum.
                 */
                function baseSum(array, iteratee) {
                    var result,
                        index = -1,
                        length = array.length;

                    while (++index < length) {
                        var current = iteratee(array[index]);
                        if (current !== undefined) {
                            result = result === undefined ? current : (result + current);
                        }
                    }
                    return result;
                }

                /**
                 * The base implementation of `_.times` without support for iteratee shorthands
                 * or max array length checks.
                 *
                 * @private
                 * @param {number} n The number of times to invoke `iteratee`.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @returns {Array} Returns the array of results.
                 */
                function baseTimes(n, iteratee) {
                    var index = -1,
                        result = Array(n);

                    while (++index < n) {
                        result[index] = iteratee(index);
                    }
                    return result;
                }

                /**
                 * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
                 * of key-value pairs for `object` corresponding to the property names of `props`.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @param {Array} props The property names to get values for.
                 * @returns {Object} Returns the key-value pairs.
                 */
                function baseToPairs(object, props) {
                    return arrayMap(props, function(key) {
                        return [key, object[key]];
                    });
                }

                /**
                 * The base implementation of `_.unary` without support for storing metadata.
                 *
                 * @private
                 * @param {Function} func The function to cap arguments for.
                 * @returns {Function} Returns the new capped function.
                 */
                function baseUnary(func) {
                    return function(value) {
                        return func(value);
                    };
                }

                /**
                 * The base implementation of `_.values` and `_.valuesIn` which creates an
                 * array of `object` property values corresponding to the property names
                 * of `props`.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @param {Array} props The property names to get values for.
                 * @returns {Object} Returns the array of property values.
                 */
                function baseValues(object, props) {
                    return arrayMap(props, function(key) {
                        return object[key];
                    });
                }

                /**
                 * Checks if a `cache` value for `key` exists.
                 *
                 * @private
                 * @param {Object} cache The cache to query.
                 * @param {string} key The key of the entry to check.
                 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                 */
                function cacheHas(cache, key) {
                    return cache.has(key);
                }

                /**
                 * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
                 * that is not found in the character symbols.
                 *
                 * @private
                 * @param {Array} strSymbols The string symbols to inspect.
                 * @param {Array} chrSymbols The character symbols to find.
                 * @returns {number} Returns the index of the first unmatched string symbol.
                 */
                function charsStartIndex(strSymbols, chrSymbols) {
                    var index = -1,
                        length = strSymbols.length;

                    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
                    return index;
                }

                /**
                 * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
                 * that is not found in the character symbols.
                 *
                 * @private
                 * @param {Array} strSymbols The string symbols to inspect.
                 * @param {Array} chrSymbols The character symbols to find.
                 * @returns {number} Returns the index of the last unmatched string symbol.
                 */
                function charsEndIndex(strSymbols, chrSymbols) {
                    var index = strSymbols.length;

                    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
                    return index;
                }

                /**
                 * Gets the number of `placeholder` occurrences in `array`.
                 *
                 * @private
                 * @param {Array} array The array to inspect.
                 * @param {*} placeholder The placeholder to search for.
                 * @returns {number} Returns the placeholder count.
                 */
                function countHolders(array, placeholder) {
                    var length = array.length,
                        result = 0;

                    while (length--) {
                        if (array[length] === placeholder) {
                            ++result;
                        }
                    }
                    return result;
                }

                /**
                 * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
                 * letters to basic Latin letters.
                 *
                 * @private
                 * @param {string} letter The matched letter to deburr.
                 * @returns {string} Returns the deburred letter.
                 */
                var deburrLetter = basePropertyOf(deburredLetters);

                /**
                 * Used by `_.escape` to convert characters to HTML entities.
                 *
                 * @private
                 * @param {string} chr The matched character to escape.
                 * @returns {string} Returns the escaped character.
                 */
                var escapeHtmlChar = basePropertyOf(htmlEscapes);

                /**
                 * Used by `_.template` to escape characters for inclusion in compiled string literals.
                 *
                 * @private
                 * @param {string} chr The matched character to escape.
                 * @returns {string} Returns the escaped character.
                 */
                function escapeStringChar(chr) {
                    return '\\' + stringEscapes[chr];
                }

                /**
                 * Gets the value at `key` of `object`.
                 *
                 * @private
                 * @param {Object} [object] The object to query.
                 * @param {string} key The key of the property to get.
                 * @returns {*} Returns the property value.
                 */
                function getValue(object, key) {
                    return object == null ? undefined : object[key];
                }

                /**
                 * Checks if `string` contains Unicode symbols.
                 *
                 * @private
                 * @param {string} string The string to inspect.
                 * @returns {boolean} Returns `true` if a symbol is found, else `false`.
                 */
                function hasUnicode(string) {
                    return reHasUnicode.test(string);
                }

                /**
                 * Checks if `string` contains a word composed of Unicode symbols.
                 *
                 * @private
                 * @param {string} string The string to inspect.
                 * @returns {boolean} Returns `true` if a word is found, else `false`.
                 */
                function hasUnicodeWord(string) {
                    return reHasUnicodeWord.test(string);
                }

                /**
                 * Converts `iterator` to an array.
                 *
                 * @private
                 * @param {Object} iterator The iterator to convert.
                 * @returns {Array} Returns the converted array.
                 */
                function iteratorToArray(iterator) {
                    var data,
                        result = [];

                    while (!(data = iterator.next()).done) {
                        result.push(data.value);
                    }
                    return result;
                }

                /**
                 * Converts `map` to its key-value pairs.
                 *
                 * @private
                 * @param {Object} map The map to convert.
                 * @returns {Array} Returns the key-value pairs.
                 */
                function mapToArray(map) {
                    var index = -1,
                        result = Array(map.size);

                    map.forEach(function(value, key) {
                        result[++index] = [key, value];
                    });
                    return result;
                }

                /**
                 * Creates a unary function that invokes `func` with its argument transformed.
                 *
                 * @private
                 * @param {Function} func The function to wrap.
                 * @param {Function} transform The argument transform.
                 * @returns {Function} Returns the new function.
                 */
                function overArg(func, transform) {
                    return function(arg) {
                        return func(transform(arg));
                    };
                }

                /**
                 * Replaces all `placeholder` elements in `array` with an internal placeholder
                 * and returns an array of their indexes.
                 *
                 * @private
                 * @param {Array} array The array to modify.
                 * @param {*} placeholder The placeholder to replace.
                 * @returns {Array} Returns the new array of placeholder indexes.
                 */
                function replaceHolders(array, placeholder) {
                    var index = -1,
                        length = array.length,
                        resIndex = 0,
                        result = [];

                    while (++index < length) {
                        var value = array[index];
                        if (value === placeholder || value === PLACEHOLDER) {
                            array[index] = PLACEHOLDER;
                            result[resIndex++] = index;
                        }
                    }
                    return result;
                }

                /**
                 * Converts `set` to an array of its values.
                 *
                 * @private
                 * @param {Object} set The set to convert.
                 * @returns {Array} Returns the values.
                 */
                function setToArray(set) {
                    var index = -1,
                        result = Array(set.size);

                    set.forEach(function(value) {
                        result[++index] = value;
                    });
                    return result;
                }

                /**
                 * Converts `set` to its value-value pairs.
                 *
                 * @private
                 * @param {Object} set The set to convert.
                 * @returns {Array} Returns the value-value pairs.
                 */
                function setToPairs(set) {
                    var index = -1,
                        result = Array(set.size);

                    set.forEach(function(value) {
                        result[++index] = [value, value];
                    });
                    return result;
                }

                /**
                 * A specialized version of `_.indexOf` which performs strict equality
                 * comparisons of values, i.e. `===`.
                 *
                 * @private
                 * @param {Array} array The array to inspect.
                 * @param {*} value The value to search for.
                 * @param {number} fromIndex The index to search from.
                 * @returns {number} Returns the index of the matched value, else `-1`.
                 */
                function strictIndexOf(array, value, fromIndex) {
                    var index = fromIndex - 1,
                        length = array.length;

                    while (++index < length) {
                        if (array[index] === value) {
                            return index;
                        }
                    }
                    return -1;
                }

                /**
                 * A specialized version of `_.lastIndexOf` which performs strict equality
                 * comparisons of values, i.e. `===`.
                 *
                 * @private
                 * @param {Array} array The array to inspect.
                 * @param {*} value The value to search for.
                 * @param {number} fromIndex The index to search from.
                 * @returns {number} Returns the index of the matched value, else `-1`.
                 */
                function strictLastIndexOf(array, value, fromIndex) {
                    var index = fromIndex + 1;
                    while (index--) {
                        if (array[index] === value) {
                            return index;
                        }
                    }
                    return index;
                }

                /**
                 * Gets the number of symbols in `string`.
                 *
                 * @private
                 * @param {string} string The string to inspect.
                 * @returns {number} Returns the string size.
                 */
                function stringSize(string) {
                    return hasUnicode(string) ?
                        unicodeSize(string) :
                        asciiSize(string);
                }

                /**
                 * Converts `string` to an array.
                 *
                 * @private
                 * @param {string} string The string to convert.
                 * @returns {Array} Returns the converted array.
                 */
                function stringToArray(string) {
                    return hasUnicode(string) ?
                        unicodeToArray(string) :
                        asciiToArray(string);
                }

                /**
                 * Used by `_.unescape` to convert HTML entities to characters.
                 *
                 * @private
                 * @param {string} chr The matched character to unescape.
                 * @returns {string} Returns the unescaped character.
                 */
                var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

                /**
                 * Gets the size of a Unicode `string`.
                 *
                 * @private
                 * @param {string} string The string inspect.
                 * @returns {number} Returns the string size.
                 */
                function unicodeSize(string) {
                    var result = reUnicode.lastIndex = 0;
                    while (reUnicode.test(string)) {
                        ++result;
                    }
                    return result;
                }

                /**
                 * Converts a Unicode `string` to an array.
                 *
                 * @private
                 * @param {string} string The string to convert.
                 * @returns {Array} Returns the converted array.
                 */
                function unicodeToArray(string) {
                    return string.match(reUnicode) || [];
                }

                /**
                 * Splits a Unicode `string` into an array of its words.
                 *
                 * @private
                 * @param {string} The string to inspect.
                 * @returns {Array} Returns the words of `string`.
                 */
                function unicodeWords(string) {
                    return string.match(reUnicodeWord) || [];
                }

                /*--------------------------------------------------------------------------*/

                /**
                 * Create a new pristine `lodash` function using the `context` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 1.1.0
                 * @category Util
                 * @param {Object} [context=root] The context object.
                 * @returns {Function} Returns a new `lodash` function.
                 * @example
                 *
                 * _.mixin({ 'foo': _.constant('foo') });
                 *
                 * var lodash = _.runInContext();
                 * lodash.mixin({ 'bar': lodash.constant('bar') });
                 *
                 * _.isFunction(_.foo);
                 * // => true
                 * _.isFunction(_.bar);
                 * // => false
                 *
                 * lodash.isFunction(lodash.foo);
                 * // => false
                 * lodash.isFunction(lodash.bar);
                 * // => true
                 *
                 * // Create a suped-up `defer` in Node.js.
                 * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
                 */
                var runInContext = (function runInContext(context) {
                    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

                    /** Built-in constructor references. */
                    var Array = context.Array,
                        Date = context.Date,
                        Error = context.Error,
                        Function = context.Function,
                        Math = context.Math,
                        Object = context.Object,
                        RegExp = context.RegExp,
                        String = context.String,
                        TypeError = context.TypeError;

                    /** Used for built-in method references. */
                    var arrayProto = Array.prototype,
                        funcProto = Function.prototype,
                        objectProto = Object.prototype;

                    /** Used to detect overreaching core-js shims. */
                    var coreJsData = context['__core-js_shared__'];

                    /** Used to resolve the decompiled source of functions. */
                    var funcToString = funcProto.toString;

                    /** Used to check objects for own properties. */
                    var hasOwnProperty = objectProto.hasOwnProperty;

                    /** Used to generate unique IDs. */
                    var idCounter = 0;

                    /** Used to detect methods masquerading as native. */
                    var maskSrcKey = (function() {
                        var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
                        return uid ? ('Symbol(src)_1.' + uid) : '';
                    }());

                    /**
                     * Used to resolve the
                     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
                     * of values.
                     */
                    var nativeObjectToString = objectProto.toString;

                    /** Used to infer the `Object` constructor. */
                    var objectCtorString = funcToString.call(Object);

                    /** Used to restore the original `_` reference in `_.noConflict`. */
                    var oldDash = root._;

                    /** Used to detect if a method is native. */
                    var reIsNative = RegExp('^' +
                        funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
                        .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
                    );

                    /** Built-in value references. */
                    var Buffer = moduleExports ? context.Buffer : undefined,
                        Symbol = context.Symbol,
                        Uint8Array = context.Uint8Array,
                        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
                        getPrototype = overArg(Object.getPrototypeOf, Object),
                        objectCreate = Object.create,
                        propertyIsEnumerable = objectProto.propertyIsEnumerable,
                        splice = arrayProto.splice,
                        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
                        symIterator = Symbol ? Symbol.iterator : undefined,
                        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

                    var defineProperty = (function() {
                        try {
                            var func = getNative(Object, 'defineProperty');
                            func({}, '', {});
                            return func;
                        } catch (e) {}
                    }());

                    /** Mocked built-ins. */
                    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
                        ctxNow = Date && Date.now !== root.Date.now && Date.now,
                        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

                    /* Built-in method references for those with the same name as other `lodash` methods. */
                    var nativeCeil = Math.ceil,
                        nativeFloor = Math.floor,
                        nativeGetSymbols = Object.getOwnPropertySymbols,
                        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
                        nativeIsFinite = context.isFinite,
                        nativeJoin = arrayProto.join,
                        nativeKeys = overArg(Object.keys, Object),
                        nativeMax = Math.max,
                        nativeMin = Math.min,
                        nativeNow = Date.now,
                        nativeParseInt = context.parseInt,
                        nativeRandom = Math.random,
                        nativeReverse = arrayProto.reverse;

                    /* Built-in method references that are verified to be native. */
                    var DataView = getNative(context, 'DataView'),
                        Map = getNative(context, 'Map'),
                        Promise = getNative(context, 'Promise'),
                        Set = getNative(context, 'Set'),
                        WeakMap = getNative(context, 'WeakMap'),
                        nativeCreate = getNative(Object, 'create');

                    /** Used to store function metadata. */
                    var metaMap = WeakMap && new WeakMap;

                    /** Used to lookup unminified function names. */
                    var realNames = {};

                    /** Used to detect maps, sets, and weakmaps. */
                    var dataViewCtorString = toSource(DataView),
                        mapCtorString = toSource(Map),
                        promiseCtorString = toSource(Promise),
                        setCtorString = toSource(Set),
                        weakMapCtorString = toSource(WeakMap);

                    /** Used to convert symbols to primitives and strings. */
                    var symbolProto = Symbol ? Symbol.prototype : undefined,
                        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
                        symbolToString = symbolProto ? symbolProto.toString : undefined;

                    /*------------------------------------------------------------------------*/

                    /**
                     * Creates a `lodash` object which wraps `value` to enable implicit method
                     * chain sequences. Methods that operate on and return arrays, collections,
                     * and functions can be chained together. Methods that retrieve a single value
                     * or may return a primitive value will automatically end the chain sequence
                     * and return the unwrapped value. Otherwise, the value must be unwrapped
                     * with `_#value`.
                     *
                     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
                     * enabled using `_.chain`.
                     *
                     * The execution of chained methods is lazy, that is, it's deferred until
                     * `_#value` is implicitly or explicitly called.
                     *
                     * Lazy evaluation allows several methods to support shortcut fusion.
                     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
                     * the creation of intermediate arrays and can greatly reduce the number of
                     * iteratee executions. Sections of a chain sequence qualify for shortcut
                     * fusion if the section is applied to an array and iteratees accept only
                     * one argument. The heuristic for whether a section qualifies for shortcut
                     * fusion is subject to change.
                     *
                     * Chaining is supported in custom builds as long as the `_#value` method is
                     * directly or indirectly included in the build.
                     *
                     * In addition to lodash methods, wrappers have `Array` and `String` methods.
                     *
                     * The wrapper `Array` methods are:
                     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
                     *
                     * The wrapper `String` methods are:
                     * `replace` and `split`
                     *
                     * The wrapper methods that support shortcut fusion are:
                     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
                     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
                     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
                     *
                     * The chainable wrapper methods are:
                     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
                     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
                     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
                     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
                     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
                     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
                     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
                     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
                     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
                     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
                     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
                     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
                     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
                     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
                     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
                     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
                     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
                     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
                     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
                     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
                     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
                     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
                     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
                     * `zipObject`, `zipObjectDeep`, and `zipWith`
                     *
                     * The wrapper methods that are **not** chainable by default are:
                     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
                     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
                     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
                     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
                     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
                     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
                     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
                     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
                     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
                     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
                     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
                     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
                     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
                     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
                     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
                     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
                     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
                     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
                     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
                     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
                     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
                     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
                     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
                     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
                     * `upperFirst`, `value`, and `words`
                     *
                     * @name _
                     * @constructor
                     * @category Seq
                     * @param {*} value The value to wrap in a `lodash` instance.
                     * @returns {Object} Returns the new `lodash` wrapper instance.
                     * @example
                     *
                     * function square(n) {
                     *   return n * n;
                     * }
                     *
                     * var wrapped = _([1, 2, 3]);
                     *
                     * // Returns an unwrapped value.
                     * wrapped.reduce(_.add);
                     * // => 6
                     *
                     * // Returns a wrapped value.
                     * var squares = wrapped.map(square);
                     *
                     * _.isArray(squares);
                     * // => false
                     *
                     * _.isArray(squares.value());
                     * // => true
                     */
                    function lodash(value) {
                        if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
                            if (value instanceof LodashWrapper) {
                                return value;
                            }
                            if (hasOwnProperty.call(value, '__wrapped__')) {
                                return wrapperClone(value);
                            }
                        }
                        return new LodashWrapper(value);
                    }

                    /**
                     * The base implementation of `_.create` without support for assigning
                     * properties to the created object.
                     *
                     * @private
                     * @param {Object} proto The object to inherit from.
                     * @returns {Object} Returns the new object.
                     */
                    var baseCreate = (function() {
                        function object() {}
                        return function(proto) {
                            if (!isObject(proto)) {
                                return {};
                            }
                            if (objectCreate) {
                                return objectCreate(proto);
                            }
                            object.prototype = proto;
                            var result = new object;
                            object.prototype = undefined;
                            return result;
                        };
                    }());

                    /**
                     * The function whose prototype chain sequence wrappers inherit from.
                     *
                     * @private
                     */
                    function baseLodash() {
                        // No operation performed.
                    }

                    /**
                     * The base constructor for creating `lodash` wrapper objects.
                     *
                     * @private
                     * @param {*} value The value to wrap.
                     * @param {boolean} [chainAll] Enable explicit method chain sequences.
                     */
                    function LodashWrapper(value, chainAll) {
                        this.__wrapped__ = value;
                        this.__actions__ = [];
                        this.__chain__ = !!chainAll;
                        this.__index__ = 0;
                        this.__values__ = undefined;
                    }

                    /**
                     * By default, the template delimiters used by lodash are like those in
                     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
                     * following template settings to use alternative delimiters.
                     *
                     * @static
                     * @memberOf _
                     * @type {Object}
                     */
                    lodash.templateSettings = {

                        /**
                         * Used to detect `data` property values to be HTML-escaped.
                         *
                         * @memberOf _.templateSettings
                         * @type {RegExp}
                         */
                        'escape': reEscape,

                        /**
                         * Used to detect code to be evaluated.
                         *
                         * @memberOf _.templateSettings
                         * @type {RegExp}
                         */
                        'evaluate': reEvaluate,

                        /**
                         * Used to detect `data` property values to inject.
                         *
                         * @memberOf _.templateSettings
                         * @type {RegExp}
                         */
                        'interpolate': reInterpolate,

                        /**
                         * Used to reference the data object in the template text.
                         *
                         * @memberOf _.templateSettings
                         * @type {string}
                         */
                        'variable': '',

                        /**
                         * Used to import variables into the compiled template.
                         *
                         * @memberOf _.templateSettings
                         * @type {Object}
                         */
                        'imports': {

                            /**
                             * A reference to the `lodash` function.
                             *
                             * @memberOf _.templateSettings.imports
                             * @type {Function}
                             */
                            '_': lodash
                        }
                    };

                    // Ensure wrappers are instances of `baseLodash`.
                    lodash.prototype = baseLodash.prototype;
                    lodash.prototype.constructor = lodash;

                    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
                    LodashWrapper.prototype.constructor = LodashWrapper;

                    /*------------------------------------------------------------------------*/

                    /**
                     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
                     *
                     * @private
                     * @constructor
                     * @param {*} value The value to wrap.
                     */
                    function LazyWrapper(value) {
                        this.__wrapped__ = value;
                        this.__actions__ = [];
                        this.__dir__ = 1;
                        this.__filtered__ = false;
                        this.__iteratees__ = [];
                        this.__takeCount__ = MAX_ARRAY_LENGTH;
                        this.__views__ = [];
                    }

                    /**
                     * Creates a clone of the lazy wrapper object.
                     *
                     * @private
                     * @name clone
                     * @memberOf LazyWrapper
                     * @returns {Object} Returns the cloned `LazyWrapper` object.
                     */
                    function lazyClone() {
                        var result = new LazyWrapper(this.__wrapped__);
                        result.__actions__ = copyArray(this.__actions__);
                        result.__dir__ = this.__dir__;
                        result.__filtered__ = this.__filtered__;
                        result.__iteratees__ = copyArray(this.__iteratees__);
                        result.__takeCount__ = this.__takeCount__;
                        result.__views__ = copyArray(this.__views__);
                        return result;
                    }

                    /**
                     * Reverses the direction of lazy iteration.
                     *
                     * @private
                     * @name reverse
                     * @memberOf LazyWrapper
                     * @returns {Object} Returns the new reversed `LazyWrapper` object.
                     */
                    function lazyReverse() {
                        if (this.__filtered__) {
                            var result = new LazyWrapper(this);
                            result.__dir__ = -1;
                            result.__filtered__ = true;
                        } else {
                            result = this.clone();
                            result.__dir__ *= -1;
                        }
                        return result;
                    }

                    /**
                     * Extracts the unwrapped value from its lazy wrapper.
                     *
                     * @private
                     * @name value
                     * @memberOf LazyWrapper
                     * @returns {*} Returns the unwrapped value.
                     */
                    function lazyValue() {
                        var array = this.__wrapped__.value(),
                            dir = this.__dir__,
                            isArr = isArray(array),
                            isRight = dir < 0,
                            arrLength = isArr ? array.length : 0,
                            view = getView(0, arrLength, this.__views__),
                            start = view.start,
                            end = view.end,
                            length = end - start,
                            index = isRight ? end : (start - 1),
                            iteratees = this.__iteratees__,
                            iterLength = iteratees.length,
                            resIndex = 0,
                            takeCount = nativeMin(length, this.__takeCount__);

                        if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
                            return baseWrapperValue(array, this.__actions__);
                        }
                        var result = [];

                        outer:
                            while (length-- && resIndex < takeCount) {
                                index += dir;

                                var iterIndex = -1,
                                    value = array[index];

                                while (++iterIndex < iterLength) {
                                    var data = iteratees[iterIndex],
                                        iteratee = data.iteratee,
                                        type = data.type,
                                        computed = iteratee(value);

                                    if (type == LAZY_MAP_FLAG) {
                                        value = computed;
                                    } else if (!computed) {
                                        if (type == LAZY_FILTER_FLAG) {
                                            continue outer;
                                        } else {
                                            break outer;
                                        }
                                    }
                                }
                                result[resIndex++] = value;
                            }
                        return result;
                    }

                    // Ensure `LazyWrapper` is an instance of `baseLodash`.
                    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
                    LazyWrapper.prototype.constructor = LazyWrapper;

                    /*------------------------------------------------------------------------*/

                    /**
                     * Creates a hash object.
                     *
                     * @private
                     * @constructor
                     * @param {Array} [entries] The key-value pairs to cache.
                     */
                    function Hash(entries) {
                        var index = -1,
                            length = entries == null ? 0 : entries.length;

                        this.clear();
                        while (++index < length) {
                            var entry = entries[index];
                            this.set(entry[0], entry[1]);
                        }
                    }

                    /**
                     * Removes all key-value entries from the hash.
                     *
                     * @private
                     * @name clear
                     * @memberOf Hash
                     */
                    function hashClear() {
                        this.__data__ = nativeCreate ? nativeCreate(null) : {};
                        this.size = 0;
                    }

                    /**
                     * Removes `key` and its value from the hash.
                     *
                     * @private
                     * @name delete
                     * @memberOf Hash
                     * @param {Object} hash The hash to modify.
                     * @param {string} key The key of the value to remove.
                     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                     */
                    function hashDelete(key) {
                        var result = this.has(key) && delete this.__data__[key];
                        this.size -= result ? 1 : 0;
                        return result;
                    }

                    /**
                     * Gets the hash value for `key`.
                     *
                     * @private
                     * @name get
                     * @memberOf Hash
                     * @param {string} key The key of the value to get.
                     * @returns {*} Returns the entry value.
                     */
                    function hashGet(key) {
                        var data = this.__data__;
                        if (nativeCreate) {
                            var result = data[key];
                            return result === HASH_UNDEFINED ? undefined : result;
                        }
                        return hasOwnProperty.call(data, key) ? data[key] : undefined;
                    }

                    /**
                     * Checks if a hash value for `key` exists.
                     *
                     * @private
                     * @name has
                     * @memberOf Hash
                     * @param {string} key The key of the entry to check.
                     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                     */
                    function hashHas(key) {
                        var data = this.__data__;
                        return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
                    }

                    /**
                     * Sets the hash `key` to `value`.
                     *
                     * @private
                     * @name set
                     * @memberOf Hash
                     * @param {string} key The key of the value to set.
                     * @param {*} value The value to set.
                     * @returns {Object} Returns the hash instance.
                     */
                    function hashSet(key, value) {
                        var data = this.__data__;
                        this.size += this.has(key) ? 0 : 1;
                        data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
                        return this;
                    }

                    // Add methods to `Hash`.
                    Hash.prototype.clear = hashClear;
                    Hash.prototype['delete'] = hashDelete;
                    Hash.prototype.get = hashGet;
                    Hash.prototype.has = hashHas;
                    Hash.prototype.set = hashSet;

                    /*------------------------------------------------------------------------*/

                    /**
                     * Creates an list cache object.
                     *
                     * @private
                     * @constructor
                     * @param {Array} [entries] The key-value pairs to cache.
                     */
                    function ListCache(entries) {
                        var index = -1,
                            length = entries == null ? 0 : entries.length;

                        this.clear();
                        while (++index < length) {
                            var entry = entries[index];
                            this.set(entry[0], entry[1]);
                        }
                    }

                    /**
                     * Removes all key-value entries from the list cache.
                     *
                     * @private
                     * @name clear
                     * @memberOf ListCache
                     */
                    function listCacheClear() {
                        this.__data__ = [];
                        this.size = 0;
                    }

                    /**
                     * Removes `key` and its value from the list cache.
                     *
                     * @private
                     * @name delete
                     * @memberOf ListCache
                     * @param {string} key The key of the value to remove.
                     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                     */
                    function listCacheDelete(key) {
                        var data = this.__data__,
                            index = assocIndexOf(data, key);

                        if (index < 0) {
                            return false;
                        }
                        var lastIndex = data.length - 1;
                        if (index == lastIndex) {
                            data.pop();
                        } else {
                            splice.call(data, index, 1);
                        }
                        --this.size;
                        return true;
                    }

                    /**
                     * Gets the list cache value for `key`.
                     *
                     * @private
                     * @name get
                     * @memberOf ListCache
                     * @param {string} key The key of the value to get.
                     * @returns {*} Returns the entry value.
                     */
                    function listCacheGet(key) {
                        var data = this.__data__,
                            index = assocIndexOf(data, key);

                        return index < 0 ? undefined : data[index][1];
                    }

                    /**
                     * Checks if a list cache value for `key` exists.
                     *
                     * @private
                     * @name has
                     * @memberOf ListCache
                     * @param {string} key The key of the entry to check.
                     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                     */
                    function listCacheHas(key) {
                        return assocIndexOf(this.__data__, key) > -1;
                    }

                    /**
                     * Sets the list cache `key` to `value`.
                     *
                     * @private
                     * @name set
                     * @memberOf ListCache
                     * @param {string} key The key of the value to set.
                     * @param {*} value The value to set.
                     * @returns {Object} Returns the list cache instance.
                     */
                    function listCacheSet(key, value) {
                        var data = this.__data__,
                            index = assocIndexOf(data, key);

                        if (index < 0) {
                            ++this.size;
                            data.push([key, value]);
                        } else {
                            data[index][1] = value;
                        }
                        return this;
                    }

                    // Add methods to `ListCache`.
                    ListCache.prototype.clear = listCacheClear;
                    ListCache.prototype['delete'] = listCacheDelete;
                    ListCache.prototype.get = listCacheGet;
                    ListCache.prototype.has = listCacheHas;
                    ListCache.prototype.set = listCacheSet;

                    /*------------------------------------------------------------------------*/

                    /**
                     * Creates a map cache object to store key-value pairs.
                     *
                     * @private
                     * @constructor
                     * @param {Array} [entries] The key-value pairs to cache.
                     */
                    function MapCache(entries) {
                        var index = -1,
                            length = entries == null ? 0 : entries.length;

                        this.clear();
                        while (++index < length) {
                            var entry = entries[index];
                            this.set(entry[0], entry[1]);
                        }
                    }

                    /**
                     * Removes all key-value entries from the map.
                     *
                     * @private
                     * @name clear
                     * @memberOf MapCache
                     */
                    function mapCacheClear() {
                        this.size = 0;
                        this.__data__ = {
                            'hash': new Hash,
                            'map': new(Map || ListCache),
                            'string': new Hash
                        };
                    }

                    /**
                     * Removes `key` and its value from the map.
                     *
                     * @private
                     * @name delete
                     * @memberOf MapCache
                     * @param {string} key The key of the value to remove.
                     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                     */
                    function mapCacheDelete(key) {
                        var result = getMapData(this, key)['delete'](key);
                        this.size -= result ? 1 : 0;
                        return result;
                    }

                    /**
                     * Gets the map value for `key`.
                     *
                     * @private
                     * @name get
                     * @memberOf MapCache
                     * @param {string} key The key of the value to get.
                     * @returns {*} Returns the entry value.
                     */
                    function mapCacheGet(key) {
                        return getMapData(this, key).get(key);
                    }

                    /**
                     * Checks if a map value for `key` exists.
                     *
                     * @private
                     * @name has
                     * @memberOf MapCache
                     * @param {string} key The key of the entry to check.
                     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                     */
                    function mapCacheHas(key) {
                        return getMapData(this, key).has(key);
                    }

                    /**
                     * Sets the map `key` to `value`.
                     *
                     * @private
                     * @name set
                     * @memberOf MapCache
                     * @param {string} key The key of the value to set.
                     * @param {*} value The value to set.
                     * @returns {Object} Returns the map cache instance.
                     */
                    function mapCacheSet(key, value) {
                        var data = getMapData(this, key),
                            size = data.size;

                        data.set(key, value);
                        this.size += data.size == size ? 0 : 1;
                        return this;
                    }

                    // Add methods to `MapCache`.
                    MapCache.prototype.clear = mapCacheClear;
                    MapCache.prototype['delete'] = mapCacheDelete;
                    MapCache.prototype.get = mapCacheGet;
                    MapCache.prototype.has = mapCacheHas;
                    MapCache.prototype.set = mapCacheSet;

                    /*------------------------------------------------------------------------*/

                    /**
                     *
                     * Creates an array cache object to store unique values.
                     *
                     * @private
                     * @constructor
                     * @param {Array} [values] The values to cache.
                     */
                    function SetCache(values) {
                        var index = -1,
                            length = values == null ? 0 : values.length;

                        this.__data__ = new MapCache;
                        while (++index < length) {
                            this.add(values[index]);
                        }
                    }

                    /**
                     * Adds `value` to the array cache.
                     *
                     * @private
                     * @name add
                     * @memberOf SetCache
                     * @alias push
                     * @param {*} value The value to cache.
                     * @returns {Object} Returns the cache instance.
                     */
                    function setCacheAdd(value) {
                        this.__data__.set(value, HASH_UNDEFINED);
                        return this;
                    }

                    /**
                     * Checks if `value` is in the array cache.
                     *
                     * @private
                     * @name has
                     * @memberOf SetCache
                     * @param {*} value The value to search for.
                     * @returns {number} Returns `true` if `value` is found, else `false`.
                     */
                    function setCacheHas(value) {
                        return this.__data__.has(value);
                    }

                    // Add methods to `SetCache`.
                    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
                    SetCache.prototype.has = setCacheHas;

                    /*------------------------------------------------------------------------*/

                    /**
                     * Creates a stack cache object to store key-value pairs.
                     *
                     * @private
                     * @constructor
                     * @param {Array} [entries] The key-value pairs to cache.
                     */
                    function Stack(entries) {
                        var data = this.__data__ = new ListCache(entries);
                        this.size = data.size;
                    }

                    /**
                     * Removes all key-value entries from the stack.
                     *
                     * @private
                     * @name clear
                     * @memberOf Stack
                     */
                    function stackClear() {
                        this.__data__ = new ListCache;
                        this.size = 0;
                    }

                    /**
                     * Removes `key` and its value from the stack.
                     *
                     * @private
                     * @name delete
                     * @memberOf Stack
                     * @param {string} key The key of the value to remove.
                     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                     */
                    function stackDelete(key) {
                        var data = this.__data__,
                            result = data['delete'](key);

                        this.size = data.size;
                        return result;
                    }

                    /**
                     * Gets the stack value for `key`.
                     *
                     * @private
                     * @name get
                     * @memberOf Stack
                     * @param {string} key The key of the value to get.
                     * @returns {*} Returns the entry value.
                     */
                    function stackGet(key) {
                        return this.__data__.get(key);
                    }

                    /**
                     * Checks if a stack value for `key` exists.
                     *
                     * @private
                     * @name has
                     * @memberOf Stack
                     * @param {string} key The key of the entry to check.
                     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                     */
                    function stackHas(key) {
                        return this.__data__.has(key);
                    }

                    /**
                     * Sets the stack `key` to `value`.
                     *
                     * @private
                     * @name set
                     * @memberOf Stack
                     * @param {string} key The key of the value to set.
                     * @param {*} value The value to set.
                     * @returns {Object} Returns the stack cache instance.
                     */
                    function stackSet(key, value) {
                        var data = this.__data__;
                        if (data instanceof ListCache) {
                            var pairs = data.__data__;
                            if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
                                pairs.push([key, value]);
                                this.size = ++data.size;
                                return this;
                            }
                            data = this.__data__ = new MapCache(pairs);
                        }
                        data.set(key, value);
                        this.size = data.size;
                        return this;
                    }

                    // Add methods to `Stack`.
                    Stack.prototype.clear = stackClear;
                    Stack.prototype['delete'] = stackDelete;
                    Stack.prototype.get = stackGet;
                    Stack.prototype.has = stackHas;
                    Stack.prototype.set = stackSet;

                    /*------------------------------------------------------------------------*/

                    /**
                     * Creates an array of the enumerable property names of the array-like `value`.
                     *
                     * @private
                     * @param {*} value The value to query.
                     * @param {boolean} inherited Specify returning inherited property names.
                     * @returns {Array} Returns the array of property names.
                     */
                    function arrayLikeKeys(value, inherited) {
                        var isArr = isArray(value),
                            isArg = !isArr && isArguments(value),
                            isBuff = !isArr && !isArg && isBuffer(value),
                            isType = !isArr && !isArg && !isBuff && isTypedArray(value),
                            skipIndexes = isArr || isArg || isBuff || isType,
                            result = skipIndexes ? baseTimes(value.length, String) : [],
                            length = result.length;

                        for (var key in value) {
                            if ((inherited || hasOwnProperty.call(value, key)) &&
                                !(skipIndexes && (
                                    // Safari 9 has enumerable `arguments.length` in strict mode.
                                    key == 'length' ||
                                    // Node.js 0.10 has enumerable non-index properties on buffers.
                                    (isBuff && (key == 'offset' || key == 'parent')) ||
                                    // PhantomJS 2 has enumerable non-index properties on typed arrays.
                                    (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
                                    // Skip index properties.
                                    isIndex(key, length)
                                ))) {
                                result.push(key);
                            }
                        }
                        return result;
                    }

                    /**
                     * A specialized version of `_.sample` for arrays.
                     *
                     * @private
                     * @param {Array} array The array to sample.
                     * @returns {*} Returns the random element.
                     */
                    function arraySample(array) {
                        var length = array.length;
                        return length ? array[baseRandom(0, length - 1)] : undefined;
                    }

                    /**
                     * A specialized version of `_.sampleSize` for arrays.
                     *
                     * @private
                     * @param {Array} array The array to sample.
                     * @param {number} n The number of elements to sample.
                     * @returns {Array} Returns the random elements.
                     */
                    function arraySampleSize(array, n) {
                        return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
                    }

                    /**
                     * A specialized version of `_.shuffle` for arrays.
                     *
                     * @private
                     * @param {Array} array The array to shuffle.
                     * @returns {Array} Returns the new shuffled array.
                     */
                    function arrayShuffle(array) {
                        return shuffleSelf(copyArray(array));
                    }

                    /**
                     * This function is like `assignValue` except that it doesn't assign
                     * `undefined` values.
                     *
                     * @private
                     * @param {Object} object The object to modify.
                     * @param {string} key The key of the property to assign.
                     * @param {*} value The value to assign.
                     */
                    function assignMergeValue(object, key, value) {
                        if ((value !== undefined && !eq(object[key], value)) ||
                            (value === undefined && !(key in object))) {
                            baseAssignValue(object, key, value);
                        }
                    }

                    /**
                     * Assigns `value` to `key` of `object` if the existing value is not equivalent
                     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                     * for equality comparisons.
                     *
                     * @private
                     * @param {Object} object The object to modify.
                     * @param {string} key The key of the property to assign.
                     * @param {*} value The value to assign.
                     */
                    function assignValue(object, key, value) {
                        var objValue = object[key];
                        if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
                            (value === undefined && !(key in object))) {
                            baseAssignValue(object, key, value);
                        }
                    }

                    /**
                     * Gets the index at which the `key` is found in `array` of key-value pairs.
                     *
                     * @private
                     * @param {Array} array The array to inspect.
                     * @param {*} key The key to search for.
                     * @returns {number} Returns the index of the matched value, else `-1`.
                     */
                    function assocIndexOf(array, key) {
                        var length = array.length;
                        while (length--) {
                            if (eq(array[length][0], key)) {
                                return length;
                            }
                        }
                        return -1;
                    }

                    /**
                     * Aggregates elements of `collection` on `accumulator` with keys transformed
                     * by `iteratee` and values set by `setter`.
                     *
                     * @private
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} setter The function to set `accumulator` values.
                     * @param {Function} iteratee The iteratee to transform keys.
                     * @param {Object} accumulator The initial aggregated object.
                     * @returns {Function} Returns `accumulator`.
                     */
                    function baseAggregator(collection, setter, iteratee, accumulator) {
                        baseEach(collection, function(value, key, collection) {
                            setter(accumulator, value, iteratee(value), collection);
                        });
                        return accumulator;
                    }

                    /**
                     * The base implementation of `_.assign` without support for multiple sources
                     * or `customizer` functions.
                     *
                     * @private
                     * @param {Object} object The destination object.
                     * @param {Object} source The source object.
                     * @returns {Object} Returns `object`.
                     */
                    function baseAssign(object, source) {
                        return object && copyObject(source, keys(source), object);
                    }

                    /**
                     * The base implementation of `_.assignIn` without support for multiple sources
                     * or `customizer` functions.
                     *
                     * @private
                     * @param {Object} object The destination object.
                     * @param {Object} source The source object.
                     * @returns {Object} Returns `object`.
                     */
                    function baseAssignIn(object, source) {
                        return object && copyObject(source, keysIn(source), object);
                    }

                    /**
                     * The base implementation of `assignValue` and `assignMergeValue` without
                     * value checks.
                     *
                     * @private
                     * @param {Object} object The object to modify.
                     * @param {string} key The key of the property to assign.
                     * @param {*} value The value to assign.
                     */
                    function baseAssignValue(object, key, value) {
                        if (key == '__proto__' && defineProperty) {
                            defineProperty(object, key, {
                                'configurable': true,
                                'enumerable': true,
                                'value': value,
                                'writable': true
                            });
                        } else {
                            object[key] = value;
                        }
                    }

                    /**
                     * The base implementation of `_.at` without support for individual paths.
                     *
                     * @private
                     * @param {Object} object The object to iterate over.
                     * @param {string[]} paths The property paths to pick.
                     * @returns {Array} Returns the picked elements.
                     */
                    function baseAt(object, paths) {
                        var index = -1,
                            length = paths.length,
                            result = Array(length),
                            skip = object == null;

                        while (++index < length) {
                            result[index] = skip ? undefined : get(object, paths[index]);
                        }
                        return result;
                    }

                    /**
                     * The base implementation of `_.clamp` which doesn't coerce arguments.
                     *
                     * @private
                     * @param {number} number The number to clamp.
                     * @param {number} [lower] The lower bound.
                     * @param {number} upper The upper bound.
                     * @returns {number} Returns the clamped number.
                     */
                    function baseClamp(number, lower, upper) {
                        if (number === number) {
                            if (upper !== undefined) {
                                number = number <= upper ? number : upper;
                            }
                            if (lower !== undefined) {
                                number = number >= lower ? number : lower;
                            }
                        }
                        return number;
                    }

                    /**
                     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
                     * traversed objects.
                     *
                     * @private
                     * @param {*} value The value to clone.
                     * @param {boolean} bitmask The bitmask flags.
                     *  1 - Deep clone
                     *  2 - Flatten inherited properties
                     *  4 - Clone symbols
                     * @param {Function} [customizer] The function to customize cloning.
                     * @param {string} [key] The key of `value`.
                     * @param {Object} [object] The parent object of `value`.
                     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
                     * @returns {*} Returns the cloned value.
                     */
                    function baseClone(value, bitmask, customizer, key, object, stack) {
                        var result,
                            isDeep = bitmask & CLONE_DEEP_FLAG,
                            isFlat = bitmask & CLONE_FLAT_FLAG,
                            isFull = bitmask & CLONE_SYMBOLS_FLAG;

                        if (customizer) {
                            result = object ? customizer(value, key, object, stack) : customizer(value);
                        }
                        if (result !== undefined) {
                            return result;
                        }
                        if (!isObject(value)) {
                            return value;
                        }
                        var isArr = isArray(value);
                        if (isArr) {
                            result = initCloneArray(value);
                            if (!isDeep) {
                                return copyArray(value, result);
                            }
                        } else {
                            var tag = getTag(value),
                                isFunc = tag == funcTag || tag == genTag;

                            if (isBuffer(value)) {
                                return cloneBuffer(value, isDeep);
                            }
                            if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
                                result = (isFlat || isFunc) ? {} : initCloneObject(value);
                                if (!isDeep) {
                                    return isFlat ?
                                        copySymbolsIn(value, baseAssignIn(result, value)) :
                                        copySymbols(value, baseAssign(result, value));
                                }
                            } else {
                                if (!cloneableTags[tag]) {
                                    return object ? value : {};
                                }
                                result = initCloneByTag(value, tag, baseClone, isDeep);
                            }
                        }
                        // Check for circular references and return its corresponding clone.
                        stack || (stack = new Stack);
                        var stacked = stack.get(value);
                        if (stacked) {
                            return stacked;
                        }
                        stack.set(value, result);

                        var keysFunc = isFull ?
                            (isFlat ? getAllKeysIn : getAllKeys) :
                            (isFlat ? keysIn : keys);

                        var props = isArr ? undefined : keysFunc(value);
                        arrayEach(props || value, function(subValue, key) {
                            if (props) {
                                key = subValue;
                                subValue = value[key];
                            }
                            // Recursively populate clone (susceptible to call stack limits).
                            assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
                        });
                        return result;
                    }

                    /**
                     * The base implementation of `_.conforms` which doesn't clone `source`.
                     *
                     * @private
                     * @param {Object} source The object of property predicates to conform to.
                     * @returns {Function} Returns the new spec function.
                     */
                    function baseConforms(source) {
                        var props = keys(source);
                        return function(object) {
                            return baseConformsTo(object, source, props);
                        };
                    }

                    /**
                     * The base implementation of `_.conformsTo` which accepts `props` to check.
                     *
                     * @private
                     * @param {Object} object The object to inspect.
                     * @param {Object} source The object of property predicates to conform to.
                     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
                     */
                    function baseConformsTo(object, source, props) {
                        var length = props.length;
                        if (object == null) {
                            return !length;
                        }
                        object = Object(object);
                        while (length--) {
                            var key = props[length],
                                predicate = source[key],
                                value = object[key];

                            if ((value === undefined && !(key in object)) || !predicate(value)) {
                                return false;
                            }
                        }
                        return true;
                    }

                    /**
                     * The base implementation of `_.delay` and `_.defer` which accepts `args`
                     * to provide to `func`.
                     *
                     * @private
                     * @param {Function} func The function to delay.
                     * @param {number} wait The number of milliseconds to delay invocation.
                     * @param {Array} args The arguments to provide to `func`.
                     * @returns {number|Object} Returns the timer id or timeout object.
                     */
                    function baseDelay(func, wait, args) {
                        if (typeof func != 'function') {
                            throw new TypeError(FUNC_ERROR_TEXT);
                        }
                        return setTimeout(function() { func.apply(undefined, args); }, wait);
                    }

                    /**
                     * The base implementation of methods like `_.difference` without support
                     * for excluding multiple arrays or iteratee shorthands.
                     *
                     * @private
                     * @param {Array} array The array to inspect.
                     * @param {Array} values The values to exclude.
                     * @param {Function} [iteratee] The iteratee invoked per element.
                     * @param {Function} [comparator] The comparator invoked per element.
                     * @returns {Array} Returns the new array of filtered values.
                     */
                    function baseDifference(array, values, iteratee, comparator) {
                        var index = -1,
                            includes = arrayIncludes,
                            isCommon = true,
                            length = array.length,
                            result = [],
                            valuesLength = values.length;

                        if (!length) {
                            return result;
                        }
                        if (iteratee) {
                            values = arrayMap(values, baseUnary(iteratee));
                        }
                        if (comparator) {
                            includes = arrayIncludesWith;
                            isCommon = false;
                        } else if (values.length >= LARGE_ARRAY_SIZE) {
                            includes = cacheHas;
                            isCommon = false;
                            values = new SetCache(values);
                        }
                        outer:
                            while (++index < length) {
                                var value = array[index],
                                    computed = iteratee == null ? value : iteratee(value);

                                value = (comparator || value !== 0) ? value : 0;
                                if (isCommon && computed === computed) {
                                    var valuesIndex = valuesLength;
                                    while (valuesIndex--) {
                                        if (values[valuesIndex] === computed) {
                                            continue outer;
                                        }
                                    }
                                    result.push(value);
                                } else if (!includes(values, computed, comparator)) {
                                    result.push(value);
                                }
                            }
                        return result;
                    }

                    /**
                     * The base implementation of `_.forEach` without support for iteratee shorthands.
                     *
                     * @private
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} iteratee The function invoked per iteration.
                     * @returns {Array|Object} Returns `collection`.
                     */
                    var baseEach = createBaseEach(baseForOwn);

                    /**
                     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
                     *
                     * @private
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} iteratee The function invoked per iteration.
                     * @returns {Array|Object} Returns `collection`.
                     */
                    var baseEachRight = createBaseEach(baseForOwnRight, true);

                    /**
                     * The base implementation of `_.every` without support for iteratee shorthands.
                     *
                     * @private
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} predicate The function invoked per iteration.
                     * @returns {boolean} Returns `true` if all elements pass the predicate check,
                     *  else `false`
                     */
                    function baseEvery(collection, predicate) {
                        var result = true;
                        baseEach(collection, function(value, index, collection) {
                            result = !!predicate(value, index, collection);
                            return result;
                        });
                        return result;
                    }

                    /**
                     * The base implementation of methods like `_.max` and `_.min` which accepts a
                     * `comparator` to determine the extremum value.
                     *
                     * @private
                     * @param {Array} array The array to iterate over.
                     * @param {Function} iteratee The iteratee invoked per iteration.
                     * @param {Function} comparator The comparator used to compare values.
                     * @returns {*} Returns the extremum value.
                     */
                    function baseExtremum(array, iteratee, comparator) {
                        var index = -1,
                            length = array.length;

                        while (++index < length) {
                            var value = array[index],
                                current = iteratee(value);

                            if (current != null && (computed === undefined ?
                                    (current === current && !isSymbol(current)) :
                                    comparator(current, computed)
                                )) {
                                var computed = current,
                                    result = value;
                            }
                        }
                        return result;
                    }

                    /**
                     * The base implementation of `_.fill` without an iteratee call guard.
                     *
                     * @private
                     * @param {Array} array The array to fill.
                     * @param {*} value The value to fill `array` with.
                     * @param {number} [start=0] The start position.
                     * @param {number} [end=array.length] The end position.
                     * @returns {Array} Returns `array`.
                     */
                    function baseFill(array, value, start, end) {
                        var length = array.length;

                        start = toInteger(start);
                        if (start < 0) {
                            start = -start > length ? 0 : (length + start);
                        }
                        end = (end === undefined || end > length) ? length : toInteger(end);
                        if (end < 0) {
                            end += length;
                        }
                        end = start > end ? 0 : toLength(end);
                        while (start < end) {
                            array[start++] = value;
                        }
                        return array;
                    }

                    /**
                     * The base implementation of `_.filter` without support for iteratee shorthands.
                     *
                     * @private
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} predicate The function invoked per iteration.
                     * @returns {Array} Returns the new filtered array.
                     */
                    function baseFilter(collection, predicate) {
                        var result = [];
                        baseEach(collection, function(value, index, collection) {
                            if (predicate(value, index, collection)) {
                                result.push(value);
                            }
                        });
                        return result;
                    }

                    /**
                     * The base implementation of `_.flatten` with support for restricting flattening.
                     *
                     * @private
                     * @param {Array} array The array to flatten.
                     * @param {number} depth The maximum recursion depth.
                     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
                     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
                     * @param {Array} [result=[]] The initial result value.
                     * @returns {Array} Returns the new flattened array.
                     */
                    function baseFlatten(array, depth, predicate, isStrict, result) {
                        var index = -1,
                            length = array.length;

                        predicate || (predicate = isFlattenable);
                        result || (result = []);

                        while (++index < length) {
                            var value = array[index];
                            if (depth > 0 && predicate(value)) {
                                if (depth > 1) {
                                    // Recursively flatten arrays (susceptible to call stack limits).
                                    baseFlatten(value, depth - 1, predicate, isStrict, result);
                                } else {
                                    arrayPush(result, value);
                                }
                            } else if (!isStrict) {
                                result[result.length] = value;
                            }
                        }
                        return result;
                    }

                    /**
                     * The base implementation of `baseForOwn` which iterates over `object`
                     * properties returned by `keysFunc` and invokes `iteratee` for each property.
                     * Iteratee functions may exit iteration early by explicitly returning `false`.
                     *
                     * @private
                     * @param {Object} object The object to iterate over.
                     * @param {Function} iteratee The function invoked per iteration.
                     * @param {Function} keysFunc The function to get the keys of `object`.
                     * @returns {Object} Returns `object`.
                     */
                    var baseFor = createBaseFor();

                    /**
                     * This function is like `baseFor` except that it iterates over properties
                     * in the opposite order.
                     *
                     * @private
                     * @param {Object} object The object to iterate over.
                     * @param {Function} iteratee The function invoked per iteration.
                     * @param {Function} keysFunc The function to get the keys of `object`.
                     * @returns {Object} Returns `object`.
                     */
                    var baseForRight = createBaseFor(true);

                    /**
                     * The base implementation of `_.forOwn` without support for iteratee shorthands.
                     *
                     * @private
                     * @param {Object} object The object to iterate over.
                     * @param {Function} iteratee The function invoked per iteration.
                     * @returns {Object} Returns `object`.
                     */
                    function baseForOwn(object, iteratee) {
                        return object && baseFor(object, iteratee, keys);
                    }

                    /**
                     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
                     *
                     * @private
                     * @param {Object} object The object to iterate over.
                     * @param {Function} iteratee The function invoked per iteration.
                     * @returns {Object} Returns `object`.
                     */
                    function baseForOwnRight(object, iteratee) {
                        return object && baseForRight(object, iteratee, keys);
                    }

                    /**
                     * The base implementation of `_.functions` which creates an array of
                     * `object` function property names filtered from `props`.
                     *
                     * @private
                     * @param {Object} object The object to inspect.
                     * @param {Array} props The property names to filter.
                     * @returns {Array} Returns the function names.
                     */
                    function baseFunctions(object, props) {
                        return arrayFilter(props, function(key) {
                            return isFunction(object[key]);
                        });
                    }

                    /**
                     * The base implementation of `_.get` without support for default values.
                     *
                     * @private
                     * @param {Object} object The object to query.
                     * @param {Array|string} path The path of the property to get.
                     * @returns {*} Returns the resolved value.
                     */
                    function baseGet(object, path) {
                        path = castPath(path, object);

                        var index = 0,
                            length = path.length;

                        while (object != null && index < length) {
                            object = object[toKey(path[index++])];
                        }
                        return (index && index == length) ? object : undefined;
                    }

                    /**
                     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
                     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
                     * symbols of `object`.
                     *
                     * @private
                     * @param {Object} object The object to query.
                     * @param {Function} keysFunc The function to get the keys of `object`.
                     * @param {Function} symbolsFunc The function to get the symbols of `object`.
                     * @returns {Array} Returns the array of property names and symbols.
                     */
                    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
                        var result = keysFunc(object);
                        return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
                    }

                    /**
                     * The base implementation of `getTag` without fallbacks for buggy environments.
                     *
                     * @private
                     * @param {*} value The value to query.
                     * @returns {string} Returns the `toStringTag`.
                     */
                    function baseGetTag(value) {
                        if (value == null) {
                            return value === undefined ? undefinedTag : nullTag;
                        }
                        return (symToStringTag && symToStringTag in Object(value)) ?
                            getRawTag(value) :
                            objectToString(value);
                    }

                    /**
                     * The base implementation of `_.gt` which doesn't coerce arguments.
                     *
                     * @private
                     * @param {*} value The value to compare.
                     * @param {*} other The other value to compare.
                     * @returns {boolean} Returns `true` if `value` is greater than `other`,
                     *  else `false`.
                     */
                    function baseGt(value, other) {
                        return value > other;
                    }

                    /**
                     * The base implementation of `_.has` without support for deep paths.
                     *
                     * @private
                     * @param {Object} [object] The object to query.
                     * @param {Array|string} key The key to check.
                     * @returns {boolean} Returns `true` if `key` exists, else `false`.
                     */
                    function baseHas(object, key) {
                        return object != null && hasOwnProperty.call(object, key);
                    }

                    /**
                     * The base implementation of `_.hasIn` without support for deep paths.
                     *
                     * @private
                     * @param {Object} [object] The object to query.
                     * @param {Array|string} key The key to check.
                     * @returns {boolean} Returns `true` if `key` exists, else `false`.
                     */
                    function baseHasIn(object, key) {
                        return object != null && key in Object(object);
                    }

                    /**
                     * The base implementation of `_.inRange` which doesn't coerce arguments.
                     *
                     * @private
                     * @param {number} number The number to check.
                     * @param {number} start The start of the range.
                     * @param {number} end The end of the range.
                     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
                     */
                    function baseInRange(number, start, end) {
                        return number >= nativeMin(start, end) && number < nativeMax(start, end);
                    }

                    /**
                     * The base implementation of methods like `_.intersection`, without support
                     * for iteratee shorthands, that accepts an array of arrays to inspect.
                     *
                     * @private
                     * @param {Array} arrays The arrays to inspect.
                     * @param {Function} [iteratee] The iteratee invoked per element.
                     * @param {Function} [comparator] The comparator invoked per element.
                     * @returns {Array} Returns the new array of shared values.
                     */
                    function baseIntersection(arrays, iteratee, comparator) {
                        var includes = comparator ? arrayIncludesWith : arrayIncludes,
                            length = arrays[0].length,
                            othLength = arrays.length,
                            othIndex = othLength,
                            caches = Array(othLength),
                            maxLength = Infinity,
                            result = [];

                        while (othIndex--) {
                            var array = arrays[othIndex];
                            if (othIndex && iteratee) {
                                array = arrayMap(array, baseUnary(iteratee));
                            }
                            maxLength = nativeMin(array.length, maxLength);
                            caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120)) ?
                                new SetCache(othIndex && array) :
                                undefined;
                        }
                        array = arrays[0];

                        var index = -1,
                            seen = caches[0];

                        outer:
                            while (++index < length && result.length < maxLength) {
                                var value = array[index],
                                    computed = iteratee ? iteratee(value) : value;

                                value = (comparator || value !== 0) ? value : 0;
                                if (!(seen ?
                                        cacheHas(seen, computed) :
                                        includes(result, computed, comparator)
                                    )) {
                                    othIndex = othLength;
                                    while (--othIndex) {
                                        var cache = caches[othIndex];
                                        if (!(cache ?
                                                cacheHas(cache, computed) :
                                                includes(arrays[othIndex], computed, comparator))) {
                                            continue outer;
                                        }
                                    }
                                    if (seen) {
                                        seen.push(computed);
                                    }
                                    result.push(value);
                                }
                            }
                        return result;
                    }

                    /**
                     * The base implementation of `_.invert` and `_.invertBy` which inverts
                     * `object` with values transformed by `iteratee` and set by `setter`.
                     *
                     * @private
                     * @param {Object} object The object to iterate over.
                     * @param {Function} setter The function to set `accumulator` values.
                     * @param {Function} iteratee The iteratee to transform values.
                     * @param {Object} accumulator The initial inverted object.
                     * @returns {Function} Returns `accumulator`.
                     */
                    function baseInverter(object, setter, iteratee, accumulator) {
                        baseForOwn(object, function(value, key, object) {
                            setter(accumulator, iteratee(value), key, object);
                        });
                        return accumulator;
                    }

                    /**
                     * The base implementation of `_.invoke` without support for individual
                     * method arguments.
                     *
                     * @private
                     * @param {Object} object The object to query.
                     * @param {Array|string} path The path of the method to invoke.
                     * @param {Array} args The arguments to invoke the method with.
                     * @returns {*} Returns the result of the invoked method.
                     */
                    function baseInvoke(object, path, args) {
                        path = castPath(path, object);
                        object = parent(object, path);
                        var func = object == null ? object : object[toKey(last(path))];
                        return func == null ? undefined : apply(func, object, args);
                    }

                    /**
                     * The base implementation of `_.isArguments`.
                     *
                     * @private
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
                     */
                    function baseIsArguments(value) {
                        return isObjectLike(value) && baseGetTag(value) == argsTag;
                    }

                    /**
                     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
                     *
                     * @private
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
                     */
                    function baseIsArrayBuffer(value) {
                        return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
                    }

                    /**
                     * The base implementation of `_.isDate` without Node.js optimizations.
                     *
                     * @private
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
                     */
                    function baseIsDate(value) {
                        return isObjectLike(value) && baseGetTag(value) == dateTag;
                    }

                    /**
                     * The base implementation of `_.isEqual` which supports partial comparisons
                     * and tracks traversed objects.
                     *
                     * @private
                     * @param {*} value The value to compare.
                     * @param {*} other The other value to compare.
                     * @param {boolean} bitmask The bitmask flags.
                     *  1 - Unordered comparison
                     *  2 - Partial comparison
                     * @param {Function} [customizer] The function to customize comparisons.
                     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
                     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
                     */
                    function baseIsEqual(value, other, bitmask, customizer, stack) {
                        if (value === other) {
                            return true;
                        }
                        if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
                            return value !== value && other !== other;
                        }
                        return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
                    }

                    /**
                     * A specialized version of `baseIsEqual` for arrays and objects which performs
                     * deep comparisons and tracks traversed objects enabling objects with circular
                     * references to be compared.
                     *
                     * @private
                     * @param {Object} object The object to compare.
                     * @param {Object} other The other object to compare.
                     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
                     * @param {Function} customizer The function to customize comparisons.
                     * @param {Function} equalFunc The function to determine equivalents of values.
                     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
                     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
                     */
                    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
                        var objIsArr = isArray(object),
                            othIsArr = isArray(other),
                            objTag = objIsArr ? arrayTag : getTag(object),
                            othTag = othIsArr ? arrayTag : getTag(other);

                        objTag = objTag == argsTag ? objectTag : objTag;
                        othTag = othTag == argsTag ? objectTag : othTag;

                        var objIsObj = objTag == objectTag,
                            othIsObj = othTag == objectTag,
                            isSameTag = objTag == othTag;

                        if (isSameTag && isBuffer(object)) {
                            if (!isBuffer(other)) {
                                return false;
                            }
                            objIsArr = true;
                            objIsObj = false;
                        }
                        if (isSameTag && !objIsObj) {
                            stack || (stack = new Stack);
                            return (objIsArr || isTypedArray(object)) ?
                                equalArrays(object, other, bitmask, customizer, equalFunc, stack) :
                                equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
                        }
                        if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
                            var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
                                othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

                            if (objIsWrapped || othIsWrapped) {
                                var objUnwrapped = objIsWrapped ? object.value() : object,
                                    othUnwrapped = othIsWrapped ? other.value() : other;

                                stack || (stack = new Stack);
                                return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
                            }
                        }
                        if (!isSameTag) {
                            return false;
                        }
                        stack || (stack = new Stack);
                        return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
                    }

                    /**
                     * The base implementation of `_.isMap` without Node.js optimizations.
                     *
                     * @private
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
                     */
                    function baseIsMap(value) {
                        return isObjectLike(value) && getTag(value) == mapTag;
                    }

                    /**
                     * The base implementation of `_.isMatch` without support for iteratee shorthands.
                     *
                     * @private
                     * @param {Object} object The object to inspect.
                     * @param {Object} source The object of property values to match.
                     * @param {Array} matchData The property names, values, and compare flags to match.
                     * @param {Function} [customizer] The function to customize comparisons.
                     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
                     */
                    function baseIsMatch(object, source, matchData, customizer) {
                        var index = matchData.length,
                            length = index,
                            noCustomizer = !customizer;

                        if (object == null) {
                            return !length;
                        }
                        object = Object(object);
                        while (index--) {
                            var data = matchData[index];
                            if ((noCustomizer && data[2]) ?
                                data[1] !== object[data[0]] :
                                !(data[0] in object)
                            ) {
                                return false;
                            }
                        }
                        while (++index < length) {
                            data = matchData[index];
                            var key = data[0],
                                objValue = object[key],
                                srcValue = data[1];

                            if (noCustomizer && data[2]) {
                                if (objValue === undefined && !(key in object)) {
                                    return false;
                                }
                            } else {
                                var stack = new Stack;
                                if (customizer) {
                                    var result = customizer(objValue, srcValue, key, object, source, stack);
                                }
                                if (!(result === undefined ?
                                        baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) :
                                        result
                                    )) {
                                    return false;
                                }
                            }
                        }
                        return true;
                    }

                    /**
                     * The base implementation of `_.isNative` without bad shim checks.
                     *
                     * @private
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a native function,
                     *  else `false`.
                     */
                    function baseIsNative(value) {
                        if (!isObject(value) || isMasked(value)) {
                            return false;
                        }
                        var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
                        return pattern.test(toSource(value));
                    }

                    /**
                     * The base implementation of `_.isRegExp` without Node.js optimizations.
                     *
                     * @private
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
                     */
                    function baseIsRegExp(value) {
                        return isObjectLike(value) && baseGetTag(value) == regexpTag;
                    }

                    /**
                     * The base implementation of `_.isSet` without Node.js optimizations.
                     *
                     * @private
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
                     */
                    function baseIsSet(value) {
                        return isObjectLike(value) && getTag(value) == setTag;
                    }

                    /**
                     * The base implementation of `_.isTypedArray` without Node.js optimizations.
                     *
                     * @private
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
                     */
                    function baseIsTypedArray(value) {
                        return isObjectLike(value) &&
                            isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
                    }

                    /**
                     * The base implementation of `_.iteratee`.
                     *
                     * @private
                     * @param {*} [value=_.identity] The value to convert to an iteratee.
                     * @returns {Function} Returns the iteratee.
                     */
                    function baseIteratee(value) {
                        // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
                        // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
                        if (typeof value == 'function') {
                            return value;
                        }
                        if (value == null) {
                            return identity;
                        }
                        if (typeof value == 'object') {
                            return isArray(value) ?
                                baseMatchesProperty(value[0], value[1]) :
                                baseMatches(value);
                        }
                        return property(value);
                    }

                    /**
                     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
                     *
                     * @private
                     * @param {Object} object The object to query.
                     * @returns {Array} Returns the array of property names.
                     */
                    function baseKeys(object) {
                        if (!isPrototype(object)) {
                            return nativeKeys(object);
                        }
                        var result = [];
                        for (var key in Object(object)) {
                            if (hasOwnProperty.call(object, key) && key != 'constructor') {
                                result.push(key);
                            }
                        }
                        return result;
                    }

                    /**
                     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
                     *
                     * @private
                     * @param {Object} object The object to query.
                     * @returns {Array} Returns the array of property names.
                     */
                    function baseKeysIn(object) {
                        if (!isObject(object)) {
                            return nativeKeysIn(object);
                        }
                        var isProto = isPrototype(object),
                            result = [];

                        for (var key in object) {
                            if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
                                result.push(key);
                            }
                        }
                        return result;
                    }

                    /**
                     * The base implementation of `_.lt` which doesn't coerce arguments.
                     *
                     * @private
                     * @param {*} value The value to compare.
                     * @param {*} other The other value to compare.
                     * @returns {boolean} Returns `true` if `value` is less than `other`,
                     *  else `false`.
                     */
                    function baseLt(value, other) {
                        return value < other;
                    }

                    /**
                     * The base implementation of `_.map` without support for iteratee shorthands.
                     *
                     * @private
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} iteratee The function invoked per iteration.
                     * @returns {Array} Returns the new mapped array.
                     */
                    function baseMap(collection, iteratee) {
                        var index = -1,
                            result = isArrayLike(collection) ? Array(collection.length) : [];

                        baseEach(collection, function(value, key, collection) {
                            result[++index] = iteratee(value, key, collection);
                        });
                        return result;
                    }

                    /**
                     * The base implementation of `_.matches` which doesn't clone `source`.
                     *
                     * @private
                     * @param {Object} source The object of property values to match.
                     * @returns {Function} Returns the new spec function.
                     */
                    function baseMatches(source) {
                        var matchData = getMatchData(source);
                        if (matchData.length == 1 && matchData[0][2]) {
                            return matchesStrictComparable(matchData[0][0], matchData[0][1]);
                        }
                        return function(object) {
                            return object === source || baseIsMatch(object, source, matchData);
                        };
                    }

                    /**
                     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
                     *
                     * @private
                     * @param {string} path The path of the property to get.
                     * @param {*} srcValue The value to match.
                     * @returns {Function} Returns the new spec function.
                     */
                    function baseMatchesProperty(path, srcValue) {
                        if (isKey(path) && isStrictComparable(srcValue)) {
                            return matchesStrictComparable(toKey(path), srcValue);
                        }
                        return function(object) {
                            var objValue = get(object, path);
                            return (objValue === undefined && objValue === srcValue) ?
                                hasIn(object, path) :
                                baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
                        };
                    }

                    /**
                     * The base implementation of `_.merge` without support for multiple sources.
                     *
                     * @private
                     * @param {Object} object The destination object.
                     * @param {Object} source The source object.
                     * @param {number} srcIndex The index of `source`.
                     * @param {Function} [customizer] The function to customize merged values.
                     * @param {Object} [stack] Tracks traversed source values and their merged
                     *  counterparts.
                     */
                    function baseMerge(object, source, srcIndex, customizer, stack) {
                        if (object === source) {
                            return;
                        }
                        baseFor(source, function(srcValue, key) {
                            if (isObject(srcValue)) {
                                stack || (stack = new Stack);
                                baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
                            } else {
                                var newValue = customizer ?
                                    customizer(object[key], srcValue, (key + ''), object, source, stack) :
                                    undefined;

                                if (newValue === undefined) {
                                    newValue = srcValue;
                                }
                                assignMergeValue(object, key, newValue);
                            }
                        }, keysIn);
                    }

                    /**
                     * A specialized version of `baseMerge` for arrays and objects which performs
                     * deep merges and tracks traversed objects enabling objects with circular
                     * references to be merged.
                     *
                     * @private
                     * @param {Object} object The destination object.
                     * @param {Object} source The source object.
                     * @param {string} key The key of the value to merge.
                     * @param {number} srcIndex The index of `source`.
                     * @param {Function} mergeFunc The function to merge values.
                     * @param {Function} [customizer] The function to customize assigned values.
                     * @param {Object} [stack] Tracks traversed source values and their merged
                     *  counterparts.
                     */
                    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
                        var objValue = object[key],
                            srcValue = source[key],
                            stacked = stack.get(srcValue);

                        if (stacked) {
                            assignMergeValue(object, key, stacked);
                            return;
                        }
                        var newValue = customizer ?
                            customizer(objValue, srcValue, (key + ''), object, source, stack) :
                            undefined;

                        var isCommon = newValue === undefined;

                        if (isCommon) {
                            var isArr = isArray(srcValue),
                                isBuff = !isArr && isBuffer(srcValue),
                                isTyped = !isArr && !isBuff && isTypedArray(srcValue);

                            newValue = srcValue;
                            if (isArr || isBuff || isTyped) {
                                if (isArray(objValue)) {
                                    newValue = objValue;
                                } else if (isArrayLikeObject(objValue)) {
                                    newValue = copyArray(objValue);
                                } else if (isBuff) {
                                    isCommon = false;
                                    newValue = cloneBuffer(srcValue, true);
                                } else if (isTyped) {
                                    isCommon = false;
                                    newValue = cloneTypedArray(srcValue, true);
                                } else {
                                    newValue = [];
                                }
                            } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
                                newValue = objValue;
                                if (isArguments(objValue)) {
                                    newValue = toPlainObject(objValue);
                                } else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
                                    newValue = initCloneObject(srcValue);
                                }
                            } else {
                                isCommon = false;
                            }
                        }
                        if (isCommon) {
                            // Recursively merge objects and arrays (susceptible to call stack limits).
                            stack.set(srcValue, newValue);
                            mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
                            stack['delete'](srcValue);
                        }
                        assignMergeValue(object, key, newValue);
                    }

                    /**
                     * The base implementation of `_.nth` which doesn't coerce arguments.
                     *
                     * @private
                     * @param {Array} array The array to query.
                     * @param {number} n The index of the element to return.
                     * @returns {*} Returns the nth element of `array`.
                     */
                    function baseNth(array, n) {
                        var length = array.length;
                        if (!length) {
                            return;
                        }
                        n += n < 0 ? length : 0;
                        return isIndex(n, length) ? array[n] : undefined;
                    }

                    /**
                     * The base implementation of `_.orderBy` without param guards.
                     *
                     * @private
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
                     * @param {string[]} orders The sort orders of `iteratees`.
                     * @returns {Array} Returns the new sorted array.
                     */
                    function baseOrderBy(collection, iteratees, orders) {
                        var index = -1;
                        iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

                        var result = baseMap(collection, function(value, key, collection) {
                            var criteria = arrayMap(iteratees, function(iteratee) {
                                return iteratee(value);
                            });
                            return { 'criteria': criteria, 'index': ++index, 'value': value };
                        });

                        return baseSortBy(result, function(object, other) {
                            return compareMultiple(object, other, orders);
                        });
                    }

                    /**
                     * The base implementation of `_.pick` without support for individual
                     * property identifiers.
                     *
                     * @private
                     * @param {Object} object The source object.
                     * @param {string[]} paths The property paths to pick.
                     * @returns {Object} Returns the new object.
                     */
                    function basePick(object, paths) {
                        return basePickBy(object, paths, function(value, path) {
                            return hasIn(object, path);
                        });
                    }

                    /**
                     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
                     *
                     * @private
                     * @param {Object} object The source object.
                     * @param {string[]} paths The property paths to pick.
                     * @param {Function} predicate The function invoked per property.
                     * @returns {Object} Returns the new object.
                     */
                    function basePickBy(object, paths, predicate) {
                        var index = -1,
                            length = paths.length,
                            result = {};

                        while (++index < length) {
                            var path = paths[index],
                                value = baseGet(object, path);

                            if (predicate(value, path)) {
                                baseSet(result, castPath(path, object), value);
                            }
                        }
                        return result;
                    }

                    /**
                     * A specialized version of `baseProperty` which supports deep paths.
                     *
                     * @private
                     * @param {Array|string} path The path of the property to get.
                     * @returns {Function} Returns the new accessor function.
                     */
                    function basePropertyDeep(path) {
                        return function(object) {
                            return baseGet(object, path);
                        };
                    }

                    /**
                     * The base implementation of `_.pullAllBy` without support for iteratee
                     * shorthands.
                     *
                     * @private
                     * @param {Array} array The array to modify.
                     * @param {Array} values The values to remove.
                     * @param {Function} [iteratee] The iteratee invoked per element.
                     * @param {Function} [comparator] The comparator invoked per element.
                     * @returns {Array} Returns `array`.
                     */
                    function basePullAll(array, values, iteratee, comparator) {
                        var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
                            index = -1,
                            length = values.length,
                            seen = array;

                        if (array === values) {
                            values = copyArray(values);
                        }
                        if (iteratee) {
                            seen = arrayMap(array, baseUnary(iteratee));
                        }
                        while (++index < length) {
                            var fromIndex = 0,
                                value = values[index],
                                computed = iteratee ? iteratee(value) : value;

                            while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
                                if (seen !== array) {
                                    splice.call(seen, fromIndex, 1);
                                }
                                splice.call(array, fromIndex, 1);
                            }
                        }
                        return array;
                    }

                    /**
                     * The base implementation of `_.pullAt` without support for individual
                     * indexes or capturing the removed elements.
                     *
                     * @private
                     * @param {Array} array The array to modify.
                     * @param {number[]} indexes The indexes of elements to remove.
                     * @returns {Array} Returns `array`.
                     */
                    function basePullAt(array, indexes) {
                        var length = array ? indexes.length : 0,
                            lastIndex = length - 1;

                        while (length--) {
                            var index = indexes[length];
                            if (length == lastIndex || index !== previous) {
                                var previous = index;
                                if (isIndex(index)) {
                                    splice.call(array, index, 1);
                                } else {
                                    baseUnset(array, index);
                                }
                            }
                        }
                        return array;
                    }

                    /**
                     * The base implementation of `_.random` without support for returning
                     * floating-point numbers.
                     *
                     * @private
                     * @param {number} lower The lower bound.
                     * @param {number} upper The upper bound.
                     * @returns {number} Returns the random number.
                     */
                    function baseRandom(lower, upper) {
                        return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
                    }

                    /**
                     * The base implementation of `_.range` and `_.rangeRight` which doesn't
                     * coerce arguments.
                     *
                     * @private
                     * @param {number} start The start of the range.
                     * @param {number} end The end of the range.
                     * @param {number} step The value to increment or decrement by.
                     * @param {boolean} [fromRight] Specify iterating from right to left.
                     * @returns {Array} Returns the range of numbers.
                     */
                    function baseRange(start, end, step, fromRight) {
                        var index = -1,
                            length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
                            result = Array(length);

                        while (length--) {
                            result[fromRight ? length : ++index] = start;
                            start += step;
                        }
                        return result;
                    }

                    /**
                     * The base implementation of `_.repeat` which doesn't coerce arguments.
                     *
                     * @private
                     * @param {string} string The string to repeat.
                     * @param {number} n The number of times to repeat the string.
                     * @returns {string} Returns the repeated string.
                     */
                    function baseRepeat(string, n) {
                        var result = '';
                        if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
                            return result;
                        }
                        // Leverage the exponentiation by squaring algorithm for a faster repeat.
                        // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
                        do {
                            if (n % 2) {
                                result += string;
                            }
                            n = nativeFloor(n / 2);
                            if (n) {
                                string += string;
                            }
                        } while (n);

                        return result;
                    }

                    /**
                     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
                     *
                     * @private
                     * @param {Function} func The function to apply a rest parameter to.
                     * @param {number} [start=func.length-1] The start position of the rest parameter.
                     * @returns {Function} Returns the new function.
                     */
                    function baseRest(func, start) {
                        return setToString(overRest(func, start, identity), func + '');
                    }

                    /**
                     * The base implementation of `_.sample`.
                     *
                     * @private
                     * @param {Array|Object} collection The collection to sample.
                     * @returns {*} Returns the random element.
                     */
                    function baseSample(collection) {
                        return arraySample(values(collection));
                    }

                    /**
                     * The base implementation of `_.sampleSize` without param guards.
                     *
                     * @private
                     * @param {Array|Object} collection The collection to sample.
                     * @param {number} n The number of elements to sample.
                     * @returns {Array} Returns the random elements.
                     */
                    function baseSampleSize(collection, n) {
                        var array = values(collection);
                        return shuffleSelf(array, baseClamp(n, 0, array.length));
                    }

                    /**
                     * The base implementation of `_.set`.
                     *
                     * @private
                     * @param {Object} object The object to modify.
                     * @param {Array|string} path The path of the property to set.
                     * @param {*} value The value to set.
                     * @param {Function} [customizer] The function to customize path creation.
                     * @returns {Object} Returns `object`.
                     */
                    function baseSet(object, path, value, customizer) {
                        if (!isObject(object)) {
                            return object;
                        }
                        path = castPath(path, object);

                        var index = -1,
                            length = path.length,
                            lastIndex = length - 1,
                            nested = object;

                        while (nested != null && ++index < length) {
                            var key = toKey(path[index]),
                                newValue = value;

                            if (index != lastIndex) {
                                var objValue = nested[key];
                                newValue = customizer ? customizer(objValue, key, nested) : undefined;
                                if (newValue === undefined) {
                                    newValue = isObject(objValue) ?
                                        objValue :
                                        (isIndex(path[index + 1]) ? [] : {});
                                }
                            }
                            assignValue(nested, key, newValue);
                            nested = nested[key];
                        }
                        return object;
                    }

                    /**
                     * The base implementation of `setData` without support for hot loop shorting.
                     *
                     * @private
                     * @param {Function} func The function to associate metadata with.
                     * @param {*} data The metadata.
                     * @returns {Function} Returns `func`.
                     */
                    var baseSetData = !metaMap ? identity : function(func, data) {
                        metaMap.set(func, data);
                        return func;
                    };

                    /**
                     * The base implementation of `setToString` without support for hot loop shorting.
                     *
                     * @private
                     * @param {Function} func The function to modify.
                     * @param {Function} string The `toString` result.
                     * @returns {Function} Returns `func`.
                     */
                    var baseSetToString = !defineProperty ? identity : function(func, string) {
                        return defineProperty(func, 'toString', {
                            'configurable': true,
                            'enumerable': false,
                            'value': constant(string),
                            'writable': true
                        });
                    };

                    /**
                     * The base implementation of `_.shuffle`.
                     *
                     * @private
                     * @param {Array|Object} collection The collection to shuffle.
                     * @returns {Array} Returns the new shuffled array.
                     */
                    function baseShuffle(collection) {
                        return shuffleSelf(values(collection));
                    }

                    /**
                     * The base implementation of `_.slice` without an iteratee call guard.
                     *
                     * @private
                     * @param {Array} array The array to slice.
                     * @param {number} [start=0] The start position.
                     * @param {number} [end=array.length] The end position.
                     * @returns {Array} Returns the slice of `array`.
                     */
                    function baseSlice(array, start, end) {
                        var index = -1,
                            length = array.length;

                        if (start < 0) {
                            start = -start > length ? 0 : (length + start);
                        }
                        end = end > length ? length : end;
                        if (end < 0) {
                            end += length;
                        }
                        length = start > end ? 0 : ((end - start) >>> 0);
                        start >>>= 0;

                        var result = Array(length);
                        while (++index < length) {
                            result[index] = array[index + start];
                        }
                        return result;
                    }

                    /**
                     * The base implementation of `_.some` without support for iteratee shorthands.
                     *
                     * @private
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} predicate The function invoked per iteration.
                     * @returns {boolean} Returns `true` if any element passes the predicate check,
                     *  else `false`.
                     */
                    function baseSome(collection, predicate) {
                        var result;

                        baseEach(collection, function(value, index, collection) {
                            result = predicate(value, index, collection);
                            return !result;
                        });
                        return !!result;
                    }

                    /**
                     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
                     * performs a binary search of `array` to determine the index at which `value`
                     * should be inserted into `array` in order to maintain its sort order.
                     *
                     * @private
                     * @param {Array} array The sorted array to inspect.
                     * @param {*} value The value to evaluate.
                     * @param {boolean} [retHighest] Specify returning the highest qualified index.
                     * @returns {number} Returns the index at which `value` should be inserted
                     *  into `array`.
                     */
                    function baseSortedIndex(array, value, retHighest) {
                        var low = 0,
                            high = array == null ? low : array.length;

                        if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
                            while (low < high) {
                                var mid = (low + high) >>> 1,
                                    computed = array[mid];

                                if (computed !== null && !isSymbol(computed) &&
                                    (retHighest ? (computed <= value) : (computed < value))) {
                                    low = mid + 1;
                                } else {
                                    high = mid;
                                }
                            }
                            return high;
                        }
                        return baseSortedIndexBy(array, value, identity, retHighest);
                    }

                    /**
                     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
                     * which invokes `iteratee` for `value` and each element of `array` to compute
                     * their sort ranking. The iteratee is invoked with one argument; (value).
                     *
                     * @private
                     * @param {Array} array The sorted array to inspect.
                     * @param {*} value The value to evaluate.
                     * @param {Function} iteratee The iteratee invoked per element.
                     * @param {boolean} [retHighest] Specify returning the highest qualified index.
                     * @returns {number} Returns the index at which `value` should be inserted
                     *  into `array`.
                     */
                    function baseSortedIndexBy(array, value, iteratee, retHighest) {
                        value = iteratee(value);

                        var low = 0,
                            high = array == null ? 0 : array.length,
                            valIsNaN = value !== value,
                            valIsNull = value === null,
                            valIsSymbol = isSymbol(value),
                            valIsUndefined = value === undefined;

                        while (low < high) {
                            var mid = nativeFloor((low + high) / 2),
                                computed = iteratee(array[mid]),
                                othIsDefined = computed !== undefined,
                                othIsNull = computed === null,
                                othIsReflexive = computed === computed,
                                othIsSymbol = isSymbol(computed);

                            if (valIsNaN) {
                                var setLow = retHighest || othIsReflexive;
                            } else if (valIsUndefined) {
                                setLow = othIsReflexive && (retHighest || othIsDefined);
                            } else if (valIsNull) {
                                setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
                            } else if (valIsSymbol) {
                                setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
                            } else if (othIsNull || othIsSymbol) {
                                setLow = false;
                            } else {
                                setLow = retHighest ? (computed <= value) : (computed < value);
                            }
                            if (setLow) {
                                low = mid + 1;
                            } else {
                                high = mid;
                            }
                        }
                        return nativeMin(high, MAX_ARRAY_INDEX);
                    }

                    /**
                     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
                     * support for iteratee shorthands.
                     *
                     * @private
                     * @param {Array} array The array to inspect.
                     * @param {Function} [iteratee] The iteratee invoked per element.
                     * @returns {Array} Returns the new duplicate free array.
                     */
                    function baseSortedUniq(array, iteratee) {
                        var index = -1,
                            length = array.length,
                            resIndex = 0,
                            result = [];

                        while (++index < length) {
                            var value = array[index],
                                computed = iteratee ? iteratee(value) : value;

                            if (!index || !eq(computed, seen)) {
                                var seen = computed;
                                result[resIndex++] = value === 0 ? 0 : value;
                            }
                        }
                        return result;
                    }

                    /**
                     * The base implementation of `_.toNumber` which doesn't ensure correct
                     * conversions of binary, hexadecimal, or octal string values.
                     *
                     * @private
                     * @param {*} value The value to process.
                     * @returns {number} Returns the number.
                     */
                    function baseToNumber(value) {
                        if (typeof value == 'number') {
                            return value;
                        }
                        if (isSymbol(value)) {
                            return NAN;
                        }
                        return +value;
                    }

                    /**
                     * The base implementation of `_.toString` which doesn't convert nullish
                     * values to empty strings.
                     *
                     * @private
                     * @param {*} value The value to process.
                     * @returns {string} Returns the string.
                     */
                    function baseToString(value) {
                        // Exit early for strings to avoid a performance hit in some environments.
                        if (typeof value == 'string') {
                            return value;
                        }
                        if (isArray(value)) {
                            // Recursively convert values (susceptible to call stack limits).
                            return arrayMap(value, baseToString) + '';
                        }
                        if (isSymbol(value)) {
                            return symbolToString ? symbolToString.call(value) : '';
                        }
                        var result = (value + '');
                        return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
                    }

                    /**
                     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
                     *
                     * @private
                     * @param {Array} array The array to inspect.
                     * @param {Function} [iteratee] The iteratee invoked per element.
                     * @param {Function} [comparator] The comparator invoked per element.
                     * @returns {Array} Returns the new duplicate free array.
                     */
                    function baseUniq(array, iteratee, comparator) {
                        var index = -1,
                            includes = arrayIncludes,
                            length = array.length,
                            isCommon = true,
                            result = [],
                            seen = result;

                        if (comparator) {
                            isCommon = false;
                            includes = arrayIncludesWith;
                        } else if (length >= LARGE_ARRAY_SIZE) {
                            var set = iteratee ? null : createSet(array);
                            if (set) {
                                return setToArray(set);
                            }
                            isCommon = false;
                            includes = cacheHas;
                            seen = new SetCache;
                        } else {
                            seen = iteratee ? [] : result;
                        }
                        outer:
                            while (++index < length) {
                                var value = array[index],
                                    computed = iteratee ? iteratee(value) : value;

                                value = (comparator || value !== 0) ? value : 0;
                                if (isCommon && computed === computed) {
                                    var seenIndex = seen.length;
                                    while (seenIndex--) {
                                        if (seen[seenIndex] === computed) {
                                            continue outer;
                                        }
                                    }
                                    if (iteratee) {
                                        seen.push(computed);
                                    }
                                    result.push(value);
                                } else if (!includes(seen, computed, comparator)) {
                                    if (seen !== result) {
                                        seen.push(computed);
                                    }
                                    result.push(value);
                                }
                            }
                        return result;
                    }

                    /**
                     * The base implementation of `_.unset`.
                     *
                     * @private
                     * @param {Object} object The object to modify.
                     * @param {Array|string} path The property path to unset.
                     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
                     */
                    function baseUnset(object, path) {
                        path = castPath(path, object);
                        object = parent(object, path);
                        return object == null || delete object[toKey(last(path))];
                    }

                    /**
                     * The base implementation of `_.update`.
                     *
                     * @private
                     * @param {Object} object The object to modify.
                     * @param {Array|string} path The path of the property to update.
                     * @param {Function} updater The function to produce the updated value.
                     * @param {Function} [customizer] The function to customize path creation.
                     * @returns {Object} Returns `object`.
                     */
                    function baseUpdate(object, path, updater, customizer) {
                        return baseSet(object, path, updater(baseGet(object, path)), customizer);
                    }

                    /**
                     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
                     * without support for iteratee shorthands.
                     *
                     * @private
                     * @param {Array} array The array to query.
                     * @param {Function} predicate The function invoked per iteration.
                     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
                     * @param {boolean} [fromRight] Specify iterating from right to left.
                     * @returns {Array} Returns the slice of `array`.
                     */
                    function baseWhile(array, predicate, isDrop, fromRight) {
                        var length = array.length,
                            index = fromRight ? length : -1;

                        while ((fromRight ? index-- : ++index < length) &&
                            predicate(array[index], index, array)) {}

                        return isDrop ?
                            baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length)) :
                            baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
                    }

                    /**
                     * The base implementation of `wrapperValue` which returns the result of
                     * performing a sequence of actions on the unwrapped `value`, where each
                     * successive action is supplied the return value of the previous.
                     *
                     * @private
                     * @param {*} value The unwrapped value.
                     * @param {Array} actions Actions to perform to resolve the unwrapped value.
                     * @returns {*} Returns the resolved value.
                     */
                    function baseWrapperValue(value, actions) {
                        var result = value;
                        if (result instanceof LazyWrapper) {
                            result = result.value();
                        }
                        return arrayReduce(actions, function(result, action) {
                            return action.func.apply(action.thisArg, arrayPush([result], action.args));
                        }, result);
                    }

                    /**
                     * The base implementation of methods like `_.xor`, without support for
                     * iteratee shorthands, that accepts an array of arrays to inspect.
                     *
                     * @private
                     * @param {Array} arrays The arrays to inspect.
                     * @param {Function} [iteratee] The iteratee invoked per element.
                     * @param {Function} [comparator] The comparator invoked per element.
                     * @returns {Array} Returns the new array of values.
                     */
                    function baseXor(arrays, iteratee, comparator) {
                        var length = arrays.length;
                        if (length < 2) {
                            return length ? baseUniq(arrays[0]) : [];
                        }
                        var index = -1,
                            result = Array(length);

                        while (++index < length) {
                            var array = arrays[index],
                                othIndex = -1;

                            while (++othIndex < length) {
                                if (othIndex != index) {
                                    result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
                                }
                            }
                        }
                        return baseUniq(baseFlatten(result, 1), iteratee, comparator);
                    }

                    /**
                     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
                     *
                     * @private
                     * @param {Array} props The property identifiers.
                     * @param {Array} values The property values.
                     * @param {Function} assignFunc The function to assign values.
                     * @returns {Object} Returns the new object.
                     */
                    function baseZipObject(props, values, assignFunc) {
                        var index = -1,
                            length = props.length,
                            valsLength = values.length,
                            result = {};

                        while (++index < length) {
                            var value = index < valsLength ? values[index] : undefined;
                            assignFunc(result, props[index], value);
                        }
                        return result;
                    }

                    /**
                     * Casts `value` to an empty array if it's not an array like object.
                     *
                     * @private
                     * @param {*} value The value to inspect.
                     * @returns {Array|Object} Returns the cast array-like object.
                     */
                    function castArrayLikeObject(value) {
                        return isArrayLikeObject(value) ? value : [];
                    }

                    /**
                     * Casts `value` to `identity` if it's not a function.
                     *
                     * @private
                     * @param {*} value The value to inspect.
                     * @returns {Function} Returns cast function.
                     */
                    function castFunction(value) {
                        return typeof value == 'function' ? value : identity;
                    }

                    /**
                     * Casts `value` to a path array if it's not one.
                     *
                     * @private
                     * @param {*} value The value to inspect.
                     * @param {Object} [object] The object to query keys on.
                     * @returns {Array} Returns the cast property path array.
                     */
                    function castPath(value, object) {
                        if (isArray(value)) {
                            return value;
                        }
                        return isKey(value, object) ? [value] : stringToPath(toString(value));
                    }

                    /**
                     * A `baseRest` alias which can be replaced with `identity` by module
                     * replacement plugins.
                     *
                     * @private
                     * @type {Function}
                     * @param {Function} func The function to apply a rest parameter to.
                     * @returns {Function} Returns the new function.
                     */
                    var castRest = baseRest;

                    /**
                     * Casts `array` to a slice if it's needed.
                     *
                     * @private
                     * @param {Array} array The array to inspect.
                     * @param {number} start The start position.
                     * @param {number} [end=array.length] The end position.
                     * @returns {Array} Returns the cast slice.
                     */
                    function castSlice(array, start, end) {
                        var length = array.length;
                        end = end === undefined ? length : end;
                        return (!start && end >= length) ? array : baseSlice(array, start, end);
                    }

                    /**
                     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
                     *
                     * @private
                     * @param {number|Object} id The timer id or timeout object of the timer to clear.
                     */
                    var clearTimeout = ctxClearTimeout || function(id) {
                        return root.clearTimeout(id);
                    };

                    /**
                     * Creates a clone of  `buffer`.
                     *
                     * @private
                     * @param {Buffer} buffer The buffer to clone.
                     * @param {boolean} [isDeep] Specify a deep clone.
                     * @returns {Buffer} Returns the cloned buffer.
                     */
                    function cloneBuffer(buffer, isDeep) {
                        if (isDeep) {
                            return buffer.slice();
                        }
                        var length = buffer.length,
                            result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

                        buffer.copy(result);
                        return result;
                    }

                    /**
                     * Creates a clone of `arrayBuffer`.
                     *
                     * @private
                     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
                     * @returns {ArrayBuffer} Returns the cloned array buffer.
                     */
                    function cloneArrayBuffer(arrayBuffer) {
                        var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
                        new Uint8Array(result).set(new Uint8Array(arrayBuffer));
                        return result;
                    }

                    /**
                     * Creates a clone of `dataView`.
                     *
                     * @private
                     * @param {Object} dataView The data view to clone.
                     * @param {boolean} [isDeep] Specify a deep clone.
                     * @returns {Object} Returns the cloned data view.
                     */
                    function cloneDataView(dataView, isDeep) {
                        var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
                        return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
                    }

                    /**
                     * Creates a clone of `map`.
                     *
                     * @private
                     * @param {Object} map The map to clone.
                     * @param {Function} cloneFunc The function to clone values.
                     * @param {boolean} [isDeep] Specify a deep clone.
                     * @returns {Object} Returns the cloned map.
                     */
                    function cloneMap(map, isDeep, cloneFunc) {
                        var array = isDeep ? cloneFunc(mapToArray(map), CLONE_DEEP_FLAG) : mapToArray(map);
                        return arrayReduce(array, addMapEntry, new map.constructor);
                    }

                    /**
                     * Creates a clone of `regexp`.
                     *
                     * @private
                     * @param {Object} regexp The regexp to clone.
                     * @returns {Object} Returns the cloned regexp.
                     */
                    function cloneRegExp(regexp) {
                        var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
                        result.lastIndex = regexp.lastIndex;
                        return result;
                    }

                    /**
                     * Creates a clone of `set`.
                     *
                     * @private
                     * @param {Object} set The set to clone.
                     * @param {Function} cloneFunc The function to clone values.
                     * @param {boolean} [isDeep] Specify a deep clone.
                     * @returns {Object} Returns the cloned set.
                     */
                    function cloneSet(set, isDeep, cloneFunc) {
                        var array = isDeep ? cloneFunc(setToArray(set), CLONE_DEEP_FLAG) : setToArray(set);
                        return arrayReduce(array, addSetEntry, new set.constructor);
                    }

                    /**
                     * Creates a clone of the `symbol` object.
                     *
                     * @private
                     * @param {Object} symbol The symbol object to clone.
                     * @returns {Object} Returns the cloned symbol object.
                     */
                    function cloneSymbol(symbol) {
                        return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
                    }

                    /**
                     * Creates a clone of `typedArray`.
                     *
                     * @private
                     * @param {Object} typedArray The typed array to clone.
                     * @param {boolean} [isDeep] Specify a deep clone.
                     * @returns {Object} Returns the cloned typed array.
                     */
                    function cloneTypedArray(typedArray, isDeep) {
                        var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
                        return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
                    }

                    /**
                     * Compares values to sort them in ascending order.
                     *
                     * @private
                     * @param {*} value The value to compare.
                     * @param {*} other The other value to compare.
                     * @returns {number} Returns the sort order indicator for `value`.
                     */
                    function compareAscending(value, other) {
                        if (value !== other) {
                            var valIsDefined = value !== undefined,
                                valIsNull = value === null,
                                valIsReflexive = value === value,
                                valIsSymbol = isSymbol(value);

                            var othIsDefined = other !== undefined,
                                othIsNull = other === null,
                                othIsReflexive = other === other,
                                othIsSymbol = isSymbol(other);

                            if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
                                (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
                                (valIsNull && othIsDefined && othIsReflexive) ||
                                (!valIsDefined && othIsReflexive) ||
                                !valIsReflexive) {
                                return 1;
                            }
                            if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
                                (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
                                (othIsNull && valIsDefined && valIsReflexive) ||
                                (!othIsDefined && valIsReflexive) ||
                                !othIsReflexive) {
                                return -1;
                            }
                        }
                        return 0;
                    }

                    /**
                     * Used by `_.orderBy` to compare multiple properties of a value to another
                     * and stable sort them.
                     *
                     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
                     * specify an order of "desc" for descending or "asc" for ascending sort order
                     * of corresponding values.
                     *
                     * @private
                     * @param {Object} object The object to compare.
                     * @param {Object} other The other object to compare.
                     * @param {boolean[]|string[]} orders The order to sort by for each property.
                     * @returns {number} Returns the sort order indicator for `object`.
                     */
                    function compareMultiple(object, other, orders) {
                        var index = -1,
                            objCriteria = object.criteria,
                            othCriteria = other.criteria,
                            length = objCriteria.length,
                            ordersLength = orders.length;

                        while (++index < length) {
                            var result = compareAscending(objCriteria[index], othCriteria[index]);
                            if (result) {
                                if (index >= ordersLength) {
                                    return result;
                                }
                                var order = orders[index];
                                return result * (order == 'desc' ? -1 : 1);
                            }
                        }
                        // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
                        // that causes it, under certain circumstances, to provide the same value for
                        // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
                        // for more details.
                        //
                        // This also ensures a stable sort in V8 and other engines.
                        // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
                        return object.index - other.index;
                    }

                    /**
                     * Creates an array that is the composition of partially applied arguments,
                     * placeholders, and provided arguments into a single array of arguments.
                     *
                     * @private
                     * @param {Array} args The provided arguments.
                     * @param {Array} partials The arguments to prepend to those provided.
                     * @param {Array} holders The `partials` placeholder indexes.
                     * @params {boolean} [isCurried] Specify composing for a curried function.
                     * @returns {Array} Returns the new array of composed arguments.
                     */
                    function composeArgs(args, partials, holders, isCurried) {
                        var argsIndex = -1,
                            argsLength = args.length,
                            holdersLength = holders.length,
                            leftIndex = -1,
                            leftLength = partials.length,
                            rangeLength = nativeMax(argsLength - holdersLength, 0),
                            result = Array(leftLength + rangeLength),
                            isUncurried = !isCurried;

                        while (++leftIndex < leftLength) {
                            result[leftIndex] = partials[leftIndex];
                        }
                        while (++argsIndex < holdersLength) {
                            if (isUncurried || argsIndex < argsLength) {
                                result[holders[argsIndex]] = args[argsIndex];
                            }
                        }
                        while (rangeLength--) {
                            result[leftIndex++] = args[argsIndex++];
                        }
                        return result;
                    }

                    /**
                     * This function is like `composeArgs` except that the arguments composition
                     * is tailored for `_.partialRight`.
                     *
                     * @private
                     * @param {Array} args The provided arguments.
                     * @param {Array} partials The arguments to append to those provided.
                     * @param {Array} holders The `partials` placeholder indexes.
                     * @params {boolean} [isCurried] Specify composing for a curried function.
                     * @returns {Array} Returns the new array of composed arguments.
                     */
                    function composeArgsRight(args, partials, holders, isCurried) {
                        var argsIndex = -1,
                            argsLength = args.length,
                            holdersIndex = -1,
                            holdersLength = holders.length,
                            rightIndex = -1,
                            rightLength = partials.length,
                            rangeLength = nativeMax(argsLength - holdersLength, 0),
                            result = Array(rangeLength + rightLength),
                            isUncurried = !isCurried;

                        while (++argsIndex < rangeLength) {
                            result[argsIndex] = args[argsIndex];
                        }
                        var offset = argsIndex;
                        while (++rightIndex < rightLength) {
                            result[offset + rightIndex] = partials[rightIndex];
                        }
                        while (++holdersIndex < holdersLength) {
                            if (isUncurried || argsIndex < argsLength) {
                                result[offset + holders[holdersIndex]] = args[argsIndex++];
                            }
                        }
                        return result;
                    }

                    /**
                     * Copies the values of `source` to `array`.
                     *
                     * @private
                     * @param {Array} source The array to copy values from.
                     * @param {Array} [array=[]] The array to copy values to.
                     * @returns {Array} Returns `array`.
                     */
                    function copyArray(source, array) {
                        var index = -1,
                            length = source.length;

                        array || (array = Array(length));
                        while (++index < length) {
                            array[index] = source[index];
                        }
                        return array;
                    }

                    /**
                     * Copies properties of `source` to `object`.
                     *
                     * @private
                     * @param {Object} source The object to copy properties from.
                     * @param {Array} props The property identifiers to copy.
                     * @param {Object} [object={}] The object to copy properties to.
                     * @param {Function} [customizer] The function to customize copied values.
                     * @returns {Object} Returns `object`.
                     */
                    function copyObject(source, props, object, customizer) {
                        var isNew = !object;
                        object || (object = {});

                        var index = -1,
                            length = props.length;

                        while (++index < length) {
                            var key = props[index];

                            var newValue = customizer ?
                                customizer(object[key], source[key], key, object, source) :
                                undefined;

                            if (newValue === undefined) {
                                newValue = source[key];
                            }
                            if (isNew) {
                                baseAssignValue(object, key, newValue);
                            } else {
                                assignValue(object, key, newValue);
                            }
                        }
                        return object;
                    }

                    /**
                     * Copies own symbols of `source` to `object`.
                     *
                     * @private
                     * @param {Object} source The object to copy symbols from.
                     * @param {Object} [object={}] The object to copy symbols to.
                     * @returns {Object} Returns `object`.
                     */
                    function copySymbols(source, object) {
                        return copyObject(source, getSymbols(source), object);
                    }

                    /**
                     * Copies own and inherited symbols of `source` to `object`.
                     *
                     * @private
                     * @param {Object} source The object to copy symbols from.
                     * @param {Object} [object={}] The object to copy symbols to.
                     * @returns {Object} Returns `object`.
                     */
                    function copySymbolsIn(source, object) {
                        return copyObject(source, getSymbolsIn(source), object);
                    }

                    /**
                     * Creates a function like `_.groupBy`.
                     *
                     * @private
                     * @param {Function} setter The function to set accumulator values.
                     * @param {Function} [initializer] The accumulator object initializer.
                     * @returns {Function} Returns the new aggregator function.
                     */
                    function createAggregator(setter, initializer) {
                        return function(collection, iteratee) {
                            var func = isArray(collection) ? arrayAggregator : baseAggregator,
                                accumulator = initializer ? initializer() : {};

                            return func(collection, setter, getIteratee(iteratee, 2), accumulator);
                        };
                    }

                    /**
                     * Creates a function like `_.assign`.
                     *
                     * @private
                     * @param {Function} assigner The function to assign values.
                     * @returns {Function} Returns the new assigner function.
                     */
                    function createAssigner(assigner) {
                        return baseRest(function(object, sources) {
                            var index = -1,
                                length = sources.length,
                                customizer = length > 1 ? sources[length - 1] : undefined,
                                guard = length > 2 ? sources[2] : undefined;

                            customizer = (assigner.length > 3 && typeof customizer == 'function') ?
                                (length--, customizer) :
                                undefined;

                            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                                customizer = length < 3 ? undefined : customizer;
                                length = 1;
                            }
                            object = Object(object);
                            while (++index < length) {
                                var source = sources[index];
                                if (source) {
                                    assigner(object, source, index, customizer);
                                }
                            }
                            return object;
                        });
                    }

                    /**
                     * Creates a `baseEach` or `baseEachRight` function.
                     *
                     * @private
                     * @param {Function} eachFunc The function to iterate over a collection.
                     * @param {boolean} [fromRight] Specify iterating from right to left.
                     * @returns {Function} Returns the new base function.
                     */
                    function createBaseEach(eachFunc, fromRight) {
                        return function(collection, iteratee) {
                            if (collection == null) {
                                return collection;
                            }
                            if (!isArrayLike(collection)) {
                                return eachFunc(collection, iteratee);
                            }
                            var length = collection.length,
                                index = fromRight ? length : -1,
                                iterable = Object(collection);

                            while ((fromRight ? index-- : ++index < length)) {
                                if (iteratee(iterable[index], index, iterable) === false) {
                                    break;
                                }
                            }
                            return collection;
                        };
                    }

                    /**
                     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
                     *
                     * @private
                     * @param {boolean} [fromRight] Specify iterating from right to left.
                     * @returns {Function} Returns the new base function.
                     */
                    function createBaseFor(fromRight) {
                        return function(object, iteratee, keysFunc) {
                            var index = -1,
                                iterable = Object(object),
                                props = keysFunc(object),
                                length = props.length;

                            while (length--) {
                                var key = props[fromRight ? length : ++index];
                                if (iteratee(iterable[key], key, iterable) === false) {
                                    break;
                                }
                            }
                            return object;
                        };
                    }

                    /**
                     * Creates a function that wraps `func` to invoke it with the optional `this`
                     * binding of `thisArg`.
                     *
                     * @private
                     * @param {Function} func The function to wrap.
                     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                     * @param {*} [thisArg] The `this` binding of `func`.
                     * @returns {Function} Returns the new wrapped function.
                     */
                    function createBind(func, bitmask, thisArg) {
                        var isBind = bitmask & WRAP_BIND_FLAG,
                            Ctor = createCtor(func);

                        function wrapper() {
                            var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
                            return fn.apply(isBind ? thisArg : this, arguments);
                        }
                        return wrapper;
                    }

                    /**
                     * Creates a function like `_.lowerFirst`.
                     *
                     * @private
                     * @param {string} methodName The name of the `String` case method to use.
                     * @returns {Function} Returns the new case function.
                     */
                    function createCaseFirst(methodName) {
                        return function(string) {
                            string = toString(string);

                            var strSymbols = hasUnicode(string) ?
                                stringToArray(string) :
                                undefined;

                            var chr = strSymbols ?
                                strSymbols[0] :
                                string.charAt(0);

                            var trailing = strSymbols ?
                                castSlice(strSymbols, 1).join('') :
                                string.slice(1);

                            return chr[methodName]() + trailing;
                        };
                    }

                    /**
                     * Creates a function like `_.camelCase`.
                     *
                     * @private
                     * @param {Function} callback The function to combine each word.
                     * @returns {Function} Returns the new compounder function.
                     */
                    function createCompounder(callback) {
                        return function(string) {
                            return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
                        };
                    }

                    /**
                     * Creates a function that produces an instance of `Ctor` regardless of
                     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
                     *
                     * @private
                     * @param {Function} Ctor The constructor to wrap.
                     * @returns {Function} Returns the new wrapped function.
                     */
                    function createCtor(Ctor) {
                        return function() {
                            // Use a `switch` statement to work with class constructors. See
                            // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
                            // for more details.
                            var args = arguments;
                            switch (args.length) {
                                case 0:
                                    return new Ctor;
                                case 1:
                                    return new Ctor(args[0]);
                                case 2:
                                    return new Ctor(args[0], args[1]);
                                case 3:
                                    return new Ctor(args[0], args[1], args[2]);
                                case 4:
                                    return new Ctor(args[0], args[1], args[2], args[3]);
                                case 5:
                                    return new Ctor(args[0], args[1], args[2], args[3], args[4]);
                                case 6:
                                    return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
                                case 7:
                                    return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
                            }
                            var thisBinding = baseCreate(Ctor.prototype),
                                result = Ctor.apply(thisBinding, args);

                            // Mimic the constructor's `return` behavior.
                            // See https://es5.github.io/#x13.2.2 for more details.
                            return isObject(result) ? result : thisBinding;
                        };
                    }

                    /**
                     * Creates a function that wraps `func` to enable currying.
                     *
                     * @private
                     * @param {Function} func The function to wrap.
                     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                     * @param {number} arity The arity of `func`.
                     * @returns {Function} Returns the new wrapped function.
                     */
                    function createCurry(func, bitmask, arity) {
                        var Ctor = createCtor(func);

                        function wrapper() {
                            var length = arguments.length,
                                args = Array(length),
                                index = length,
                                placeholder = getHolder(wrapper);

                            while (index--) {
                                args[index] = arguments[index];
                            }
                            var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder) ? [] :
                                replaceHolders(args, placeholder);

                            length -= holders.length;
                            if (length < arity) {
                                return createRecurry(
                                    func, bitmask, createHybrid, wrapper.placeholder, undefined,
                                    args, holders, undefined, undefined, arity - length);
                            }
                            var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
                            return apply(fn, this, args);
                        }
                        return wrapper;
                    }

                    /**
                     * Creates a `_.find` or `_.findLast` function.
                     *
                     * @private
                     * @param {Function} findIndexFunc The function to find the collection index.
                     * @returns {Function} Returns the new find function.
                     */
                    function createFind(findIndexFunc) {
                        return function(collection, predicate, fromIndex) {
                            var iterable = Object(collection);
                            if (!isArrayLike(collection)) {
                                var iteratee = getIteratee(predicate, 3);
                                collection = keys(collection);
                                predicate = function(key) { return iteratee(iterable[key], key, iterable); };
                            }
                            var index = findIndexFunc(collection, predicate, fromIndex);
                            return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
                        };
                    }

                    /**
                     * Creates a `_.flow` or `_.flowRight` function.
                     *
                     * @private
                     * @param {boolean} [fromRight] Specify iterating from right to left.
                     * @returns {Function} Returns the new flow function.
                     */
                    function createFlow(fromRight) {
                        return flatRest(function(funcs) {
                            var length = funcs.length,
                                index = length,
                                prereq = LodashWrapper.prototype.thru;

                            if (fromRight) {
                                funcs.reverse();
                            }
                            while (index--) {
                                var func = funcs[index];
                                if (typeof func != 'function') {
                                    throw new TypeError(FUNC_ERROR_TEXT);
                                }
                                if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
                                    var wrapper = new LodashWrapper([], true);
                                }
                            }
                            index = wrapper ? index : length;
                            while (++index < length) {
                                func = funcs[index];

                                var funcName = getFuncName(func),
                                    data = funcName == 'wrapper' ? getData(func) : undefined;

                                if (data && isLaziable(data[0]) &&
                                    data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                                    !data[4].length && data[9] == 1
                                ) {
                                    wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
                                } else {
                                    wrapper = (func.length == 1 && isLaziable(func)) ?
                                        wrapper[funcName]() :
                                        wrapper.thru(func);
                                }
                            }
                            return function() {
                                var args = arguments,
                                    value = args[0];

                                if (wrapper && args.length == 1 && isArray(value)) {
                                    return wrapper.plant(value).value();
                                }
                                var index = 0,
                                    result = length ? funcs[index].apply(this, args) : value;

                                while (++index < length) {
                                    result = funcs[index].call(this, result);
                                }
                                return result;
                            };
                        });
                    }

                    /**
                     * Creates a function that wraps `func` to invoke it with optional `this`
                     * binding of `thisArg`, partial application, and currying.
                     *
                     * @private
                     * @param {Function|string} func The function or method name to wrap.
                     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                     * @param {*} [thisArg] The `this` binding of `func`.
                     * @param {Array} [partials] The arguments to prepend to those provided to
                     *  the new function.
                     * @param {Array} [holders] The `partials` placeholder indexes.
                     * @param {Array} [partialsRight] The arguments to append to those provided
                     *  to the new function.
                     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
                     * @param {Array} [argPos] The argument positions of the new function.
                     * @param {number} [ary] The arity cap of `func`.
                     * @param {number} [arity] The arity of `func`.
                     * @returns {Function} Returns the new wrapped function.
                     */
                    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
                        var isAry = bitmask & WRAP_ARY_FLAG,
                            isBind = bitmask & WRAP_BIND_FLAG,
                            isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
                            isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
                            isFlip = bitmask & WRAP_FLIP_FLAG,
                            Ctor = isBindKey ? undefined : createCtor(func);

                        function wrapper() {
                            var length = arguments.length,
                                args = Array(length),
                                index = length;

                            while (index--) {
                                args[index] = arguments[index];
                            }
                            if (isCurried) {
                                var placeholder = getHolder(wrapper),
                                    holdersCount = countHolders(args, placeholder);
                            }
                            if (partials) {
                                args = composeArgs(args, partials, holders, isCurried);
                            }
                            if (partialsRight) {
                                args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
                            }
                            length -= holdersCount;
                            if (isCurried && length < arity) {
                                var newHolders = replaceHolders(args, placeholder);
                                return createRecurry(
                                    func, bitmask, createHybrid, wrapper.placeholder, thisArg,
                                    args, newHolders, argPos, ary, arity - length
                                );
                            }
                            var thisBinding = isBind ? thisArg : this,
                                fn = isBindKey ? thisBinding[func] : func;

                            length = args.length;
                            if (argPos) {
                                args = reorder(args, argPos);
                            } else if (isFlip && length > 1) {
                                args.reverse();
                            }
                            if (isAry && ary < length) {
                                args.length = ary;
                            }
                            if (this && this !== root && this instanceof wrapper) {
                                fn = Ctor || createCtor(fn);
                            }
                            return fn.apply(thisBinding, args);
                        }
                        return wrapper;
                    }

                    /**
                     * Creates a function like `_.invertBy`.
                     *
                     * @private
                     * @param {Function} setter The function to set accumulator values.
                     * @param {Function} toIteratee The function to resolve iteratees.
                     * @returns {Function} Returns the new inverter function.
                     */
                    function createInverter(setter, toIteratee) {
                        return function(object, iteratee) {
                            return baseInverter(object, setter, toIteratee(iteratee), {});
                        };
                    }

                    /**
                     * Creates a function that performs a mathematical operation on two values.
                     *
                     * @private
                     * @param {Function} operator The function to perform the operation.
                     * @param {number} [defaultValue] The value used for `undefined` arguments.
                     * @returns {Function} Returns the new mathematical operation function.
                     */
                    function createMathOperation(operator, defaultValue) {
                        return function(value, other) {
                            var result;
                            if (value === undefined && other === undefined) {
                                return defaultValue;
                            }
                            if (value !== undefined) {
                                result = value;
                            }
                            if (other !== undefined) {
                                if (result === undefined) {
                                    return other;
                                }
                                if (typeof value == 'string' || typeof other == 'string') {
                                    value = baseToString(value);
                                    other = baseToString(other);
                                } else {
                                    value = baseToNumber(value);
                                    other = baseToNumber(other);
                                }
                                result = operator(value, other);
                            }
                            return result;
                        };
                    }

                    /**
                     * Creates a function like `_.over`.
                     *
                     * @private
                     * @param {Function} arrayFunc The function to iterate over iteratees.
                     * @returns {Function} Returns the new over function.
                     */
                    function createOver(arrayFunc) {
                        return flatRest(function(iteratees) {
                            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
                            return baseRest(function(args) {
                                var thisArg = this;
                                return arrayFunc(iteratees, function(iteratee) {
                                    return apply(iteratee, thisArg, args);
                                });
                            });
                        });
                    }

                    /**
                     * Creates the padding for `string` based on `length`. The `chars` string
                     * is truncated if the number of characters exceeds `length`.
                     *
                     * @private
                     * @param {number} length The padding length.
                     * @param {string} [chars=' '] The string used as padding.
                     * @returns {string} Returns the padding for `string`.
                     */
                    function createPadding(length, chars) {
                        chars = chars === undefined ? ' ' : baseToString(chars);

                        var charsLength = chars.length;
                        if (charsLength < 2) {
                            return charsLength ? baseRepeat(chars, length) : chars;
                        }
                        var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
                        return hasUnicode(chars) ?
                            castSlice(stringToArray(result), 0, length).join('') :
                            result.slice(0, length);
                    }

                    /**
                     * Creates a function that wraps `func` to invoke it with the `this` binding
                     * of `thisArg` and `partials` prepended to the arguments it receives.
                     *
                     * @private
                     * @param {Function} func The function to wrap.
                     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                     * @param {*} thisArg The `this` binding of `func`.
                     * @param {Array} partials The arguments to prepend to those provided to
                     *  the new function.
                     * @returns {Function} Returns the new wrapped function.
                     */
                    function createPartial(func, bitmask, thisArg, partials) {
                        var isBind = bitmask & WRAP_BIND_FLAG,
                            Ctor = createCtor(func);

                        function wrapper() {
                            var argsIndex = -1,
                                argsLength = arguments.length,
                                leftIndex = -1,
                                leftLength = partials.length,
                                args = Array(leftLength + argsLength),
                                fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

                            while (++leftIndex < leftLength) {
                                args[leftIndex] = partials[leftIndex];
                            }
                            while (argsLength--) {
                                args[leftIndex++] = arguments[++argsIndex];
                            }
                            return apply(fn, isBind ? thisArg : this, args);
                        }
                        return wrapper;
                    }

                    /**
                     * Creates a `_.range` or `_.rangeRight` function.
                     *
                     * @private
                     * @param {boolean} [fromRight] Specify iterating from right to left.
                     * @returns {Function} Returns the new range function.
                     */
                    function createRange(fromRight) {
                        return function(start, end, step) {
                            if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
                                end = step = undefined;
                            }
                            // Ensure the sign of `-0` is preserved.
                            start = toFinite(start);
                            if (end === undefined) {
                                end = start;
                                start = 0;
                            } else {
                                end = toFinite(end);
                            }
                            step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
                            return baseRange(start, end, step, fromRight);
                        };
                    }

                    /**
                     * Creates a function that performs a relational operation on two values.
                     *
                     * @private
                     * @param {Function} operator The function to perform the operation.
                     * @returns {Function} Returns the new relational operation function.
                     */
                    function createRelationalOperation(operator) {
                        return function(value, other) {
                            if (!(typeof value == 'string' && typeof other == 'string')) {
                                value = toNumber(value);
                                other = toNumber(other);
                            }
                            return operator(value, other);
                        };
                    }

                    /**
                     * Creates a function that wraps `func` to continue currying.
                     *
                     * @private
                     * @param {Function} func The function to wrap.
                     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                     * @param {Function} wrapFunc The function to create the `func` wrapper.
                     * @param {*} placeholder The placeholder value.
                     * @param {*} [thisArg] The `this` binding of `func`.
                     * @param {Array} [partials] The arguments to prepend to those provided to
                     *  the new function.
                     * @param {Array} [holders] The `partials` placeholder indexes.
                     * @param {Array} [argPos] The argument positions of the new function.
                     * @param {number} [ary] The arity cap of `func`.
                     * @param {number} [arity] The arity of `func`.
                     * @returns {Function} Returns the new wrapped function.
                     */
                    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
                        var isCurry = bitmask & WRAP_CURRY_FLAG,
                            newHolders = isCurry ? holders : undefined,
                            newHoldersRight = isCurry ? undefined : holders,
                            newPartials = isCurry ? partials : undefined,
                            newPartialsRight = isCurry ? undefined : partials;

                        bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
                        bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

                        if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
                            bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
                        }
                        var newData = [
                            func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
                            newHoldersRight, argPos, ary, arity
                        ];

                        var result = wrapFunc.apply(undefined, newData);
                        if (isLaziable(func)) {
                            setData(result, newData);
                        }
                        result.placeholder = placeholder;
                        return setWrapToString(result, func, bitmask);
                    }

                    /**
                     * Creates a function like `_.round`.
                     *
                     * @private
                     * @param {string} methodName The name of the `Math` method to use when rounding.
                     * @returns {Function} Returns the new round function.
                     */
                    function createRound(methodName) {
                        var func = Math[methodName];
                        return function(number, precision) {
                            number = toNumber(number);
                            precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
                            if (precision) {
                                // Shift with exponential notation to avoid floating-point issues.
                                // See [MDN](https://mdn.io/round#Examples) for more details.
                                var pair = (toString(number) + 'e').split('e'),
                                    value = func(pair[0] + 'e' + (+pair[1] + precision));

                                pair = (toString(value) + 'e').split('e');
                                return +(pair[0] + 'e' + (+pair[1] - precision));
                            }
                            return func(number);
                        };
                    }

                    /**
                     * Creates a set object of `values`.
                     *
                     * @private
                     * @param {Array} values The values to add to the set.
                     * @returns {Object} Returns the new set.
                     */
                    var createSet = !(Set && (1 / setToArray(new Set([, -0]))[1]) == INFINITY) ? noop : function(values) {
                        return new Set(values);
                    };

                    /**
                     * Creates a `_.toPairs` or `_.toPairsIn` function.
                     *
                     * @private
                     * @param {Function} keysFunc The function to get the keys of a given object.
                     * @returns {Function} Returns the new pairs function.
                     */
                    function createToPairs(keysFunc) {
                        return function(object) {
                            var tag = getTag(object);
                            if (tag == mapTag) {
                                return mapToArray(object);
                            }
                            if (tag == setTag) {
                                return setToPairs(object);
                            }
                            return baseToPairs(object, keysFunc(object));
                        };
                    }

                    /**
                     * Creates a function that either curries or invokes `func` with optional
                     * `this` binding and partially applied arguments.
                     *
                     * @private
                     * @param {Function|string} func The function or method name to wrap.
                     * @param {number} bitmask The bitmask flags.
                     *    1 - `_.bind`
                     *    2 - `_.bindKey`
                     *    4 - `_.curry` or `_.curryRight` of a bound function
                     *    8 - `_.curry`
                     *   16 - `_.curryRight`
                     *   32 - `_.partial`
                     *   64 - `_.partialRight`
                     *  128 - `_.rearg`
                     *  256 - `_.ary`
                     *  512 - `_.flip`
                     * @param {*} [thisArg] The `this` binding of `func`.
                     * @param {Array} [partials] The arguments to be partially applied.
                     * @param {Array} [holders] The `partials` placeholder indexes.
                     * @param {Array} [argPos] The argument positions of the new function.
                     * @param {number} [ary] The arity cap of `func`.
                     * @param {number} [arity] The arity of `func`.
                     * @returns {Function} Returns the new wrapped function.
                     */
                    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
                        var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
                        if (!isBindKey && typeof func != 'function') {
                            throw new TypeError(FUNC_ERROR_TEXT);
                        }
                        var length = partials ? partials.length : 0;
                        if (!length) {
                            bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
                            partials = holders = undefined;
                        }
                        ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
                        arity = arity === undefined ? arity : toInteger(arity);
                        length -= holders ? holders.length : 0;

                        if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
                            var partialsRight = partials,
                                holdersRight = holders;

                            partials = holders = undefined;
                        }
                        var data = isBindKey ? undefined : getData(func);

                        var newData = [
                            func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
                            argPos, ary, arity
                        ];

                        if (data) {
                            mergeData(newData, data);
                        }
                        func = newData[0];
                        bitmask = newData[1];
                        thisArg = newData[2];
                        partials = newData[3];
                        holders = newData[4];
                        arity = newData[9] = newData[9] === undefined ?
                            (isBindKey ? 0 : func.length) :
                            nativeMax(newData[9] - length, 0);

                        if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
                            bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
                        }
                        if (!bitmask || bitmask == WRAP_BIND_FLAG) {
                            var result = createBind(func, bitmask, thisArg);
                        } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
                            result = createCurry(func, bitmask, arity);
                        } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
                            result = createPartial(func, bitmask, thisArg, partials);
                        } else {
                            result = createHybrid.apply(undefined, newData);
                        }
                        var setter = data ? baseSetData : setData;
                        return setWrapToString(setter(result, newData), func, bitmask);
                    }

                    /**
                     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
                     * of source objects to the destination object for all destination properties
                     * that resolve to `undefined`.
                     *
                     * @private
                     * @param {*} objValue The destination value.
                     * @param {*} srcValue The source value.
                     * @param {string} key The key of the property to assign.
                     * @param {Object} object The parent object of `objValue`.
                     * @returns {*} Returns the value to assign.
                     */
                    function customDefaultsAssignIn(objValue, srcValue, key, object) {
                        if (objValue === undefined ||
                            (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
                            return srcValue;
                        }
                        return objValue;
                    }

                    /**
                     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
                     * objects into destination objects that are passed thru.
                     *
                     * @private
                     * @param {*} objValue The destination value.
                     * @param {*} srcValue The source value.
                     * @param {string} key The key of the property to merge.
                     * @param {Object} object The parent object of `objValue`.
                     * @param {Object} source The parent object of `srcValue`.
                     * @param {Object} [stack] Tracks traversed source values and their merged
                     *  counterparts.
                     * @returns {*} Returns the value to assign.
                     */
                    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
                        if (isObject(objValue) && isObject(srcValue)) {
                            // Recursively merge objects and arrays (susceptible to call stack limits).
                            stack.set(srcValue, objValue);
                            baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
                            stack['delete'](srcValue);
                        }
                        return objValue;
                    }

                    /**
                     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
                     * objects.
                     *
                     * @private
                     * @param {*} value The value to inspect.
                     * @param {string} key The key of the property to inspect.
                     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
                     */
                    function customOmitClone(value) {
                        return isPlainObject(value) ? undefined : value;
                    }

                    /**
                     * A specialized version of `baseIsEqualDeep` for arrays with support for
                     * partial deep comparisons.
                     *
                     * @private
                     * @param {Array} array The array to compare.
                     * @param {Array} other The other array to compare.
                     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
                     * @param {Function} customizer The function to customize comparisons.
                     * @param {Function} equalFunc The function to determine equivalents of values.
                     * @param {Object} stack Tracks traversed `array` and `other` objects.
                     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
                     */
                    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
                        var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
                            arrLength = array.length,
                            othLength = other.length;

                        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
                            return false;
                        }
                        // Assume cyclic values are equal.
                        var stacked = stack.get(array);
                        if (stacked && stack.get(other)) {
                            return stacked == other;
                        }
                        var index = -1,
                            result = true,
                            seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

                        stack.set(array, other);
                        stack.set(other, array);

                        // Ignore non-index properties.
                        while (++index < arrLength) {
                            var arrValue = array[index],
                                othValue = other[index];

                            if (customizer) {
                                var compared = isPartial ?
                                    customizer(othValue, arrValue, index, other, array, stack) :
                                    customizer(arrValue, othValue, index, array, other, stack);
                            }
                            if (compared !== undefined) {
                                if (compared) {
                                    continue;
                                }
                                result = false;
                                break;
                            }
                            // Recursively compare arrays (susceptible to call stack limits).
                            if (seen) {
                                if (!arraySome(other, function(othValue, othIndex) {
                                        if (!cacheHas(seen, othIndex) &&
                                            (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                                            return seen.push(othIndex);
                                        }
                                    })) {
                                    result = false;
                                    break;
                                }
                            } else if (!(
                                    arrValue === othValue ||
                                    equalFunc(arrValue, othValue, bitmask, customizer, stack)
                                )) {
                                result = false;
                                break;
                            }
                        }
                        stack['delete'](array);
                        stack['delete'](other);
                        return result;
                    }

                    /**
                     * A specialized version of `baseIsEqualDeep` for comparing objects of
                     * the same `toStringTag`.
                     *
                     * **Note:** This function only supports comparing values with tags of
                     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
                     *
                     * @private
                     * @param {Object} object The object to compare.
                     * @param {Object} other The other object to compare.
                     * @param {string} tag The `toStringTag` of the objects to compare.
                     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
                     * @param {Function} customizer The function to customize comparisons.
                     * @param {Function} equalFunc The function to determine equivalents of values.
                     * @param {Object} stack Tracks traversed `object` and `other` objects.
                     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
                     */
                    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
                        switch (tag) {
                            case dataViewTag:
                                if ((object.byteLength != other.byteLength) ||
                                    (object.byteOffset != other.byteOffset)) {
                                    return false;
                                }
                                object = object.buffer;
                                other = other.buffer;

                            case arrayBufferTag:
                                if ((object.byteLength != other.byteLength) ||
                                    !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
                                    return false;
                                }
                                return true;

                            case boolTag:
                            case dateTag:
                            case numberTag:
                                // Coerce booleans to `1` or `0` and dates to milliseconds.
                                // Invalid dates are coerced to `NaN`.
                                return eq(+object, +other);

                            case errorTag:
                                return object.name == other.name && object.message == other.message;

                            case regexpTag:
                            case stringTag:
                                // Coerce regexes to strings and treat strings, primitives and objects,
                                // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
                                // for more details.
                                return object == (other + '');

                            case mapTag:
                                var convert = mapToArray;

                            case setTag:
                                var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
                                convert || (convert = setToArray);

                                if (object.size != other.size && !isPartial) {
                                    return false;
                                }
                                // Assume cyclic values are equal.
                                var stacked = stack.get(object);
                                if (stacked) {
                                    return stacked == other;
                                }
                                bitmask |= COMPARE_UNORDERED_FLAG;

                                // Recursively compare objects (susceptible to call stack limits).
                                stack.set(object, other);
                                var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
                                stack['delete'](object);
                                return result;

                            case symbolTag:
                                if (symbolValueOf) {
                                    return symbolValueOf.call(object) == symbolValueOf.call(other);
                                }
                        }
                        return false;
                    }

                    /**
                     * A specialized version of `baseIsEqualDeep` for objects with support for
                     * partial deep comparisons.
                     *
                     * @private
                     * @param {Object} object The object to compare.
                     * @param {Object} other The other object to compare.
                     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
                     * @param {Function} customizer The function to customize comparisons.
                     * @param {Function} equalFunc The function to determine equivalents of values.
                     * @param {Object} stack Tracks traversed `object` and `other` objects.
                     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
                     */
                    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
                        var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
                            objProps = getAllKeys(object),
                            objLength = objProps.length,
                            othProps = getAllKeys(other),
                            othLength = othProps.length;

                        if (objLength != othLength && !isPartial) {
                            return false;
                        }
                        var index = objLength;
                        while (index--) {
                            var key = objProps[index];
                            if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
                                return false;
                            }
                        }
                        // Assume cyclic values are equal.
                        var stacked = stack.get(object);
                        if (stacked && stack.get(other)) {
                            return stacked == other;
                        }
                        var result = true;
                        stack.set(object, other);
                        stack.set(other, object);

                        var skipCtor = isPartial;
                        while (++index < objLength) {
                            key = objProps[index];
                            var objValue = object[key],
                                othValue = other[key];

                            if (customizer) {
                                var compared = isPartial ?
                                    customizer(othValue, objValue, key, other, object, stack) :
                                    customizer(objValue, othValue, key, object, other, stack);
                            }
                            // Recursively compare objects (susceptible to call stack limits).
                            if (!(compared === undefined ?
                                    (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack)) :
                                    compared
                                )) {
                                result = false;
                                break;
                            }
                            skipCtor || (skipCtor = key == 'constructor');
                        }
                        if (result && !skipCtor) {
                            var objCtor = object.constructor,
                                othCtor = other.constructor;

                            // Non `Object` object instances with different constructors are not equal.
                            if (objCtor != othCtor &&
                                ('constructor' in object && 'constructor' in other) &&
                                !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
                                    typeof othCtor == 'function' && othCtor instanceof othCtor)) {
                                result = false;
                            }
                        }
                        stack['delete'](object);
                        stack['delete'](other);
                        return result;
                    }

                    /**
                     * A specialized version of `baseRest` which flattens the rest array.
                     *
                     * @private
                     * @param {Function} func The function to apply a rest parameter to.
                     * @returns {Function} Returns the new function.
                     */
                    function flatRest(func) {
                        return setToString(overRest(func, undefined, flatten), func + '');
                    }

                    /**
                     * Creates an array of own enumerable property names and symbols of `object`.
                     *
                     * @private
                     * @param {Object} object The object to query.
                     * @returns {Array} Returns the array of property names and symbols.
                     */
                    function getAllKeys(object) {
                        return baseGetAllKeys(object, keys, getSymbols);
                    }

                    /**
                     * Creates an array of own and inherited enumerable property names and
                     * symbols of `object`.
                     *
                     * @private
                     * @param {Object} object The object to query.
                     * @returns {Array} Returns the array of property names and symbols.
                     */
                    function getAllKeysIn(object) {
                        return baseGetAllKeys(object, keysIn, getSymbolsIn);
                    }

                    /**
                     * Gets metadata for `func`.
                     *
                     * @private
                     * @param {Function} func The function to query.
                     * @returns {*} Returns the metadata for `func`.
                     */
                    var getData = !metaMap ? noop : function(func) {
                        return metaMap.get(func);
                    };

                    /**
                     * Gets the name of `func`.
                     *
                     * @private
                     * @param {Function} func The function to query.
                     * @returns {string} Returns the function name.
                     */
                    function getFuncName(func) {
                        var result = (func.name + ''),
                            array = realNames[result],
                            length = hasOwnProperty.call(realNames, result) ? array.length : 0;

                        while (length--) {
                            var data = array[length],
                                otherFunc = data.func;
                            if (otherFunc == null || otherFunc == func) {
                                return data.name;
                            }
                        }
                        return result;
                    }

                    /**
                     * Gets the argument placeholder value for `func`.
                     *
                     * @private
                     * @param {Function} func The function to inspect.
                     * @returns {*} Returns the placeholder value.
                     */
                    function getHolder(func) {
                        var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
                        return object.placeholder;
                    }

                    /**
                     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
                     * this function returns the custom method, otherwise it returns `baseIteratee`.
                     * If arguments are provided, the chosen function is invoked with them and
                     * its result is returned.
                     *
                     * @private
                     * @param {*} [value] The value to convert to an iteratee.
                     * @param {number} [arity] The arity of the created iteratee.
                     * @returns {Function} Returns the chosen function or its result.
                     */
                    function getIteratee() {
                        var result = lodash.iteratee || iteratee;
                        result = result === iteratee ? baseIteratee : result;
                        return arguments.length ? result(arguments[0], arguments[1]) : result;
                    }

                    /**
                     * Gets the data for `map`.
                     *
                     * @private
                     * @param {Object} map The map to query.
                     * @param {string} key The reference key.
                     * @returns {*} Returns the map data.
                     */
                    function getMapData(map, key) {
                        var data = map.__data__;
                        return isKeyable(key) ?
                            data[typeof key == 'string' ? 'string' : 'hash'] :
                            data.map;
                    }

                    /**
                     * Gets the property names, values, and compare flags of `object`.
                     *
                     * @private
                     * @param {Object} object The object to query.
                     * @returns {Array} Returns the match data of `object`.
                     */
                    function getMatchData(object) {
                        var result = keys(object),
                            length = result.length;

                        while (length--) {
                            var key = result[length],
                                value = object[key];

                            result[length] = [key, value, isStrictComparable(value)];
                        }
                        return result;
                    }

                    /**
                     * Gets the native function at `key` of `object`.
                     *
                     * @private
                     * @param {Object} object The object to query.
                     * @param {string} key The key of the method to get.
                     * @returns {*} Returns the function if it's native, else `undefined`.
                     */
                    function getNative(object, key) {
                        var value = getValue(object, key);
                        return baseIsNative(value) ? value : undefined;
                    }

                    /**
                     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
                     *
                     * @private
                     * @param {*} value The value to query.
                     * @returns {string} Returns the raw `toStringTag`.
                     */
                    function getRawTag(value) {
                        var isOwn = hasOwnProperty.call(value, symToStringTag),
                            tag = value[symToStringTag];

                        try {
                            value[symToStringTag] = undefined;
                            var unmasked = true;
                        } catch (e) {}

                        var result = nativeObjectToString.call(value);
                        if (unmasked) {
                            if (isOwn) {
                                value[symToStringTag] = tag;
                            } else {
                                delete value[symToStringTag];
                            }
                        }
                        return result;
                    }

                    /**
                     * Creates an array of the own enumerable symbols of `object`.
                     *
                     * @private
                     * @param {Object} object The object to query.
                     * @returns {Array} Returns the array of symbols.
                     */
                    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
                        if (object == null) {
                            return [];
                        }
                        object = Object(object);
                        return arrayFilter(nativeGetSymbols(object), function(symbol) {
                            return propertyIsEnumerable.call(object, symbol);
                        });
                    };

                    /**
                     * Creates an array of the own and inherited enumerable symbols of `object`.
                     *
                     * @private
                     * @param {Object} object The object to query.
                     * @returns {Array} Returns the array of symbols.
                     */
                    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
                        var result = [];
                        while (object) {
                            arrayPush(result, getSymbols(object));
                            object = getPrototype(object);
                        }
                        return result;
                    };

                    /**
                     * Gets the `toStringTag` of `value`.
                     *
                     * @private
                     * @param {*} value The value to query.
                     * @returns {string} Returns the `toStringTag`.
                     */
                    var getTag = baseGetTag;

                    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
                    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
                        (Map && getTag(new Map) != mapTag) ||
                        (Promise && getTag(Promise.resolve()) != promiseTag) ||
                        (Set && getTag(new Set) != setTag) ||
                        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
                        getTag = function(value) {
                            var result = baseGetTag(value),
                                Ctor = result == objectTag ? value.constructor : undefined,
                                ctorString = Ctor ? toSource(Ctor) : '';

                            if (ctorString) {
                                switch (ctorString) {
                                    case dataViewCtorString:
                                        return dataViewTag;
                                    case mapCtorString:
                                        return mapTag;
                                    case promiseCtorString:
                                        return promiseTag;
                                    case setCtorString:
                                        return setTag;
                                    case weakMapCtorString:
                                        return weakMapTag;
                                }
                            }
                            return result;
                        };
                    }

                    /**
                     * Gets the view, applying any `transforms` to the `start` and `end` positions.
                     *
                     * @private
                     * @param {number} start The start of the view.
                     * @param {number} end The end of the view.
                     * @param {Array} transforms The transformations to apply to the view.
                     * @returns {Object} Returns an object containing the `start` and `end`
                     *  positions of the view.
                     */
                    function getView(start, end, transforms) {
                        var index = -1,
                            length = transforms.length;

                        while (++index < length) {
                            var data = transforms[index],
                                size = data.size;

                            switch (data.type) {
                                case 'drop':
                                    start += size;
                                    break;
                                case 'dropRight':
                                    end -= size;
                                    break;
                                case 'take':
                                    end = nativeMin(end, start + size);
                                    break;
                                case 'takeRight':
                                    start = nativeMax(start, end - size);
                                    break;
                            }
                        }
                        return { 'start': start, 'end': end };
                    }

                    /**
                     * Extracts wrapper details from the `source` body comment.
                     *
                     * @private
                     * @param {string} source The source to inspect.
                     * @returns {Array} Returns the wrapper details.
                     */
                    function getWrapDetails(source) {
                        var match = source.match(reWrapDetails);
                        return match ? match[1].split(reSplitDetails) : [];
                    }

                    /**
                     * Checks if `path` exists on `object`.
                     *
                     * @private
                     * @param {Object} object The object to query.
                     * @param {Array|string} path The path to check.
                     * @param {Function} hasFunc The function to check properties.
                     * @returns {boolean} Returns `true` if `path` exists, else `false`.
                     */
                    function hasPath(object, path, hasFunc) {
                        path = castPath(path, object);

                        var index = -1,
                            length = path.length,
                            result = false;

                        while (++index < length) {
                            var key = toKey(path[index]);
                            if (!(result = object != null && hasFunc(object, key))) {
                                break;
                            }
                            object = object[key];
                        }
                        if (result || ++index != length) {
                            return result;
                        }
                        length = object == null ? 0 : object.length;
                        return !!length && isLength(length) && isIndex(key, length) &&
                            (isArray(object) || isArguments(object));
                    }

                    /**
                     * Initializes an array clone.
                     *
                     * @private
                     * @param {Array} array The array to clone.
                     * @returns {Array} Returns the initialized clone.
                     */
                    function initCloneArray(array) {
                        var length = array.length,
                            result = array.constructor(length);

                        // Add properties assigned by `RegExp#exec`.
                        if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
                            result.index = array.index;
                            result.input = array.input;
                        }
                        return result;
                    }

                    /**
                     * Initializes an object clone.
                     *
                     * @private
                     * @param {Object} object The object to clone.
                     * @returns {Object} Returns the initialized clone.
                     */
                    function initCloneObject(object) {
                        return (typeof object.constructor == 'function' && !isPrototype(object)) ?
                            baseCreate(getPrototype(object)) : {};
                    }

                    /**
                     * Initializes an object clone based on its `toStringTag`.
                     *
                     * **Note:** This function only supports cloning values with tags of
                     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
                     *
                     * @private
                     * @param {Object} object The object to clone.
                     * @param {string} tag The `toStringTag` of the object to clone.
                     * @param {Function} cloneFunc The function to clone values.
                     * @param {boolean} [isDeep] Specify a deep clone.
                     * @returns {Object} Returns the initialized clone.
                     */
                    function initCloneByTag(object, tag, cloneFunc, isDeep) {
                        var Ctor = object.constructor;
                        switch (tag) {
                            case arrayBufferTag:
                                return cloneArrayBuffer(object);

                            case boolTag:
                            case dateTag:
                                return new Ctor(+object);

                            case dataViewTag:
                                return cloneDataView(object, isDeep);

                            case float32Tag:
                            case float64Tag:
                            case int8Tag:
                            case int16Tag:
                            case int32Tag:
                            case uint8Tag:
                            case uint8ClampedTag:
                            case uint16Tag:
                            case uint32Tag:
                                return cloneTypedArray(object, isDeep);

                            case mapTag:
                                return cloneMap(object, isDeep, cloneFunc);

                            case numberTag:
                            case stringTag:
                                return new Ctor(object);

                            case regexpTag:
                                return cloneRegExp(object);

                            case setTag:
                                return cloneSet(object, isDeep, cloneFunc);

                            case symbolTag:
                                return cloneSymbol(object);
                        }
                    }

                    /**
                     * Inserts wrapper `details` in a comment at the top of the `source` body.
                     *
                     * @private
                     * @param {string} source The source to modify.
                     * @returns {Array} details The details to insert.
                     * @returns {string} Returns the modified source.
                     */
                    function insertWrapDetails(source, details) {
                        var length = details.length;
                        if (!length) {
                            return source;
                        }
                        var lastIndex = length - 1;
                        details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
                        details = details.join(length > 2 ? ', ' : ' ');
                        return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
                    }

                    /**
                     * Checks if `value` is a flattenable `arguments` object or array.
                     *
                     * @private
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
                     */
                    function isFlattenable(value) {
                        return isArray(value) || isArguments(value) ||
                            !!(spreadableSymbol && value && value[spreadableSymbol]);
                    }

                    /**
                     * Checks if `value` is a valid array-like index.
                     *
                     * @private
                     * @param {*} value The value to check.
                     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
                     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
                     */
                    function isIndex(value, length) {
                        length = length == null ? MAX_SAFE_INTEGER : length;
                        return !!length &&
                            (typeof value == 'number' || reIsUint.test(value)) &&
                            (value > -1 && value % 1 == 0 && value < length);
                    }

                    /**
                     * Checks if the given arguments are from an iteratee call.
                     *
                     * @private
                     * @param {*} value The potential iteratee value argument.
                     * @param {*} index The potential iteratee index or key argument.
                     * @param {*} object The potential iteratee object argument.
                     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
                     *  else `false`.
                     */
                    function isIterateeCall(value, index, object) {
                        if (!isObject(object)) {
                            return false;
                        }
                        var type = typeof index;
                        if (type == 'number' ?
                            (isArrayLike(object) && isIndex(index, object.length)) :
                            (type == 'string' && index in object)
                        ) {
                            return eq(object[index], value);
                        }
                        return false;
                    }

                    /**
                     * Checks if `value` is a property name and not a property path.
                     *
                     * @private
                     * @param {*} value The value to check.
                     * @param {Object} [object] The object to query keys on.
                     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
                     */
                    function isKey(value, object) {
                        if (isArray(value)) {
                            return false;
                        }
                        var type = typeof value;
                        if (type == 'number' || type == 'symbol' || type == 'boolean' ||
                            value == null || isSymbol(value)) {
                            return true;
                        }
                        return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
                            (object != null && value in Object(object));
                    }

                    /**
                     * Checks if `value` is suitable for use as unique object key.
                     *
                     * @private
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
                     */
                    function isKeyable(value) {
                        var type = typeof value;
                        return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean') ?
                            (value !== '__proto__') :
                            (value === null);
                    }

                    /**
                     * Checks if `func` has a lazy counterpart.
                     *
                     * @private
                     * @param {Function} func The function to check.
                     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
                     *  else `false`.
                     */
                    function isLaziable(func) {
                        var funcName = getFuncName(func),
                            other = lodash[funcName];

                        if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
                            return false;
                        }
                        if (func === other) {
                            return true;
                        }
                        var data = getData(other);
                        return !!data && func === data[0];
                    }

                    /**
                     * Checks if `func` has its source masked.
                     *
                     * @private
                     * @param {Function} func The function to check.
                     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
                     */
                    function isMasked(func) {
                        return !!maskSrcKey && (maskSrcKey in func);
                    }

                    /**
                     * Checks if `func` is capable of being masked.
                     *
                     * @private
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
                     */
                    var isMaskable = coreJsData ? isFunction : stubFalse;

                    /**
                     * Checks if `value` is likely a prototype object.
                     *
                     * @private
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
                     */
                    function isPrototype(value) {
                        var Ctor = value && value.constructor,
                            proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

                        return value === proto;
                    }

                    /**
                     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
                     *
                     * @private
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` if suitable for strict
                     *  equality comparisons, else `false`.
                     */
                    function isStrictComparable(value) {
                        return value === value && !isObject(value);
                    }

                    /**
                     * A specialized version of `matchesProperty` for source values suitable
                     * for strict equality comparisons, i.e. `===`.
                     *
                     * @private
                     * @param {string} key The key of the property to get.
                     * @param {*} srcValue The value to match.
                     * @returns {Function} Returns the new spec function.
                     */
                    function matchesStrictComparable(key, srcValue) {
                        return function(object) {
                            if (object == null) {
                                return false;
                            }
                            return object[key] === srcValue &&
                                (srcValue !== undefined || (key in Object(object)));
                        };
                    }

                    /**
                     * A specialized version of `_.memoize` which clears the memoized function's
                     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
                     *
                     * @private
                     * @param {Function} func The function to have its output memoized.
                     * @returns {Function} Returns the new memoized function.
                     */
                    function memoizeCapped(func) {
                        var result = memoize(func, function(key) {
                            if (cache.size === MAX_MEMOIZE_SIZE) {
                                cache.clear();
                            }
                            return key;
                        });

                        var cache = result.cache;
                        return result;
                    }

                    /**
                     * Merges the function metadata of `source` into `data`.
                     *
                     * Merging metadata reduces the number of wrappers used to invoke a function.
                     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
                     * may be applied regardless of execution order. Methods like `_.ary` and
                     * `_.rearg` modify function arguments, making the order in which they are
                     * executed important, preventing the merging of metadata. However, we make
                     * an exception for a safe combined case where curried functions have `_.ary`
                     * and or `_.rearg` applied.
                     *
                     * @private
                     * @param {Array} data The destination metadata.
                     * @param {Array} source The source metadata.
                     * @returns {Array} Returns `data`.
                     */
                    function mergeData(data, source) {
                        var bitmask = data[1],
                            srcBitmask = source[1],
                            newBitmask = bitmask | srcBitmask,
                            isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

                        var isCombo =
                            ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
                            ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
                            ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

                        // Exit early if metadata can't be merged.
                        if (!(isCommon || isCombo)) {
                            return data;
                        }
                        // Use source `thisArg` if available.
                        if (srcBitmask & WRAP_BIND_FLAG) {
                            data[2] = source[2];
                            // Set when currying a bound function.
                            newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
                        }
                        // Compose partial arguments.
                        var value = source[3];
                        if (value) {
                            var partials = data[3];
                            data[3] = partials ? composeArgs(partials, value, source[4]) : value;
                            data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
                        }
                        // Compose partial right arguments.
                        value = source[5];
                        if (value) {
                            partials = data[5];
                            data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
                            data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
                        }
                        // Use source `argPos` if available.
                        value = source[7];
                        if (value) {
                            data[7] = value;
                        }
                        // Use source `ary` if it's smaller.
                        if (srcBitmask & WRAP_ARY_FLAG) {
                            data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
                        }
                        // Use source `arity` if one is not provided.
                        if (data[9] == null) {
                            data[9] = source[9];
                        }
                        // Use source `func` and merge bitmasks.
                        data[0] = source[0];
                        data[1] = newBitmask;

                        return data;
                    }

                    /**
                     * This function is like
                     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
                     * except that it includes inherited enumerable properties.
                     *
                     * @private
                     * @param {Object} object The object to query.
                     * @returns {Array} Returns the array of property names.
                     */
                    function nativeKeysIn(object) {
                        var result = [];
                        if (object != null) {
                            for (var key in Object(object)) {
                                result.push(key);
                            }
                        }
                        return result;
                    }

                    /**
                     * Converts `value` to a string using `Object.prototype.toString`.
                     *
                     * @private
                     * @param {*} value The value to convert.
                     * @returns {string} Returns the converted string.
                     */
                    function objectToString(value) {
                        return nativeObjectToString.call(value);
                    }

                    /**
                     * A specialized version of `baseRest` which transforms the rest array.
                     *
                     * @private
                     * @param {Function} func The function to apply a rest parameter to.
                     * @param {number} [start=func.length-1] The start position of the rest parameter.
                     * @param {Function} transform The rest array transform.
                     * @returns {Function} Returns the new function.
                     */
                    function overRest(func, start, transform) {
                        start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
                        return function() {
                            var args = arguments,
                                index = -1,
                                length = nativeMax(args.length - start, 0),
                                array = Array(length);

                            while (++index < length) {
                                array[index] = args[start + index];
                            }
                            index = -1;
                            var otherArgs = Array(start + 1);
                            while (++index < start) {
                                otherArgs[index] = args[index];
                            }
                            otherArgs[start] = transform(array);
                            return apply(func, this, otherArgs);
                        };
                    }

                    /**
                     * Gets the parent value at `path` of `object`.
                     *
                     * @private
                     * @param {Object} object The object to query.
                     * @param {Array} path The path to get the parent value of.
                     * @returns {*} Returns the parent value.
                     */
                    function parent(object, path) {
                        return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
                    }

                    /**
                     * Reorder `array` according to the specified indexes where the element at
                     * the first index is assigned as the first element, the element at
                     * the second index is assigned as the second element, and so on.
                     *
                     * @private
                     * @param {Array} array The array to reorder.
                     * @param {Array} indexes The arranged array indexes.
                     * @returns {Array} Returns `array`.
                     */
                    function reorder(array, indexes) {
                        var arrLength = array.length,
                            length = nativeMin(indexes.length, arrLength),
                            oldArray = copyArray(array);

                        while (length--) {
                            var index = indexes[length];
                            array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
                        }
                        return array;
                    }

                    /**
                     * Sets metadata for `func`.
                     *
                     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
                     * period of time, it will trip its breaker and transition to an identity
                     * function to avoid garbage collection pauses in V8. See
                     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
                     * for more details.
                     *
                     * @private
                     * @param {Function} func The function to associate metadata with.
                     * @param {*} data The metadata.
                     * @returns {Function} Returns `func`.
                     */
                    var setData = shortOut(baseSetData);

                    /**
                     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
                     *
                     * @private
                     * @param {Function} func The function to delay.
                     * @param {number} wait The number of milliseconds to delay invocation.
                     * @returns {number|Object} Returns the timer id or timeout object.
                     */
                    var setTimeout = ctxSetTimeout || function(func, wait) {
                        return root.setTimeout(func, wait);
                    };

                    /**
                     * Sets the `toString` method of `func` to return `string`.
                     *
                     * @private
                     * @param {Function} func The function to modify.
                     * @param {Function} string The `toString` result.
                     * @returns {Function} Returns `func`.
                     */
                    var setToString = shortOut(baseSetToString);

                    /**
                     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
                     * with wrapper details in a comment at the top of the source body.
                     *
                     * @private
                     * @param {Function} wrapper The function to modify.
                     * @param {Function} reference The reference function.
                     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                     * @returns {Function} Returns `wrapper`.
                     */
                    function setWrapToString(wrapper, reference, bitmask) {
                        var source = (reference + '');
                        return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
                    }

                    /**
                     * Creates a function that'll short out and invoke `identity` instead
                     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
                     * milliseconds.
                     *
                     * @private
                     * @param {Function} func The function to restrict.
                     * @returns {Function} Returns the new shortable function.
                     */
                    function shortOut(func) {
                        var count = 0,
                            lastCalled = 0;

                        return function() {
                            var stamp = nativeNow(),
                                remaining = HOT_SPAN - (stamp - lastCalled);

                            lastCalled = stamp;
                            if (remaining > 0) {
                                if (++count >= HOT_COUNT) {
                                    return arguments[0];
                                }
                            } else {
                                count = 0;
                            }
                            return func.apply(undefined, arguments);
                        };
                    }

                    /**
                     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
                     *
                     * @private
                     * @param {Array} array The array to shuffle.
                     * @param {number} [size=array.length] The size of `array`.
                     * @returns {Array} Returns `array`.
                     */
                    function shuffleSelf(array, size) {
                        var index = -1,
                            length = array.length,
                            lastIndex = length - 1;

                        size = size === undefined ? length : size;
                        while (++index < size) {
                            var rand = baseRandom(index, lastIndex),
                                value = array[rand];

                            array[rand] = array[index];
                            array[index] = value;
                        }
                        array.length = size;
                        return array;
                    }

                    /**
                     * Converts `string` to a property path array.
                     *
                     * @private
                     * @param {string} string The string to convert.
                     * @returns {Array} Returns the property path array.
                     */
                    var stringToPath = memoizeCapped(function(string) {
                        var result = [];
                        if (reLeadingDot.test(string)) {
                            result.push('');
                        }
                        string.replace(rePropName, function(match, number, quote, string) {
                            result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
                        });
                        return result;
                    });

                    /**
                     * Converts `value` to a string key if it's not a string or symbol.
                     *
                     * @private
                     * @param {*} value The value to inspect.
                     * @returns {string|symbol} Returns the key.
                     */
                    function toKey(value) {
                        if (typeof value == 'string' || isSymbol(value)) {
                            return value;
                        }
                        var result = (value + '');
                        return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
                    }

                    /**
                     * Converts `func` to its source code.
                     *
                     * @private
                     * @param {Function} func The function to convert.
                     * @returns {string} Returns the source code.
                     */
                    function toSource(func) {
                        if (func != null) {
                            try {
                                return funcToString.call(func);
                            } catch (e) {}
                            try {
                                return (func + '');
                            } catch (e) {}
                        }
                        return '';
                    }

                    /**
                     * Updates wrapper `details` based on `bitmask` flags.
                     *
                     * @private
                     * @returns {Array} details The details to modify.
                     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                     * @returns {Array} Returns `details`.
                     */
                    function updateWrapDetails(details, bitmask) {
                        arrayEach(wrapFlags, function(pair) {
                            var value = '_.' + pair[0];
                            if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
                                details.push(value);
                            }
                        });
                        return details.sort();
                    }

                    /**
                     * Creates a clone of `wrapper`.
                     *
                     * @private
                     * @param {Object} wrapper The wrapper to clone.
                     * @returns {Object} Returns the cloned wrapper.
                     */
                    function wrapperClone(wrapper) {
                        if (wrapper instanceof LazyWrapper) {
                            return wrapper.clone();
                        }
                        var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
                        result.__actions__ = copyArray(wrapper.__actions__);
                        result.__index__ = wrapper.__index__;
                        result.__values__ = wrapper.__values__;
                        return result;
                    }

                    /*------------------------------------------------------------------------*/

                    /**
                     * Creates an array of elements split into groups the length of `size`.
                     * If `array` can't be split evenly, the final chunk will be the remaining
                     * elements.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Array
                     * @param {Array} array The array to process.
                     * @param {number} [size=1] The length of each chunk
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                     * @returns {Array} Returns the new array of chunks.
                     * @example
                     *
                     * _.chunk(['a', 'b', 'c', 'd'], 2);
                     * // => [['a', 'b'], ['c', 'd']]
                     *
                     * _.chunk(['a', 'b', 'c', 'd'], 3);
                     * // => [['a', 'b', 'c'], ['d']]
                     */
                    function chunk(array, size, guard) {
                        if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
                            size = 1;
                        } else {
                            size = nativeMax(toInteger(size), 0);
                        }
                        var length = array == null ? 0 : array.length;
                        if (!length || size < 1) {
                            return [];
                        }
                        var index = 0,
                            resIndex = 0,
                            result = Array(nativeCeil(length / size));

                        while (index < length) {
                            result[resIndex++] = baseSlice(array, index, (index += size));
                        }
                        return result;
                    }

                    /**
                     * Creates an array with all falsey values removed. The values `false`, `null`,
                     * `0`, `""`, `undefined`, and `NaN` are falsey.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Array
                     * @param {Array} array The array to compact.
                     * @returns {Array} Returns the new array of filtered values.
                     * @example
                     *
                     * _.compact([0, 1, false, 2, '', 3]);
                     * // => [1, 2, 3]
                     */
                    function compact(array) {
                        var index = -1,
                            length = array == null ? 0 : array.length,
                            resIndex = 0,
                            result = [];

                        while (++index < length) {
                            var value = array[index];
                            if (value) {
                                result[resIndex++] = value;
                            }
                        }
                        return result;
                    }

                    /**
                     * Creates a new array concatenating `array` with any additional arrays
                     * and/or values.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {Array} array The array to concatenate.
                     * @param {...*} [values] The values to concatenate.
                     * @returns {Array} Returns the new concatenated array.
                     * @example
                     *
                     * var array = [1];
                     * var other = _.concat(array, 2, [3], [[4]]);
                     *
                     * console.log(other);
                     * // => [1, 2, 3, [4]]
                     *
                     * console.log(array);
                     * // => [1]
                     */
                    function concat() {
                        var length = arguments.length;
                        if (!length) {
                            return [];
                        }
                        var args = Array(length - 1),
                            array = arguments[0],
                            index = length;

                        while (index--) {
                            args[index - 1] = arguments[index];
                        }
                        return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
                    }

                    /**
                     * Creates an array of `array` values not included in the other given arrays
                     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                     * for equality comparisons. The order and references of result values are
                     * determined by the first array.
                     *
                     * **Note:** Unlike `_.pullAll`, this method returns a new array.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Array
                     * @param {Array} array The array to inspect.
                     * @param {...Array} [values] The values to exclude.
                     * @returns {Array} Returns the new array of filtered values.
                     * @see _.without, _.xor
                     * @example
                     *
                     * _.difference([2, 1], [2, 3]);
                     * // => [1]
                     */
                    var difference = baseRest(function(array, values) {
                        return isArrayLikeObject(array) ?
                            baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true)) : [];
                    });

                    /**
                     * This method is like `_.difference` except that it accepts `iteratee` which
                     * is invoked for each element of `array` and `values` to generate the criterion
                     * by which they're compared. The order and references of result values are
                     * determined by the first array. The iteratee is invoked with one argument:
                     * (value).
                     *
                     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {Array} array The array to inspect.
                     * @param {...Array} [values] The values to exclude.
                     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                     * @returns {Array} Returns the new array of filtered values.
                     * @example
                     *
                     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
                     * // => [1.2]
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
                     * // => [{ 'x': 2 }]
                     */
                    var differenceBy = baseRest(function(array, values) {
                        var iteratee = last(values);
                        if (isArrayLikeObject(iteratee)) {
                            iteratee = undefined;
                        }
                        return isArrayLikeObject(array) ?
                            baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2)) : [];
                    });

                    /**
                     * This method is like `_.difference` except that it accepts `comparator`
                     * which is invoked to compare elements of `array` to `values`. The order and
                     * references of result values are determined by the first array. The comparator
                     * is invoked with two arguments: (arrVal, othVal).
                     *
                     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {Array} array The array to inspect.
                     * @param {...Array} [values] The values to exclude.
                     * @param {Function} [comparator] The comparator invoked per element.
                     * @returns {Array} Returns the new array of filtered values.
                     * @example
                     *
                     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
                     *
                     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
                     * // => [{ 'x': 2, 'y': 1 }]
                     */
                    var differenceWith = baseRest(function(array, values) {
                        var comparator = last(values);
                        if (isArrayLikeObject(comparator)) {
                            comparator = undefined;
                        }
                        return isArrayLikeObject(array) ?
                            baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator) : [];
                    });

                    /**
                     * Creates a slice of `array` with `n` elements dropped from the beginning.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.5.0
                     * @category Array
                     * @param {Array} array The array to query.
                     * @param {number} [n=1] The number of elements to drop.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                     * @returns {Array} Returns the slice of `array`.
                     * @example
                     *
                     * _.drop([1, 2, 3]);
                     * // => [2, 3]
                     *
                     * _.drop([1, 2, 3], 2);
                     * // => [3]
                     *
                     * _.drop([1, 2, 3], 5);
                     * // => []
                     *
                     * _.drop([1, 2, 3], 0);
                     * // => [1, 2, 3]
                     */
                    function drop(array, n, guard) {
                        var length = array == null ? 0 : array.length;
                        if (!length) {
                            return [];
                        }
                        n = (guard || n === undefined) ? 1 : toInteger(n);
                        return baseSlice(array, n < 0 ? 0 : n, length);
                    }

                    /**
                     * Creates a slice of `array` with `n` elements dropped from the end.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Array
                     * @param {Array} array The array to query.
                     * @param {number} [n=1] The number of elements to drop.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                     * @returns {Array} Returns the slice of `array`.
                     * @example
                     *
                     * _.dropRight([1, 2, 3]);
                     * // => [1, 2]
                     *
                     * _.dropRight([1, 2, 3], 2);
                     * // => [1]
                     *
                     * _.dropRight([1, 2, 3], 5);
                     * // => []
                     *
                     * _.dropRight([1, 2, 3], 0);
                     * // => [1, 2, 3]
                     */
                    function dropRight(array, n, guard) {
                        var length = array == null ? 0 : array.length;
                        if (!length) {
                            return [];
                        }
                        n = (guard || n === undefined) ? 1 : toInteger(n);
                        n = length - n;
                        return baseSlice(array, 0, n < 0 ? 0 : n);
                    }

                    /**
                     * Creates a slice of `array` excluding elements dropped from the end.
                     * Elements are dropped until `predicate` returns falsey. The predicate is
                     * invoked with three arguments: (value, index, array).
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Array
                     * @param {Array} array The array to query.
                     * @param {Function} [predicate=_.identity] The function invoked per iteration.
                     * @returns {Array} Returns the slice of `array`.
                     * @example
                     *
                     * var users = [
                     *   { 'user': 'barney',  'active': true },
                     *   { 'user': 'fred',    'active': false },
                     *   { 'user': 'pebbles', 'active': false }
                     * ];
                     *
                     * _.dropRightWhile(users, function(o) { return !o.active; });
                     * // => objects for ['barney']
                     *
                     * // The `_.matches` iteratee shorthand.
                     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
                     * // => objects for ['barney', 'fred']
                     *
                     * // The `_.matchesProperty` iteratee shorthand.
                     * _.dropRightWhile(users, ['active', false]);
                     * // => objects for ['barney']
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.dropRightWhile(users, 'active');
                     * // => objects for ['barney', 'fred', 'pebbles']
                     */
                    function dropRightWhile(array, predicate) {
                        return (array && array.length) ?
                            baseWhile(array, getIteratee(predicate, 3), true, true) : [];
                    }

                    /**
                     * Creates a slice of `array` excluding elements dropped from the beginning.
                     * Elements are dropped until `predicate` returns falsey. The predicate is
                     * invoked with three arguments: (value, index, array).
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Array
                     * @param {Array} array The array to query.
                     * @param {Function} [predicate=_.identity] The function invoked per iteration.
                     * @returns {Array} Returns the slice of `array`.
                     * @example
                     *
                     * var users = [
                     *   { 'user': 'barney',  'active': false },
                     *   { 'user': 'fred',    'active': false },
                     *   { 'user': 'pebbles', 'active': true }
                     * ];
                     *
                     * _.dropWhile(users, function(o) { return !o.active; });
                     * // => objects for ['pebbles']
                     *
                     * // The `_.matches` iteratee shorthand.
                     * _.dropWhile(users, { 'user': 'barney', 'active': false });
                     * // => objects for ['fred', 'pebbles']
                     *
                     * // The `_.matchesProperty` iteratee shorthand.
                     * _.dropWhile(users, ['active', false]);
                     * // => objects for ['pebbles']
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.dropWhile(users, 'active');
                     * // => objects for ['barney', 'fred', 'pebbles']
                     */
                    function dropWhile(array, predicate) {
                        return (array && array.length) ?
                            baseWhile(array, getIteratee(predicate, 3), true) : [];
                    }

                    /**
                     * Fills elements of `array` with `value` from `start` up to, but not
                     * including, `end`.
                     *
                     * **Note:** This method mutates `array`.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.2.0
                     * @category Array
                     * @param {Array} array The array to fill.
                     * @param {*} value The value to fill `array` with.
                     * @param {number} [start=0] The start position.
                     * @param {number} [end=array.length] The end position.
                     * @returns {Array} Returns `array`.
                     * @example
                     *
                     * var array = [1, 2, 3];
                     *
                     * _.fill(array, 'a');
                     * console.log(array);
                     * // => ['a', 'a', 'a']
                     *
                     * _.fill(Array(3), 2);
                     * // => [2, 2, 2]
                     *
                     * _.fill([4, 6, 8, 10], '*', 1, 3);
                     * // => [4, '*', '*', 10]
                     */
                    function fill(array, value, start, end) {
                        var length = array == null ? 0 : array.length;
                        if (!length) {
                            return [];
                        }
                        if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
                            start = 0;
                            end = length;
                        }
                        return baseFill(array, value, start, end);
                    }

                    /**
                     * This method is like `_.find` except that it returns the index of the first
                     * element `predicate` returns truthy for instead of the element itself.
                     *
                     * @static
                     * @memberOf _
                     * @since 1.1.0
                     * @category Array
                     * @param {Array} array The array to inspect.
                     * @param {Function} [predicate=_.identity] The function invoked per iteration.
                     * @param {number} [fromIndex=0] The index to search from.
                     * @returns {number} Returns the index of the found element, else `-1`.
                     * @example
                     *
                     * var users = [
                     *   { 'user': 'barney',  'active': false },
                     *   { 'user': 'fred',    'active': false },
                     *   { 'user': 'pebbles', 'active': true }
                     * ];
                     *
                     * _.findIndex(users, function(o) { return o.user == 'barney'; });
                     * // => 0
                     *
                     * // The `_.matches` iteratee shorthand.
                     * _.findIndex(users, { 'user': 'fred', 'active': false });
                     * // => 1
                     *
                     * // The `_.matchesProperty` iteratee shorthand.
                     * _.findIndex(users, ['active', false]);
                     * // => 0
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.findIndex(users, 'active');
                     * // => 2
                     */
                    function findIndex(array, predicate, fromIndex) {
                        var length = array == null ? 0 : array.length;
                        if (!length) {
                            return -1;
                        }
                        var index = fromIndex == null ? 0 : toInteger(fromIndex);
                        if (index < 0) {
                            index = nativeMax(length + index, 0);
                        }
                        return baseFindIndex(array, getIteratee(predicate, 3), index);
                    }

                    /**
                     * This method is like `_.findIndex` except that it iterates over elements
                     * of `collection` from right to left.
                     *
                     * @static
                     * @memberOf _
                     * @since 2.0.0
                     * @category Array
                     * @param {Array} array The array to inspect.
                     * @param {Function} [predicate=_.identity] The function invoked per iteration.
                     * @param {number} [fromIndex=array.length-1] The index to search from.
                     * @returns {number} Returns the index of the found element, else `-1`.
                     * @example
                     *
                     * var users = [
                     *   { 'user': 'barney',  'active': true },
                     *   { 'user': 'fred',    'active': false },
                     *   { 'user': 'pebbles', 'active': false }
                     * ];
                     *
                     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
                     * // => 2
                     *
                     * // The `_.matches` iteratee shorthand.
                     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
                     * // => 0
                     *
                     * // The `_.matchesProperty` iteratee shorthand.
                     * _.findLastIndex(users, ['active', false]);
                     * // => 2
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.findLastIndex(users, 'active');
                     * // => 0
                     */
                    function findLastIndex(array, predicate, fromIndex) {
                        var length = array == null ? 0 : array.length;
                        if (!length) {
                            return -1;
                        }
                        var index = length - 1;
                        if (fromIndex !== undefined) {
                            index = toInteger(fromIndex);
                            index = fromIndex < 0 ?
                                nativeMax(length + index, 0) :
                                nativeMin(index, length - 1);
                        }
                        return baseFindIndex(array, getIteratee(predicate, 3), index, true);
                    }

                    /**
                     * Flattens `array` a single level deep.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Array
                     * @param {Array} array The array to flatten.
                     * @returns {Array} Returns the new flattened array.
                     * @example
                     *
                     * _.flatten([1, [2, [3, [4]], 5]]);
                     * // => [1, 2, [3, [4]], 5]
                     */
                    function flatten(array) {
                        var length = array == null ? 0 : array.length;
                        return length ? baseFlatten(array, 1) : [];
                    }

                    /**
                     * Recursively flattens `array`.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Array
                     * @param {Array} array The array to flatten.
                     * @returns {Array} Returns the new flattened array.
                     * @example
                     *
                     * _.flattenDeep([1, [2, [3, [4]], 5]]);
                     * // => [1, 2, 3, 4, 5]
                     */
                    function flattenDeep(array) {
                        var length = array == null ? 0 : array.length;
                        return length ? baseFlatten(array, INFINITY) : [];
                    }

                    /**
                     * Recursively flatten `array` up to `depth` times.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.4.0
                     * @category Array
                     * @param {Array} array The array to flatten.
                     * @param {number} [depth=1] The maximum recursion depth.
                     * @returns {Array} Returns the new flattened array.
                     * @example
                     *
                     * var array = [1, [2, [3, [4]], 5]];
                     *
                     * _.flattenDepth(array, 1);
                     * // => [1, 2, [3, [4]], 5]
                     *
                     * _.flattenDepth(array, 2);
                     * // => [1, 2, 3, [4], 5]
                     */
                    function flattenDepth(array, depth) {
                        var length = array == null ? 0 : array.length;
                        if (!length) {
                            return [];
                        }
                        depth = depth === undefined ? 1 : toInteger(depth);
                        return baseFlatten(array, depth);
                    }

                    /**
                     * The inverse of `_.toPairs`; this method returns an object composed
                     * from key-value `pairs`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {Array} pairs The key-value pairs.
                     * @returns {Object} Returns the new object.
                     * @example
                     *
                     * _.fromPairs([['a', 1], ['b', 2]]);
                     * // => { 'a': 1, 'b': 2 }
                     */
                    function fromPairs(pairs) {
                        var index = -1,
                            length = pairs == null ? 0 : pairs.length,
                            result = {};

                        while (++index < length) {
                            var pair = pairs[index];
                            result[pair[0]] = pair[1];
                        }
                        return result;
                    }

                    /**
                     * Gets the first element of `array`.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @alias first
                     * @category Array
                     * @param {Array} array The array to query.
                     * @returns {*} Returns the first element of `array`.
                     * @example
                     *
                     * _.head([1, 2, 3]);
                     * // => 1
                     *
                     * _.head([]);
                     * // => undefined
                     */
                    function head(array) {
                        return (array && array.length) ? array[0] : undefined;
                    }

                    /**
                     * Gets the index at which the first occurrence of `value` is found in `array`
                     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                     * for equality comparisons. If `fromIndex` is negative, it's used as the
                     * offset from the end of `array`.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Array
                     * @param {Array} array The array to inspect.
                     * @param {*} value The value to search for.
                     * @param {number} [fromIndex=0] The index to search from.
                     * @returns {number} Returns the index of the matched value, else `-1`.
                     * @example
                     *
                     * _.indexOf([1, 2, 1, 2], 2);
                     * // => 1
                     *
                     * // Search from the `fromIndex`.
                     * _.indexOf([1, 2, 1, 2], 2, 2);
                     * // => 3
                     */
                    function indexOf(array, value, fromIndex) {
                        var length = array == null ? 0 : array.length;
                        if (!length) {
                            return -1;
                        }
                        var index = fromIndex == null ? 0 : toInteger(fromIndex);
                        if (index < 0) {
                            index = nativeMax(length + index, 0);
                        }
                        return baseIndexOf(array, value, index);
                    }

                    /**
                     * Gets all but the last element of `array`.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Array
                     * @param {Array} array The array to query.
                     * @returns {Array} Returns the slice of `array`.
                     * @example
                     *
                     * _.initial([1, 2, 3]);
                     * // => [1, 2]
                     */
                    function initial(array) {
                        var length = array == null ? 0 : array.length;
                        return length ? baseSlice(array, 0, -1) : [];
                    }

                    /**
                     * Creates an array of unique values that are included in all given arrays
                     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                     * for equality comparisons. The order and references of result values are
                     * determined by the first array.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Array
                     * @param {...Array} [arrays] The arrays to inspect.
                     * @returns {Array} Returns the new array of intersecting values.
                     * @example
                     *
                     * _.intersection([2, 1], [2, 3]);
                     * // => [2]
                     */
                    var intersection = baseRest(function(arrays) {
                        var mapped = arrayMap(arrays, castArrayLikeObject);
                        return (mapped.length && mapped[0] === arrays[0]) ?
                            baseIntersection(mapped) : [];
                    });

                    /**
                     * This method is like `_.intersection` except that it accepts `iteratee`
                     * which is invoked for each element of each `arrays` to generate the criterion
                     * by which they're compared. The order and references of result values are
                     * determined by the first array. The iteratee is invoked with one argument:
                     * (value).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {...Array} [arrays] The arrays to inspect.
                     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                     * @returns {Array} Returns the new array of intersecting values.
                     * @example
                     *
                     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
                     * // => [2.1]
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
                     * // => [{ 'x': 1 }]
                     */
                    var intersectionBy = baseRest(function(arrays) {
                        var iteratee = last(arrays),
                            mapped = arrayMap(arrays, castArrayLikeObject);

                        if (iteratee === last(mapped)) {
                            iteratee = undefined;
                        } else {
                            mapped.pop();
                        }
                        return (mapped.length && mapped[0] === arrays[0]) ?
                            baseIntersection(mapped, getIteratee(iteratee, 2)) : [];
                    });

                    /**
                     * This method is like `_.intersection` except that it accepts `comparator`
                     * which is invoked to compare elements of `arrays`. The order and references
                     * of result values are determined by the first array. The comparator is
                     * invoked with two arguments: (arrVal, othVal).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {...Array} [arrays] The arrays to inspect.
                     * @param {Function} [comparator] The comparator invoked per element.
                     * @returns {Array} Returns the new array of intersecting values.
                     * @example
                     *
                     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
                     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
                     *
                     * _.intersectionWith(objects, others, _.isEqual);
                     * // => [{ 'x': 1, 'y': 2 }]
                     */
                    var intersectionWith = baseRest(function(arrays) {
                        var comparator = last(arrays),
                            mapped = arrayMap(arrays, castArrayLikeObject);

                        comparator = typeof comparator == 'function' ? comparator : undefined;
                        if (comparator) {
                            mapped.pop();
                        }
                        return (mapped.length && mapped[0] === arrays[0]) ?
                            baseIntersection(mapped, undefined, comparator) : [];
                    });

                    /**
                     * Converts all elements in `array` into a string separated by `separator`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {Array} array The array to convert.
                     * @param {string} [separator=','] The element separator.
                     * @returns {string} Returns the joined string.
                     * @example
                     *
                     * _.join(['a', 'b', 'c'], '~');
                     * // => 'a~b~c'
                     */
                    function join(array, separator) {
                        return array == null ? '' : nativeJoin.call(array, separator);
                    }

                    /**
                     * Gets the last element of `array`.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Array
                     * @param {Array} array The array to query.
                     * @returns {*} Returns the last element of `array`.
                     * @example
                     *
                     * _.last([1, 2, 3]);
                     * // => 3
                     */
                    function last(array) {
                        var length = array == null ? 0 : array.length;
                        return length ? array[length - 1] : undefined;
                    }

                    /**
                     * This method is like `_.indexOf` except that it iterates over elements of
                     * `array` from right to left.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Array
                     * @param {Array} array The array to inspect.
                     * @param {*} value The value to search for.
                     * @param {number} [fromIndex=array.length-1] The index to search from.
                     * @returns {number} Returns the index of the matched value, else `-1`.
                     * @example
                     *
                     * _.lastIndexOf([1, 2, 1, 2], 2);
                     * // => 3
                     *
                     * // Search from the `fromIndex`.
                     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
                     * // => 1
                     */
                    function lastIndexOf(array, value, fromIndex) {
                        var length = array == null ? 0 : array.length;
                        if (!length) {
                            return -1;
                        }
                        var index = length;
                        if (fromIndex !== undefined) {
                            index = toInteger(fromIndex);
                            index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
                        }
                        return value === value ?
                            strictLastIndexOf(array, value, index) :
                            baseFindIndex(array, baseIsNaN, index, true);
                    }

                    /**
                     * Gets the element at index `n` of `array`. If `n` is negative, the nth
                     * element from the end is returned.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.11.0
                     * @category Array
                     * @param {Array} array The array to query.
                     * @param {number} [n=0] The index of the element to return.
                     * @returns {*} Returns the nth element of `array`.
                     * @example
                     *
                     * var array = ['a', 'b', 'c', 'd'];
                     *
                     * _.nth(array, 1);
                     * // => 'b'
                     *
                     * _.nth(array, -2);
                     * // => 'c';
                     */
                    function nth(array, n) {
                        return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
                    }

                    /**
                     * Removes all given values from `array` using
                     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                     * for equality comparisons.
                     *
                     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
                     * to remove elements from an array by predicate.
                     *
                     * @static
                     * @memberOf _
                     * @since 2.0.0
                     * @category Array
                     * @param {Array} array The array to modify.
                     * @param {...*} [values] The values to remove.
                     * @returns {Array} Returns `array`.
                     * @example
                     *
                     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
                     *
                     * _.pull(array, 'a', 'c');
                     * console.log(array);
                     * // => ['b', 'b']
                     */
                    var pull = baseRest(pullAll);

                    /**
                     * This method is like `_.pull` except that it accepts an array of values to remove.
                     *
                     * **Note:** Unlike `_.difference`, this method mutates `array`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {Array} array The array to modify.
                     * @param {Array} values The values to remove.
                     * @returns {Array} Returns `array`.
                     * @example
                     *
                     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
                     *
                     * _.pullAll(array, ['a', 'c']);
                     * console.log(array);
                     * // => ['b', 'b']
                     */
                    function pullAll(array, values) {
                        return (array && array.length && values && values.length) ?
                            basePullAll(array, values) :
                            array;
                    }

                    /**
                     * This method is like `_.pullAll` except that it accepts `iteratee` which is
                     * invoked for each element of `array` and `values` to generate the criterion
                     * by which they're compared. The iteratee is invoked with one argument: (value).
                     *
                     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {Array} array The array to modify.
                     * @param {Array} values The values to remove.
                     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                     * @returns {Array} Returns `array`.
                     * @example
                     *
                     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
                     *
                     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
                     * console.log(array);
                     * // => [{ 'x': 2 }]
                     */
                    function pullAllBy(array, values, iteratee) {
                        return (array && array.length && values && values.length) ?
                            basePullAll(array, values, getIteratee(iteratee, 2)) :
                            array;
                    }

                    /**
                     * This method is like `_.pullAll` except that it accepts `comparator` which
                     * is invoked to compare elements of `array` to `values`. The comparator is
                     * invoked with two arguments: (arrVal, othVal).
                     *
                     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.6.0
                     * @category Array
                     * @param {Array} array The array to modify.
                     * @param {Array} values The values to remove.
                     * @param {Function} [comparator] The comparator invoked per element.
                     * @returns {Array} Returns `array`.
                     * @example
                     *
                     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
                     *
                     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
                     * console.log(array);
                     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
                     */
                    function pullAllWith(array, values, comparator) {
                        return (array && array.length && values && values.length) ?
                            basePullAll(array, values, undefined, comparator) :
                            array;
                    }

                    /**
                     * Removes elements from `array` corresponding to `indexes` and returns an
                     * array of removed elements.
                     *
                     * **Note:** Unlike `_.at`, this method mutates `array`.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Array
                     * @param {Array} array The array to modify.
                     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
                     * @returns {Array} Returns the new array of removed elements.
                     * @example
                     *
                     * var array = ['a', 'b', 'c', 'd'];
                     * var pulled = _.pullAt(array, [1, 3]);
                     *
                     * console.log(array);
                     * // => ['a', 'c']
                     *
                     * console.log(pulled);
                     * // => ['b', 'd']
                     */
                    var pullAt = flatRest(function(array, indexes) {
                        var length = array == null ? 0 : array.length,
                            result = baseAt(array, indexes);

                        basePullAt(array, arrayMap(indexes, function(index) {
                            return isIndex(index, length) ? +index : index;
                        }).sort(compareAscending));

                        return result;
                    });

                    /**
                     * Removes all elements from `array` that `predicate` returns truthy for
                     * and returns an array of the removed elements. The predicate is invoked
                     * with three arguments: (value, index, array).
                     *
                     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
                     * to pull elements from an array by value.
                     *
                     * @static
                     * @memberOf _
                     * @since 2.0.0
                     * @category Array
                     * @param {Array} array The array to modify.
                     * @param {Function} [predicate=_.identity] The function invoked per iteration.
                     * @returns {Array} Returns the new array of removed elements.
                     * @example
                     *
                     * var array = [1, 2, 3, 4];
                     * var evens = _.remove(array, function(n) {
                     *   return n % 2 == 0;
                     * });
                     *
                     * console.log(array);
                     * // => [1, 3]
                     *
                     * console.log(evens);
                     * // => [2, 4]
                     */
                    function remove(array, predicate) {
                        var result = [];
                        if (!(array && array.length)) {
                            return result;
                        }
                        var index = -1,
                            indexes = [],
                            length = array.length;

                        predicate = getIteratee(predicate, 3);
                        while (++index < length) {
                            var value = array[index];
                            if (predicate(value, index, array)) {
                                result.push(value);
                                indexes.push(index);
                            }
                        }
                        basePullAt(array, indexes);
                        return result;
                    }

                    /**
                     * Reverses `array` so that the first element becomes the last, the second
                     * element becomes the second to last, and so on.
                     *
                     * **Note:** This method mutates `array` and is based on
                     * [`Array#reverse`](https://mdn.io/Array/reverse).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {Array} array The array to modify.
                     * @returns {Array} Returns `array`.
                     * @example
                     *
                     * var array = [1, 2, 3];
                     *
                     * _.reverse(array);
                     * // => [3, 2, 1]
                     *
                     * console.log(array);
                     * // => [3, 2, 1]
                     */
                    function reverse(array) {
                        return array == null ? array : nativeReverse.call(array);
                    }

                    /**
                     * Creates a slice of `array` from `start` up to, but not including, `end`.
                     *
                     * **Note:** This method is used instead of
                     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
                     * returned.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Array
                     * @param {Array} array The array to slice.
                     * @param {number} [start=0] The start position.
                     * @param {number} [end=array.length] The end position.
                     * @returns {Array} Returns the slice of `array`.
                     */
                    function slice(array, start, end) {
                        var length = array == null ? 0 : array.length;
                        if (!length) {
                            return [];
                        }
                        if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
                            start = 0;
                            end = length;
                        } else {
                            start = start == null ? 0 : toInteger(start);
                            end = end === undefined ? length : toInteger(end);
                        }
                        return baseSlice(array, start, end);
                    }

                    /**
                     * Uses a binary search to determine the lowest index at which `value`
                     * should be inserted into `array` in order to maintain its sort order.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Array
                     * @param {Array} array The sorted array to inspect.
                     * @param {*} value The value to evaluate.
                     * @returns {number} Returns the index at which `value` should be inserted
                     *  into `array`.
                     * @example
                     *
                     * _.sortedIndex([30, 50], 40);
                     * // => 1
                     */
                    function sortedIndex(array, value) {
                        return baseSortedIndex(array, value);
                    }

                    /**
                     * This method is like `_.sortedIndex` except that it accepts `iteratee`
                     * which is invoked for `value` and each element of `array` to compute their
                     * sort ranking. The iteratee is invoked with one argument: (value).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {Array} array The sorted array to inspect.
                     * @param {*} value The value to evaluate.
                     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                     * @returns {number} Returns the index at which `value` should be inserted
                     *  into `array`.
                     * @example
                     *
                     * var objects = [{ 'x': 4 }, { 'x': 5 }];
                     *
                     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
                     * // => 0
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
                     * // => 0
                     */
                    function sortedIndexBy(array, value, iteratee) {
                        return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
                    }

                    /**
                     * This method is like `_.indexOf` except that it performs a binary
                     * search on a sorted `array`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {Array} array The array to inspect.
                     * @param {*} value The value to search for.
                     * @returns {number} Returns the index of the matched value, else `-1`.
                     * @example
                     *
                     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
                     * // => 1
                     */
                    function sortedIndexOf(array, value) {
                        var length = array == null ? 0 : array.length;
                        if (length) {
                            var index = baseSortedIndex(array, value);
                            if (index < length && eq(array[index], value)) {
                                return index;
                            }
                        }
                        return -1;
                    }

                    /**
                     * This method is like `_.sortedIndex` except that it returns the highest
                     * index at which `value` should be inserted into `array` in order to
                     * maintain its sort order.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Array
                     * @param {Array} array The sorted array to inspect.
                     * @param {*} value The value to evaluate.
                     * @returns {number} Returns the index at which `value` should be inserted
                     *  into `array`.
                     * @example
                     *
                     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
                     * // => 4
                     */
                    function sortedLastIndex(array, value) {
                        return baseSortedIndex(array, value, true);
                    }

                    /**
                     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
                     * which is invoked for `value` and each element of `array` to compute their
                     * sort ranking. The iteratee is invoked with one argument: (value).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {Array} array The sorted array to inspect.
                     * @param {*} value The value to evaluate.
                     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                     * @returns {number} Returns the index at which `value` should be inserted
                     *  into `array`.
                     * @example
                     *
                     * var objects = [{ 'x': 4 }, { 'x': 5 }];
                     *
                     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
                     * // => 1
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
                     * // => 1
                     */
                    function sortedLastIndexBy(array, value, iteratee) {
                        return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
                    }

                    /**
                     * This method is like `_.lastIndexOf` except that it performs a binary
                     * search on a sorted `array`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {Array} array The array to inspect.
                     * @param {*} value The value to search for.
                     * @returns {number} Returns the index of the matched value, else `-1`.
                     * @example
                     *
                     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
                     * // => 3
                     */
                    function sortedLastIndexOf(array, value) {
                        var length = array == null ? 0 : array.length;
                        if (length) {
                            var index = baseSortedIndex(array, value, true) - 1;
                            if (eq(array[index], value)) {
                                return index;
                            }
                        }
                        return -1;
                    }

                    /**
                     * This method is like `_.uniq` except that it's designed and optimized
                     * for sorted arrays.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {Array} array The array to inspect.
                     * @returns {Array} Returns the new duplicate free array.
                     * @example
                     *
                     * _.sortedUniq([1, 1, 2]);
                     * // => [1, 2]
                     */
                    function sortedUniq(array) {
                        return (array && array.length) ?
                            baseSortedUniq(array) : [];
                    }

                    /**
                     * This method is like `_.uniqBy` except that it's designed and optimized
                     * for sorted arrays.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {Array} array The array to inspect.
                     * @param {Function} [iteratee] The iteratee invoked per element.
                     * @returns {Array} Returns the new duplicate free array.
                     * @example
                     *
                     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
                     * // => [1.1, 2.3]
                     */
                    function sortedUniqBy(array, iteratee) {
                        return (array && array.length) ?
                            baseSortedUniq(array, getIteratee(iteratee, 2)) : [];
                    }

                    /**
                     * Gets all but the first element of `array`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {Array} array The array to query.
                     * @returns {Array} Returns the slice of `array`.
                     * @example
                     *
                     * _.tail([1, 2, 3]);
                     * // => [2, 3]
                     */
                    function tail(array) {
                        var length = array == null ? 0 : array.length;
                        return length ? baseSlice(array, 1, length) : [];
                    }

                    /**
                     * Creates a slice of `array` with `n` elements taken from the beginning.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Array
                     * @param {Array} array The array to query.
                     * @param {number} [n=1] The number of elements to take.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                     * @returns {Array} Returns the slice of `array`.
                     * @example
                     *
                     * _.take([1, 2, 3]);
                     * // => [1]
                     *
                     * _.take([1, 2, 3], 2);
                     * // => [1, 2]
                     *
                     * _.take([1, 2, 3], 5);
                     * // => [1, 2, 3]
                     *
                     * _.take([1, 2, 3], 0);
                     * // => []
                     */
                    function take(array, n, guard) {
                        if (!(array && array.length)) {
                            return [];
                        }
                        n = (guard || n === undefined) ? 1 : toInteger(n);
                        return baseSlice(array, 0, n < 0 ? 0 : n);
                    }

                    /**
                     * Creates a slice of `array` with `n` elements taken from the end.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Array
                     * @param {Array} array The array to query.
                     * @param {number} [n=1] The number of elements to take.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                     * @returns {Array} Returns the slice of `array`.
                     * @example
                     *
                     * _.takeRight([1, 2, 3]);
                     * // => [3]
                     *
                     * _.takeRight([1, 2, 3], 2);
                     * // => [2, 3]
                     *
                     * _.takeRight([1, 2, 3], 5);
                     * // => [1, 2, 3]
                     *
                     * _.takeRight([1, 2, 3], 0);
                     * // => []
                     */
                    function takeRight(array, n, guard) {
                        var length = array == null ? 0 : array.length;
                        if (!length) {
                            return [];
                        }
                        n = (guard || n === undefined) ? 1 : toInteger(n);
                        n = length - n;
                        return baseSlice(array, n < 0 ? 0 : n, length);
                    }

                    /**
                     * Creates a slice of `array` with elements taken from the end. Elements are
                     * taken until `predicate` returns falsey. The predicate is invoked with
                     * three arguments: (value, index, array).
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Array
                     * @param {Array} array The array to query.
                     * @param {Function} [predicate=_.identity] The function invoked per iteration.
                     * @returns {Array} Returns the slice of `array`.
                     * @example
                     *
                     * var users = [
                     *   { 'user': 'barney',  'active': true },
                     *   { 'user': 'fred',    'active': false },
                     *   { 'user': 'pebbles', 'active': false }
                     * ];
                     *
                     * _.takeRightWhile(users, function(o) { return !o.active; });
                     * // => objects for ['fred', 'pebbles']
                     *
                     * // The `_.matches` iteratee shorthand.
                     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
                     * // => objects for ['pebbles']
                     *
                     * // The `_.matchesProperty` iteratee shorthand.
                     * _.takeRightWhile(users, ['active', false]);
                     * // => objects for ['fred', 'pebbles']
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.takeRightWhile(users, 'active');
                     * // => []
                     */
                    function takeRightWhile(array, predicate) {
                        return (array && array.length) ?
                            baseWhile(array, getIteratee(predicate, 3), false, true) : [];
                    }

                    /**
                     * Creates a slice of `array` with elements taken from the beginning. Elements
                     * are taken until `predicate` returns falsey. The predicate is invoked with
                     * three arguments: (value, index, array).
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Array
                     * @param {Array} array The array to query.
                     * @param {Function} [predicate=_.identity] The function invoked per iteration.
                     * @returns {Array} Returns the slice of `array`.
                     * @example
                     *
                     * var users = [
                     *   { 'user': 'barney',  'active': false },
                     *   { 'user': 'fred',    'active': false },
                     *   { 'user': 'pebbles', 'active': true }
                     * ];
                     *
                     * _.takeWhile(users, function(o) { return !o.active; });
                     * // => objects for ['barney', 'fred']
                     *
                     * // The `_.matches` iteratee shorthand.
                     * _.takeWhile(users, { 'user': 'barney', 'active': false });
                     * // => objects for ['barney']
                     *
                     * // The `_.matchesProperty` iteratee shorthand.
                     * _.takeWhile(users, ['active', false]);
                     * // => objects for ['barney', 'fred']
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.takeWhile(users, 'active');
                     * // => []
                     */
                    function takeWhile(array, predicate) {
                        return (array && array.length) ?
                            baseWhile(array, getIteratee(predicate, 3)) : [];
                    }

                    /**
                     * Creates an array of unique values, in order, from all given arrays using
                     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                     * for equality comparisons.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Array
                     * @param {...Array} [arrays] The arrays to inspect.
                     * @returns {Array} Returns the new array of combined values.
                     * @example
                     *
                     * _.union([2], [1, 2]);
                     * // => [2, 1]
                     */
                    var union = baseRest(function(arrays) {
                        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
                    });

                    /**
                     * This method is like `_.union` except that it accepts `iteratee` which is
                     * invoked for each element of each `arrays` to generate the criterion by
                     * which uniqueness is computed. Result values are chosen from the first
                     * array in which the value occurs. The iteratee is invoked with one argument:
                     * (value).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {...Array} [arrays] The arrays to inspect.
                     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                     * @returns {Array} Returns the new array of combined values.
                     * @example
                     *
                     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
                     * // => [2.1, 1.2]
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
                     * // => [{ 'x': 1 }, { 'x': 2 }]
                     */
                    var unionBy = baseRest(function(arrays) {
                        var iteratee = last(arrays);
                        if (isArrayLikeObject(iteratee)) {
                            iteratee = undefined;
                        }
                        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
                    });

                    /**
                     * This method is like `_.union` except that it accepts `comparator` which
                     * is invoked to compare elements of `arrays`. Result values are chosen from
                     * the first array in which the value occurs. The comparator is invoked
                     * with two arguments: (arrVal, othVal).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {...Array} [arrays] The arrays to inspect.
                     * @param {Function} [comparator] The comparator invoked per element.
                     * @returns {Array} Returns the new array of combined values.
                     * @example
                     *
                     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
                     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
                     *
                     * _.unionWith(objects, others, _.isEqual);
                     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
                     */
                    var unionWith = baseRest(function(arrays) {
                        var comparator = last(arrays);
                        comparator = typeof comparator == 'function' ? comparator : undefined;
                        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
                    });

                    /**
                     * Creates a duplicate-free version of an array, using
                     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                     * for equality comparisons, in which only the first occurrence of each element
                     * is kept. The order of result values is determined by the order they occur
                     * in the array.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Array
                     * @param {Array} array The array to inspect.
                     * @returns {Array} Returns the new duplicate free array.
                     * @example
                     *
                     * _.uniq([2, 1, 2]);
                     * // => [2, 1]
                     */
                    function uniq(array) {
                        return (array && array.length) ? baseUniq(array) : [];
                    }

                    /**
                     * This method is like `_.uniq` except that it accepts `iteratee` which is
                     * invoked for each element in `array` to generate the criterion by which
                     * uniqueness is computed. The order of result values is determined by the
                     * order they occur in the array. The iteratee is invoked with one argument:
                     * (value).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {Array} array The array to inspect.
                     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                     * @returns {Array} Returns the new duplicate free array.
                     * @example
                     *
                     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
                     * // => [2.1, 1.2]
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
                     * // => [{ 'x': 1 }, { 'x': 2 }]
                     */
                    function uniqBy(array, iteratee) {
                        return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
                    }

                    /**
                     * This method is like `_.uniq` except that it accepts `comparator` which
                     * is invoked to compare elements of `array`. The order of result values is
                     * determined by the order they occur in the array.The comparator is invoked
                     * with two arguments: (arrVal, othVal).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {Array} array The array to inspect.
                     * @param {Function} [comparator] The comparator invoked per element.
                     * @returns {Array} Returns the new duplicate free array.
                     * @example
                     *
                     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
                     *
                     * _.uniqWith(objects, _.isEqual);
                     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
                     */
                    function uniqWith(array, comparator) {
                        comparator = typeof comparator == 'function' ? comparator : undefined;
                        return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
                    }

                    /**
                     * This method is like `_.zip` except that it accepts an array of grouped
                     * elements and creates an array regrouping the elements to their pre-zip
                     * configuration.
                     *
                     * @static
                     * @memberOf _
                     * @since 1.2.0
                     * @category Array
                     * @param {Array} array The array of grouped elements to process.
                     * @returns {Array} Returns the new array of regrouped elements.
                     * @example
                     *
                     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
                     * // => [['a', 1, true], ['b', 2, false]]
                     *
                     * _.unzip(zipped);
                     * // => [['a', 'b'], [1, 2], [true, false]]
                     */
                    function unzip(array) {
                        if (!(array && array.length)) {
                            return [];
                        }
                        var length = 0;
                        array = arrayFilter(array, function(group) {
                            if (isArrayLikeObject(group)) {
                                length = nativeMax(group.length, length);
                                return true;
                            }
                        });
                        return baseTimes(length, function(index) {
                            return arrayMap(array, baseProperty(index));
                        });
                    }

                    /**
                     * This method is like `_.unzip` except that it accepts `iteratee` to specify
                     * how regrouped values should be combined. The iteratee is invoked with the
                     * elements of each group: (...group).
                     *
                     * @static
                     * @memberOf _
                     * @since 3.8.0
                     * @category Array
                     * @param {Array} array The array of grouped elements to process.
                     * @param {Function} [iteratee=_.identity] The function to combine
                     *  regrouped values.
                     * @returns {Array} Returns the new array of regrouped elements.
                     * @example
                     *
                     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
                     * // => [[1, 10, 100], [2, 20, 200]]
                     *
                     * _.unzipWith(zipped, _.add);
                     * // => [3, 30, 300]
                     */
                    function unzipWith(array, iteratee) {
                        if (!(array && array.length)) {
                            return [];
                        }
                        var result = unzip(array);
                        if (iteratee == null) {
                            return result;
                        }
                        return arrayMap(result, function(group) {
                            return apply(iteratee, undefined, group);
                        });
                    }

                    /**
                     * Creates an array excluding all given values using
                     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                     * for equality comparisons.
                     *
                     * **Note:** Unlike `_.pull`, this method returns a new array.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Array
                     * @param {Array} array The array to inspect.
                     * @param {...*} [values] The values to exclude.
                     * @returns {Array} Returns the new array of filtered values.
                     * @see _.difference, _.xor
                     * @example
                     *
                     * _.without([2, 1, 2, 3], 1, 2);
                     * // => [3]
                     */
                    var without = baseRest(function(array, values) {
                        return isArrayLikeObject(array) ?
                            baseDifference(array, values) : [];
                    });

                    /**
                     * Creates an array of unique values that is the
                     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
                     * of the given arrays. The order of result values is determined by the order
                     * they occur in the arrays.
                     *
                     * @static
                     * @memberOf _
                     * @since 2.4.0
                     * @category Array
                     * @param {...Array} [arrays] The arrays to inspect.
                     * @returns {Array} Returns the new array of filtered values.
                     * @see _.difference, _.without
                     * @example
                     *
                     * _.xor([2, 1], [2, 3]);
                     * // => [1, 3]
                     */
                    var xor = baseRest(function(arrays) {
                        return baseXor(arrayFilter(arrays, isArrayLikeObject));
                    });

                    /**
                     * This method is like `_.xor` except that it accepts `iteratee` which is
                     * invoked for each element of each `arrays` to generate the criterion by
                     * which by which they're compared. The order of result values is determined
                     * by the order they occur in the arrays. The iteratee is invoked with one
                     * argument: (value).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {...Array} [arrays] The arrays to inspect.
                     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                     * @returns {Array} Returns the new array of filtered values.
                     * @example
                     *
                     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
                     * // => [1.2, 3.4]
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
                     * // => [{ 'x': 2 }]
                     */
                    var xorBy = baseRest(function(arrays) {
                        var iteratee = last(arrays);
                        if (isArrayLikeObject(iteratee)) {
                            iteratee = undefined;
                        }
                        return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
                    });

                    /**
                     * This method is like `_.xor` except that it accepts `comparator` which is
                     * invoked to compare elements of `arrays`. The order of result values is
                     * determined by the order they occur in the arrays. The comparator is invoked
                     * with two arguments: (arrVal, othVal).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {...Array} [arrays] The arrays to inspect.
                     * @param {Function} [comparator] The comparator invoked per element.
                     * @returns {Array} Returns the new array of filtered values.
                     * @example
                     *
                     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
                     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
                     *
                     * _.xorWith(objects, others, _.isEqual);
                     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
                     */
                    var xorWith = baseRest(function(arrays) {
                        var comparator = last(arrays);
                        comparator = typeof comparator == 'function' ? comparator : undefined;
                        return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
                    });

                    /**
                     * Creates an array of grouped elements, the first of which contains the
                     * first elements of the given arrays, the second of which contains the
                     * second elements of the given arrays, and so on.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Array
                     * @param {...Array} [arrays] The arrays to process.
                     * @returns {Array} Returns the new array of grouped elements.
                     * @example
                     *
                     * _.zip(['a', 'b'], [1, 2], [true, false]);
                     * // => [['a', 1, true], ['b', 2, false]]
                     */
                    var zip = baseRest(unzip);

                    /**
                     * This method is like `_.fromPairs` except that it accepts two arrays,
                     * one of property identifiers and one of corresponding values.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.4.0
                     * @category Array
                     * @param {Array} [props=[]] The property identifiers.
                     * @param {Array} [values=[]] The property values.
                     * @returns {Object} Returns the new object.
                     * @example
                     *
                     * _.zipObject(['a', 'b'], [1, 2]);
                     * // => { 'a': 1, 'b': 2 }
                     */
                    function zipObject(props, values) {
                        return baseZipObject(props || [], values || [], assignValue);
                    }

                    /**
                     * This method is like `_.zipObject` except that it supports property paths.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.1.0
                     * @category Array
                     * @param {Array} [props=[]] The property identifiers.
                     * @param {Array} [values=[]] The property values.
                     * @returns {Object} Returns the new object.
                     * @example
                     *
                     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
                     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
                     */
                    function zipObjectDeep(props, values) {
                        return baseZipObject(props || [], values || [], baseSet);
                    }

                    /**
                     * This method is like `_.zip` except that it accepts `iteratee` to specify
                     * how grouped values should be combined. The iteratee is invoked with the
                     * elements of each group: (...group).
                     *
                     * @static
                     * @memberOf _
                     * @since 3.8.0
                     * @category Array
                     * @param {...Array} [arrays] The arrays to process.
                     * @param {Function} [iteratee=_.identity] The function to combine
                     *  grouped values.
                     * @returns {Array} Returns the new array of grouped elements.
                     * @example
                     *
                     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
                     *   return a + b + c;
                     * });
                     * // => [111, 222]
                     */
                    var zipWith = baseRest(function(arrays) {
                        var length = arrays.length,
                            iteratee = length > 1 ? arrays[length - 1] : undefined;

                        iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
                        return unzipWith(arrays, iteratee);
                    });

                    /*------------------------------------------------------------------------*/

                    /**
                     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
                     * chain sequences enabled. The result of such sequences must be unwrapped
                     * with `_#value`.
                     *
                     * @static
                     * @memberOf _
                     * @since 1.3.0
                     * @category Seq
                     * @param {*} value The value to wrap.
                     * @returns {Object} Returns the new `lodash` wrapper instance.
                     * @example
                     *
                     * var users = [
                     *   { 'user': 'barney',  'age': 36 },
                     *   { 'user': 'fred',    'age': 40 },
                     *   { 'user': 'pebbles', 'age': 1 }
                     * ];
                     *
                     * var youngest = _
                     *   .chain(users)
                     *   .sortBy('age')
                     *   .map(function(o) {
                     *     return o.user + ' is ' + o.age;
                     *   })
                     *   .head()
                     *   .value();
                     * // => 'pebbles is 1'
                     */
                    function chain(value) {
                        var result = lodash(value);
                        result.__chain__ = true;
                        return result;
                    }

                    /**
                     * This method invokes `interceptor` and returns `value`. The interceptor
                     * is invoked with one argument; (value). The purpose of this method is to
                     * "tap into" a method chain sequence in order to modify intermediate results.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Seq
                     * @param {*} value The value to provide to `interceptor`.
                     * @param {Function} interceptor The function to invoke.
                     * @returns {*} Returns `value`.
                     * @example
                     *
                     * _([1, 2, 3])
                     *  .tap(function(array) {
                     *    // Mutate input array.
                     *    array.pop();
                     *  })
                     *  .reverse()
                     *  .value();
                     * // => [2, 1]
                     */
                    function tap(value, interceptor) {
                        interceptor(value);
                        return value;
                    }

                    /**
                     * This method is like `_.tap` except that it returns the result of `interceptor`.
                     * The purpose of this method is to "pass thru" values replacing intermediate
                     * results in a method chain sequence.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Seq
                     * @param {*} value The value to provide to `interceptor`.
                     * @param {Function} interceptor The function to invoke.
                     * @returns {*} Returns the result of `interceptor`.
                     * @example
                     *
                     * _('  abc  ')
                     *  .chain()
                     *  .trim()
                     *  .thru(function(value) {
                     *    return [value];
                     *  })
                     *  .value();
                     * // => ['abc']
                     */
                    function thru(value, interceptor) {
                        return interceptor(value);
                    }

                    /**
                     * This method is the wrapper version of `_.at`.
                     *
                     * @name at
                     * @memberOf _
                     * @since 1.0.0
                     * @category Seq
                     * @param {...(string|string[])} [paths] The property paths to pick.
                     * @returns {Object} Returns the new `lodash` wrapper instance.
                     * @example
                     *
                     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
                     *
                     * _(object).at(['a[0].b.c', 'a[1]']).value();
                     * // => [3, 4]
                     */
                    var wrapperAt = flatRest(function(paths) {
                        var length = paths.length,
                            start = length ? paths[0] : 0,
                            value = this.__wrapped__,
                            interceptor = function(object) { return baseAt(object, paths); };

                        if (length > 1 || this.__actions__.length ||
                            !(value instanceof LazyWrapper) || !isIndex(start)) {
                            return this.thru(interceptor);
                        }
                        value = value.slice(start, +start + (length ? 1 : 0));
                        value.__actions__.push({
                            'func': thru,
                            'args': [interceptor],
                            'thisArg': undefined
                        });
                        return new LodashWrapper(value, this.__chain__).thru(function(array) {
                            if (length && !array.length) {
                                array.push(undefined);
                            }
                            return array;
                        });
                    });

                    /**
                     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
                     *
                     * @name chain
                     * @memberOf _
                     * @since 0.1.0
                     * @category Seq
                     * @returns {Object} Returns the new `lodash` wrapper instance.
                     * @example
                     *
                     * var users = [
                     *   { 'user': 'barney', 'age': 36 },
                     *   { 'user': 'fred',   'age': 40 }
                     * ];
                     *
                     * // A sequence without explicit chaining.
                     * _(users).head();
                     * // => { 'user': 'barney', 'age': 36 }
                     *
                     * // A sequence with explicit chaining.
                     * _(users)
                     *   .chain()
                     *   .head()
                     *   .pick('user')
                     *   .value();
                     * // => { 'user': 'barney' }
                     */
                    function wrapperChain() {
                        return chain(this);
                    }

                    /**
                     * Executes the chain sequence and returns the wrapped result.
                     *
                     * @name commit
                     * @memberOf _
                     * @since 3.2.0
                     * @category Seq
                     * @returns {Object} Returns the new `lodash` wrapper instance.
                     * @example
                     *
                     * var array = [1, 2];
                     * var wrapped = _(array).push(3);
                     *
                     * console.log(array);
                     * // => [1, 2]
                     *
                     * wrapped = wrapped.commit();
                     * console.log(array);
                     * // => [1, 2, 3]
                     *
                     * wrapped.last();
                     * // => 3
                     *
                     * console.log(array);
                     * // => [1, 2, 3]
                     */
                    function wrapperCommit() {
                        return new LodashWrapper(this.value(), this.__chain__);
                    }

                    /**
                     * Gets the next value on a wrapped object following the
                     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
                     *
                     * @name next
                     * @memberOf _
                     * @since 4.0.0
                     * @category Seq
                     * @returns {Object} Returns the next iterator value.
                     * @example
                     *
                     * var wrapped = _([1, 2]);
                     *
                     * wrapped.next();
                     * // => { 'done': false, 'value': 1 }
                     *
                     * wrapped.next();
                     * // => { 'done': false, 'value': 2 }
                     *
                     * wrapped.next();
                     * // => { 'done': true, 'value': undefined }
                     */
                    function wrapperNext() {
                        if (this.__values__ === undefined) {
                            this.__values__ = toArray(this.value());
                        }
                        var done = this.__index__ >= this.__values__.length,
                            value = done ? undefined : this.__values__[this.__index__++];

                        return { 'done': done, 'value': value };
                    }

                    /**
                     * Enables the wrapper to be iterable.
                     *
                     * @name Symbol.iterator
                     * @memberOf _
                     * @since 4.0.0
                     * @category Seq
                     * @returns {Object} Returns the wrapper object.
                     * @example
                     *
                     * var wrapped = _([1, 2]);
                     *
                     * wrapped[Symbol.iterator]() === wrapped;
                     * // => true
                     *
                     * Array.from(wrapped);
                     * // => [1, 2]
                     */
                    function wrapperToIterator() {
                        return this;
                    }

                    /**
                     * Creates a clone of the chain sequence planting `value` as the wrapped value.
                     *
                     * @name plant
                     * @memberOf _
                     * @since 3.2.0
                     * @category Seq
                     * @param {*} value The value to plant.
                     * @returns {Object} Returns the new `lodash` wrapper instance.
                     * @example
                     *
                     * function square(n) {
                     *   return n * n;
                     * }
                     *
                     * var wrapped = _([1, 2]).map(square);
                     * var other = wrapped.plant([3, 4]);
                     *
                     * other.value();
                     * // => [9, 16]
                     *
                     * wrapped.value();
                     * // => [1, 4]
                     */
                    function wrapperPlant(value) {
                        var result,
                            parent = this;

                        while (parent instanceof baseLodash) {
                            var clone = wrapperClone(parent);
                            clone.__index__ = 0;
                            clone.__values__ = undefined;
                            if (result) {
                                previous.__wrapped__ = clone;
                            } else {
                                result = clone;
                            }
                            var previous = clone;
                            parent = parent.__wrapped__;
                        }
                        previous.__wrapped__ = value;
                        return result;
                    }

                    /**
                     * This method is the wrapper version of `_.reverse`.
                     *
                     * **Note:** This method mutates the wrapped array.
                     *
                     * @name reverse
                     * @memberOf _
                     * @since 0.1.0
                     * @category Seq
                     * @returns {Object} Returns the new `lodash` wrapper instance.
                     * @example
                     *
                     * var array = [1, 2, 3];
                     *
                     * _(array).reverse().value()
                     * // => [3, 2, 1]
                     *
                     * console.log(array);
                     * // => [3, 2, 1]
                     */
                    function wrapperReverse() {
                        var value = this.__wrapped__;
                        if (value instanceof LazyWrapper) {
                            var wrapped = value;
                            if (this.__actions__.length) {
                                wrapped = new LazyWrapper(this);
                            }
                            wrapped = wrapped.reverse();
                            wrapped.__actions__.push({
                                'func': thru,
                                'args': [reverse],
                                'thisArg': undefined
                            });
                            return new LodashWrapper(wrapped, this.__chain__);
                        }
                        return this.thru(reverse);
                    }

                    /**
                     * Executes the chain sequence to resolve the unwrapped value.
                     *
                     * @name value
                     * @memberOf _
                     * @since 0.1.0
                     * @alias toJSON, valueOf
                     * @category Seq
                     * @returns {*} Returns the resolved unwrapped value.
                     * @example
                     *
                     * _([1, 2, 3]).value();
                     * // => [1, 2, 3]
                     */
                    function wrapperValue() {
                        return baseWrapperValue(this.__wrapped__, this.__actions__);
                    }

                    /*------------------------------------------------------------------------*/

                    /**
                     * Creates an object composed of keys generated from the results of running
                     * each element of `collection` thru `iteratee`. The corresponding value of
                     * each key is the number of times the key was returned by `iteratee`. The
                     * iteratee is invoked with one argument: (value).
                     *
                     * @static
                     * @memberOf _
                     * @since 0.5.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
                     * @returns {Object} Returns the composed aggregate object.
                     * @example
                     *
                     * _.countBy([6.1, 4.2, 6.3], Math.floor);
                     * // => { '4': 1, '6': 2 }
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.countBy(['one', 'two', 'three'], 'length');
                     * // => { '3': 2, '5': 1 }
                     */
                    var countBy = createAggregator(function(result, value, key) {
                        if (hasOwnProperty.call(result, key)) {
                            ++result[key];
                        } else {
                            baseAssignValue(result, key, 1);
                        }
                    });

                    /**
                     * Checks if `predicate` returns truthy for **all** elements of `collection`.
                     * Iteration is stopped once `predicate` returns falsey. The predicate is
                     * invoked with three arguments: (value, index|key, collection).
                     *
                     * **Note:** This method returns `true` for
                     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
                     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
                     * elements of empty collections.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} [predicate=_.identity] The function invoked per iteration.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                     * @returns {boolean} Returns `true` if all elements pass the predicate check,
                     *  else `false`.
                     * @example
                     *
                     * _.every([true, 1, null, 'yes'], Boolean);
                     * // => false
                     *
                     * var users = [
                     *   { 'user': 'barney', 'age': 36, 'active': false },
                     *   { 'user': 'fred',   'age': 40, 'active': false }
                     * ];
                     *
                     * // The `_.matches` iteratee shorthand.
                     * _.every(users, { 'user': 'barney', 'active': false });
                     * // => false
                     *
                     * // The `_.matchesProperty` iteratee shorthand.
                     * _.every(users, ['active', false]);
                     * // => true
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.every(users, 'active');
                     * // => false
                     */
                    function every(collection, predicate, guard) {
                        var func = isArray(collection) ? arrayEvery : baseEvery;
                        if (guard && isIterateeCall(collection, predicate, guard)) {
                            predicate = undefined;
                        }
                        return func(collection, getIteratee(predicate, 3));
                    }

                    /**
                     * Iterates over elements of `collection`, returning an array of all elements
                     * `predicate` returns truthy for. The predicate is invoked with three
                     * arguments: (value, index|key, collection).
                     *
                     * **Note:** Unlike `_.remove`, this method returns a new array.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} [predicate=_.identity] The function invoked per iteration.
                     * @returns {Array} Returns the new filtered array.
                     * @see _.reject
                     * @example
                     *
                     * var users = [
                     *   { 'user': 'barney', 'age': 36, 'active': true },
                     *   { 'user': 'fred',   'age': 40, 'active': false }
                     * ];
                     *
                     * _.filter(users, function(o) { return !o.active; });
                     * // => objects for ['fred']
                     *
                     * // The `_.matches` iteratee shorthand.
                     * _.filter(users, { 'age': 36, 'active': true });
                     * // => objects for ['barney']
                     *
                     * // The `_.matchesProperty` iteratee shorthand.
                     * _.filter(users, ['active', false]);
                     * // => objects for ['fred']
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.filter(users, 'active');
                     * // => objects for ['barney']
                     */
                    function filter(collection, predicate) {
                        var func = isArray(collection) ? arrayFilter : baseFilter;
                        return func(collection, getIteratee(predicate, 3));
                    }

                    /**
                     * Iterates over elements of `collection`, returning the first element
                     * `predicate` returns truthy for. The predicate is invoked with three
                     * arguments: (value, index|key, collection).
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to inspect.
                     * @param {Function} [predicate=_.identity] The function invoked per iteration.
                     * @param {number} [fromIndex=0] The index to search from.
                     * @returns {*} Returns the matched element, else `undefined`.
                     * @example
                     *
                     * var users = [
                     *   { 'user': 'barney',  'age': 36, 'active': true },
                     *   { 'user': 'fred',    'age': 40, 'active': false },
                     *   { 'user': 'pebbles', 'age': 1,  'active': true }
                     * ];
                     *
                     * _.find(users, function(o) { return o.age < 40; });
                     * // => object for 'barney'
                     *
                     * // The `_.matches` iteratee shorthand.
                     * _.find(users, { 'age': 1, 'active': true });
                     * // => object for 'pebbles'
                     *
                     * // The `_.matchesProperty` iteratee shorthand.
                     * _.find(users, ['active', false]);
                     * // => object for 'fred'
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.find(users, 'active');
                     * // => object for 'barney'
                     */
                    var find = createFind(findIndex);

                    /**
                     * This method is like `_.find` except that it iterates over elements of
                     * `collection` from right to left.
                     *
                     * @static
                     * @memberOf _
                     * @since 2.0.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to inspect.
                     * @param {Function} [predicate=_.identity] The function invoked per iteration.
                     * @param {number} [fromIndex=collection.length-1] The index to search from.
                     * @returns {*} Returns the matched element, else `undefined`.
                     * @example
                     *
                     * _.findLast([1, 2, 3, 4], function(n) {
                     *   return n % 2 == 1;
                     * });
                     * // => 3
                     */
                    var findLast = createFind(findLastIndex);

                    /**
                     * Creates a flattened array of values by running each element in `collection`
                     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
                     * with three arguments: (value, index|key, collection).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                     * @returns {Array} Returns the new flattened array.
                     * @example
                     *
                     * function duplicate(n) {
                     *   return [n, n];
                     * }
                     *
                     * _.flatMap([1, 2], duplicate);
                     * // => [1, 1, 2, 2]
                     */
                    function flatMap(collection, iteratee) {
                        return baseFlatten(map(collection, iteratee), 1);
                    }

                    /**
                     * This method is like `_.flatMap` except that it recursively flattens the
                     * mapped results.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.7.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                     * @returns {Array} Returns the new flattened array.
                     * @example
                     *
                     * function duplicate(n) {
                     *   return [[[n, n]]];
                     * }
                     *
                     * _.flatMapDeep([1, 2], duplicate);
                     * // => [1, 1, 2, 2]
                     */
                    function flatMapDeep(collection, iteratee) {
                        return baseFlatten(map(collection, iteratee), INFINITY);
                    }

                    /**
                     * This method is like `_.flatMap` except that it recursively flattens the
                     * mapped results up to `depth` times.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.7.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                     * @param {number} [depth=1] The maximum recursion depth.
                     * @returns {Array} Returns the new flattened array.
                     * @example
                     *
                     * function duplicate(n) {
                     *   return [[[n, n]]];
                     * }
                     *
                     * _.flatMapDepth([1, 2], duplicate, 2);
                     * // => [[1, 1], [2, 2]]
                     */
                    function flatMapDepth(collection, iteratee, depth) {
                        depth = depth === undefined ? 1 : toInteger(depth);
                        return baseFlatten(map(collection, iteratee), depth);
                    }

                    /**
                     * Iterates over elements of `collection` and invokes `iteratee` for each element.
                     * The iteratee is invoked with three arguments: (value, index|key, collection).
                     * Iteratee functions may exit iteration early by explicitly returning `false`.
                     *
                     * **Note:** As with other "Collections" methods, objects with a "length"
                     * property are iterated like arrays. To avoid this behavior use `_.forIn`
                     * or `_.forOwn` for object iteration.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @alias each
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                     * @returns {Array|Object} Returns `collection`.
                     * @see _.forEachRight
                     * @example
                     *
                     * _.forEach([1, 2], function(value) {
                     *   console.log(value);
                     * });
                     * // => Logs `1` then `2`.
                     *
                     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
                     *   console.log(key);
                     * });
                     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
                     */
                    function forEach(collection, iteratee) {
                        var func = isArray(collection) ? arrayEach : baseEach;
                        return func(collection, getIteratee(iteratee, 3));
                    }

                    /**
                     * This method is like `_.forEach` except that it iterates over elements of
                     * `collection` from right to left.
                     *
                     * @static
                     * @memberOf _
                     * @since 2.0.0
                     * @alias eachRight
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                     * @returns {Array|Object} Returns `collection`.
                     * @see _.forEach
                     * @example
                     *
                     * _.forEachRight([1, 2], function(value) {
                     *   console.log(value);
                     * });
                     * // => Logs `2` then `1`.
                     */
                    function forEachRight(collection, iteratee) {
                        var func = isArray(collection) ? arrayEachRight : baseEachRight;
                        return func(collection, getIteratee(iteratee, 3));
                    }

                    /**
                     * Creates an object composed of keys generated from the results of running
                     * each element of `collection` thru `iteratee`. The order of grouped values
                     * is determined by the order they occur in `collection`. The corresponding
                     * value of each key is an array of elements responsible for generating the
                     * key. The iteratee is invoked with one argument: (value).
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
                     * @returns {Object} Returns the composed aggregate object.
                     * @example
                     *
                     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
                     * // => { '4': [4.2], '6': [6.1, 6.3] }
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.groupBy(['one', 'two', 'three'], 'length');
                     * // => { '3': ['one', 'two'], '5': ['three'] }
                     */
                    var groupBy = createAggregator(function(result, value, key) {
                        if (hasOwnProperty.call(result, key)) {
                            result[key].push(value);
                        } else {
                            baseAssignValue(result, key, [value]);
                        }
                    });

                    /**
                     * Checks if `value` is in `collection`. If `collection` is a string, it's
                     * checked for a substring of `value`, otherwise
                     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                     * is used for equality comparisons. If `fromIndex` is negative, it's used as
                     * the offset from the end of `collection`.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Collection
                     * @param {Array|Object|string} collection The collection to inspect.
                     * @param {*} value The value to search for.
                     * @param {number} [fromIndex=0] The index to search from.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
                     * @returns {boolean} Returns `true` if `value` is found, else `false`.
                     * @example
                     *
                     * _.includes([1, 2, 3], 1);
                     * // => true
                     *
                     * _.includes([1, 2, 3], 1, 2);
                     * // => false
                     *
                     * _.includes({ 'a': 1, 'b': 2 }, 1);
                     * // => true
                     *
                     * _.includes('abcd', 'bc');
                     * // => true
                     */
                    function includes(collection, value, fromIndex, guard) {
                        collection = isArrayLike(collection) ? collection : values(collection);
                        fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

                        var length = collection.length;
                        if (fromIndex < 0) {
                            fromIndex = nativeMax(length + fromIndex, 0);
                        }
                        return isString(collection) ?
                            (fromIndex <= length && collection.indexOf(value, fromIndex) > -1) :
                            (!!length && baseIndexOf(collection, value, fromIndex) > -1);
                    }

                    /**
                     * Invokes the method at `path` of each element in `collection`, returning
                     * an array of the results of each invoked method. Any additional arguments
                     * are provided to each invoked method. If `path` is a function, it's invoked
                     * for, and `this` bound to, each element in `collection`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Array|Function|string} path The path of the method to invoke or
                     *  the function invoked per iteration.
                     * @param {...*} [args] The arguments to invoke each method with.
                     * @returns {Array} Returns the array of results.
                     * @example
                     *
                     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
                     * // => [[1, 5, 7], [1, 2, 3]]
                     *
                     * _.invokeMap([123, 456], String.prototype.split, '');
                     * // => [['1', '2', '3'], ['4', '5', '6']]
                     */
                    var invokeMap = baseRest(function(collection, path, args) {
                        var index = -1,
                            isFunc = typeof path == 'function',
                            result = isArrayLike(collection) ? Array(collection.length) : [];

                        baseEach(collection, function(value) {
                            result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
                        });
                        return result;
                    });

                    /**
                     * Creates an object composed of keys generated from the results of running
                     * each element of `collection` thru `iteratee`. The corresponding value of
                     * each key is the last element responsible for generating the key. The
                     * iteratee is invoked with one argument: (value).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
                     * @returns {Object} Returns the composed aggregate object.
                     * @example
                     *
                     * var array = [
                     *   { 'dir': 'left', 'code': 97 },
                     *   { 'dir': 'right', 'code': 100 }
                     * ];
                     *
                     * _.keyBy(array, function(o) {
                     *   return String.fromCharCode(o.code);
                     * });
                     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
                     *
                     * _.keyBy(array, 'dir');
                     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
                     */
                    var keyBy = createAggregator(function(result, value, key) {
                        baseAssignValue(result, key, value);
                    });

                    /**
                     * Creates an array of values by running each element in `collection` thru
                     * `iteratee`. The iteratee is invoked with three arguments:
                     * (value, index|key, collection).
                     *
                     * Many lodash methods are guarded to work as iteratees for methods like
                     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
                     *
                     * The guarded methods are:
                     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
                     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
                     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
                     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                     * @returns {Array} Returns the new mapped array.
                     * @example
                     *
                     * function square(n) {
                     *   return n * n;
                     * }
                     *
                     * _.map([4, 8], square);
                     * // => [16, 64]
                     *
                     * _.map({ 'a': 4, 'b': 8 }, square);
                     * // => [16, 64] (iteration order is not guaranteed)
                     *
                     * var users = [
                     *   { 'user': 'barney' },
                     *   { 'user': 'fred' }
                     * ];
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.map(users, 'user');
                     * // => ['barney', 'fred']
                     */
                    function map(collection, iteratee) {
                        var func = isArray(collection) ? arrayMap : baseMap;
                        return func(collection, getIteratee(iteratee, 3));
                    }

                    /**
                     * This method is like `_.sortBy` except that it allows specifying the sort
                     * orders of the iteratees to sort by. If `orders` is unspecified, all values
                     * are sorted in ascending order. Otherwise, specify an order of "desc" for
                     * descending or "asc" for ascending sort order of corresponding values.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
                     *  The iteratees to sort by.
                     * @param {string[]} [orders] The sort orders of `iteratees`.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
                     * @returns {Array} Returns the new sorted array.
                     * @example
                     *
                     * var users = [
                     *   { 'user': 'fred',   'age': 48 },
                     *   { 'user': 'barney', 'age': 34 },
                     *   { 'user': 'fred',   'age': 40 },
                     *   { 'user': 'barney', 'age': 36 }
                     * ];
                     *
                     * // Sort by `user` in ascending order and by `age` in descending order.
                     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
                     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
                     */
                    function orderBy(collection, iteratees, orders, guard) {
                        if (collection == null) {
                            return [];
                        }
                        if (!isArray(iteratees)) {
                            iteratees = iteratees == null ? [] : [iteratees];
                        }
                        orders = guard ? undefined : orders;
                        if (!isArray(orders)) {
                            orders = orders == null ? [] : [orders];
                        }
                        return baseOrderBy(collection, iteratees, orders);
                    }

                    /**
                     * Creates an array of elements split into two groups, the first of which
                     * contains elements `predicate` returns truthy for, the second of which
                     * contains elements `predicate` returns falsey for. The predicate is
                     * invoked with one argument: (value).
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} [predicate=_.identity] The function invoked per iteration.
                     * @returns {Array} Returns the array of grouped elements.
                     * @example
                     *
                     * var users = [
                     *   { 'user': 'barney',  'age': 36, 'active': false },
                     *   { 'user': 'fred',    'age': 40, 'active': true },
                     *   { 'user': 'pebbles', 'age': 1,  'active': false }
                     * ];
                     *
                     * _.partition(users, function(o) { return o.active; });
                     * // => objects for [['fred'], ['barney', 'pebbles']]
                     *
                     * // The `_.matches` iteratee shorthand.
                     * _.partition(users, { 'age': 1, 'active': false });
                     * // => objects for [['pebbles'], ['barney', 'fred']]
                     *
                     * // The `_.matchesProperty` iteratee shorthand.
                     * _.partition(users, ['active', false]);
                     * // => objects for [['barney', 'pebbles'], ['fred']]
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.partition(users, 'active');
                     * // => objects for [['fred'], ['barney', 'pebbles']]
                     */
                    var partition = createAggregator(function(result, value, key) {
                        result[key ? 0 : 1].push(value);
                    }, function() {
                        return [
                            [],
                            []
                        ];
                    });

                    /**
                     * Reduces `collection` to a value which is the accumulated result of running
                     * each element in `collection` thru `iteratee`, where each successive
                     * invocation is supplied the return value of the previous. If `accumulator`
                     * is not given, the first element of `collection` is used as the initial
                     * value. The iteratee is invoked with four arguments:
                     * (accumulator, value, index|key, collection).
                     *
                     * Many lodash methods are guarded to work as iteratees for methods like
                     * `_.reduce`, `_.reduceRight`, and `_.transform`.
                     *
                     * The guarded methods are:
                     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
                     * and `sortBy`
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                     * @param {*} [accumulator] The initial value.
                     * @returns {*} Returns the accumulated value.
                     * @see _.reduceRight
                     * @example
                     *
                     * _.reduce([1, 2], function(sum, n) {
                     *   return sum + n;
                     * }, 0);
                     * // => 3
                     *
                     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
                     *   (result[value] || (result[value] = [])).push(key);
                     *   return result;
                     * }, {});
                     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
                     */
                    function reduce(collection, iteratee, accumulator) {
                        var func = isArray(collection) ? arrayReduce : baseReduce,
                            initAccum = arguments.length < 3;

                        return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
                    }

                    /**
                     * This method is like `_.reduce` except that it iterates over elements of
                     * `collection` from right to left.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                     * @param {*} [accumulator] The initial value.
                     * @returns {*} Returns the accumulated value.
                     * @see _.reduce
                     * @example
                     *
                     * var array = [[0, 1], [2, 3], [4, 5]];
                     *
                     * _.reduceRight(array, function(flattened, other) {
                     *   return flattened.concat(other);
                     * }, []);
                     * // => [4, 5, 2, 3, 0, 1]
                     */
                    function reduceRight(collection, iteratee, accumulator) {
                        var func = isArray(collection) ? arrayReduceRight : baseReduce,
                            initAccum = arguments.length < 3;

                        return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
                    }

                    /**
                     * The opposite of `_.filter`; this method returns the elements of `collection`
                     * that `predicate` does **not** return truthy for.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} [predicate=_.identity] The function invoked per iteration.
                     * @returns {Array} Returns the new filtered array.
                     * @see _.filter
                     * @example
                     *
                     * var users = [
                     *   { 'user': 'barney', 'age': 36, 'active': false },
                     *   { 'user': 'fred',   'age': 40, 'active': true }
                     * ];
                     *
                     * _.reject(users, function(o) { return !o.active; });
                     * // => objects for ['fred']
                     *
                     * // The `_.matches` iteratee shorthand.
                     * _.reject(users, { 'age': 40, 'active': true });
                     * // => objects for ['barney']
                     *
                     * // The `_.matchesProperty` iteratee shorthand.
                     * _.reject(users, ['active', false]);
                     * // => objects for ['fred']
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.reject(users, 'active');
                     * // => objects for ['barney']
                     */
                    function reject(collection, predicate) {
                        var func = isArray(collection) ? arrayFilter : baseFilter;
                        return func(collection, negate(getIteratee(predicate, 3)));
                    }

                    /**
                     * Gets a random element from `collection`.
                     *
                     * @static
                     * @memberOf _
                     * @since 2.0.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to sample.
                     * @returns {*} Returns the random element.
                     * @example
                     *
                     * _.sample([1, 2, 3, 4]);
                     * // => 2
                     */
                    function sample(collection) {
                        var func = isArray(collection) ? arraySample : baseSample;
                        return func(collection);
                    }

                    /**
                     * Gets `n` random elements at unique keys from `collection` up to the
                     * size of `collection`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to sample.
                     * @param {number} [n=1] The number of elements to sample.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                     * @returns {Array} Returns the random elements.
                     * @example
                     *
                     * _.sampleSize([1, 2, 3], 2);
                     * // => [3, 1]
                     *
                     * _.sampleSize([1, 2, 3], 4);
                     * // => [2, 3, 1]
                     */
                    function sampleSize(collection, n, guard) {
                        if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
                            n = 1;
                        } else {
                            n = toInteger(n);
                        }
                        var func = isArray(collection) ? arraySampleSize : baseSampleSize;
                        return func(collection, n);
                    }

                    /**
                     * Creates an array of shuffled values, using a version of the
                     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to shuffle.
                     * @returns {Array} Returns the new shuffled array.
                     * @example
                     *
                     * _.shuffle([1, 2, 3, 4]);
                     * // => [4, 1, 3, 2]
                     */
                    function shuffle(collection) {
                        var func = isArray(collection) ? arrayShuffle : baseShuffle;
                        return func(collection);
                    }

                    /**
                     * Gets the size of `collection` by returning its length for array-like
                     * values or the number of own enumerable string keyed properties for objects.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Collection
                     * @param {Array|Object|string} collection The collection to inspect.
                     * @returns {number} Returns the collection size.
                     * @example
                     *
                     * _.size([1, 2, 3]);
                     * // => 3
                     *
                     * _.size({ 'a': 1, 'b': 2 });
                     * // => 2
                     *
                     * _.size('pebbles');
                     * // => 7
                     */
                    function size(collection) {
                        if (collection == null) {
                            return 0;
                        }
                        if (isArrayLike(collection)) {
                            return isString(collection) ? stringSize(collection) : collection.length;
                        }
                        var tag = getTag(collection);
                        if (tag == mapTag || tag == setTag) {
                            return collection.size;
                        }
                        return baseKeys(collection).length;
                    }

                    /**
                     * Checks if `predicate` returns truthy for **any** element of `collection`.
                     * Iteration is stopped once `predicate` returns truthy. The predicate is
                     * invoked with three arguments: (value, index|key, collection).
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} [predicate=_.identity] The function invoked per iteration.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                     * @returns {boolean} Returns `true` if any element passes the predicate check,
                     *  else `false`.
                     * @example
                     *
                     * _.some([null, 0, 'yes', false], Boolean);
                     * // => true
                     *
                     * var users = [
                     *   { 'user': 'barney', 'active': true },
                     *   { 'user': 'fred',   'active': false }
                     * ];
                     *
                     * // The `_.matches` iteratee shorthand.
                     * _.some(users, { 'user': 'barney', 'active': false });
                     * // => false
                     *
                     * // The `_.matchesProperty` iteratee shorthand.
                     * _.some(users, ['active', false]);
                     * // => true
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.some(users, 'active');
                     * // => true
                     */
                    function some(collection, predicate, guard) {
                        var func = isArray(collection) ? arraySome : baseSome;
                        if (guard && isIterateeCall(collection, predicate, guard)) {
                            predicate = undefined;
                        }
                        return func(collection, getIteratee(predicate, 3));
                    }

                    /**
                     * Creates an array of elements, sorted in ascending order by the results of
                     * running each element in a collection thru each iteratee. This method
                     * performs a stable sort, that is, it preserves the original sort order of
                     * equal elements. The iteratees are invoked with one argument: (value).
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {...(Function|Function[])} [iteratees=[_.identity]]
                     *  The iteratees to sort by.
                     * @returns {Array} Returns the new sorted array.
                     * @example
                     *
                     * var users = [
                     *   { 'user': 'fred',   'age': 48 },
                     *   { 'user': 'barney', 'age': 36 },
                     *   { 'user': 'fred',   'age': 40 },
                     *   { 'user': 'barney', 'age': 34 }
                     * ];
                     *
                     * _.sortBy(users, [function(o) { return o.user; }]);
                     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
                     *
                     * _.sortBy(users, ['user', 'age']);
                     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
                     */
                    var sortBy = baseRest(function(collection, iteratees) {
                        if (collection == null) {
                            return [];
                        }
                        var length = iteratees.length;
                        if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
                            iteratees = [];
                        } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
                            iteratees = [iteratees[0]];
                        }
                        return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
                    });

                    /*------------------------------------------------------------------------*/

                    /**
                     * Gets the timestamp of the number of milliseconds that have elapsed since
                     * the Unix epoch (1 January 1970 00:00:00 UTC).
                     *
                     * @static
                     * @memberOf _
                     * @since 2.4.0
                     * @category Date
                     * @returns {number} Returns the timestamp.
                     * @example
                     *
                     * _.defer(function(stamp) {
                     *   console.log(_.now() - stamp);
                     * }, _.now());
                     * // => Logs the number of milliseconds it took for the deferred invocation.
                     */
                    var now = ctxNow || function() {
                        return root.Date.now();
                    };

                    /*------------------------------------------------------------------------*/

                    /**
                     * The opposite of `_.before`; this method creates a function that invokes
                     * `func` once it's called `n` or more times.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Function
                     * @param {number} n The number of calls before `func` is invoked.
                     * @param {Function} func The function to restrict.
                     * @returns {Function} Returns the new restricted function.
                     * @example
                     *
                     * var saves = ['profile', 'settings'];
                     *
                     * var done = _.after(saves.length, function() {
                     *   console.log('done saving!');
                     * });
                     *
                     * _.forEach(saves, function(type) {
                     *   asyncSave({ 'type': type, 'complete': done });
                     * });
                     * // => Logs 'done saving!' after the two async saves have completed.
                     */
                    function after(n, func) {
                        if (typeof func != 'function') {
                            throw new TypeError(FUNC_ERROR_TEXT);
                        }
                        n = toInteger(n);
                        return function() {
                            if (--n < 1) {
                                return func.apply(this, arguments);
                            }
                        };
                    }

                    /**
                     * Creates a function that invokes `func`, with up to `n` arguments,
                     * ignoring any additional arguments.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Function
                     * @param {Function} func The function to cap arguments for.
                     * @param {number} [n=func.length] The arity cap.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                     * @returns {Function} Returns the new capped function.
                     * @example
                     *
                     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
                     * // => [6, 8, 10]
                     */
                    function ary(func, n, guard) {
                        n = guard ? undefined : n;
                        n = (func && n == null) ? func.length : n;
                        return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
                    }

                    /**
                     * Creates a function that invokes `func`, with the `this` binding and arguments
                     * of the created function, while it's called less than `n` times. Subsequent
                     * calls to the created function return the result of the last `func` invocation.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Function
                     * @param {number} n The number of calls at which `func` is no longer invoked.
                     * @param {Function} func The function to restrict.
                     * @returns {Function} Returns the new restricted function.
                     * @example
                     *
                     * jQuery(element).on('click', _.before(5, addContactToList));
                     * // => Allows adding up to 4 contacts to the list.
                     */
                    function before(n, func) {
                        var result;
                        if (typeof func != 'function') {
                            throw new TypeError(FUNC_ERROR_TEXT);
                        }
                        n = toInteger(n);
                        return function() {
                            if (--n > 0) {
                                result = func.apply(this, arguments);
                            }
                            if (n <= 1) {
                                func = undefined;
                            }
                            return result;
                        };
                    }

                    /**
                     * Creates a function that invokes `func` with the `this` binding of `thisArg`
                     * and `partials` prepended to the arguments it receives.
                     *
                     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
                     * may be used as a placeholder for partially applied arguments.
                     *
                     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
                     * property of bound functions.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Function
                     * @param {Function} func The function to bind.
                     * @param {*} thisArg The `this` binding of `func`.
                     * @param {...*} [partials] The arguments to be partially applied.
                     * @returns {Function} Returns the new bound function.
                     * @example
                     *
                     * function greet(greeting, punctuation) {
                     *   return greeting + ' ' + this.user + punctuation;
                     * }
                     *
                     * var object = { 'user': 'fred' };
                     *
                     * var bound = _.bind(greet, object, 'hi');
                     * bound('!');
                     * // => 'hi fred!'
                     *
                     * // Bound with placeholders.
                     * var bound = _.bind(greet, object, _, '!');
                     * bound('hi');
                     * // => 'hi fred!'
                     */
                    var bind = baseRest(function(func, thisArg, partials) {
                        var bitmask = WRAP_BIND_FLAG;
                        if (partials.length) {
                            var holders = replaceHolders(partials, getHolder(bind));
                            bitmask |= WRAP_PARTIAL_FLAG;
                        }
                        return createWrap(func, bitmask, thisArg, partials, holders);
                    });

                    /**
                     * Creates a function that invokes the method at `object[key]` with `partials`
                     * prepended to the arguments it receives.
                     *
                     * This method differs from `_.bind` by allowing bound functions to reference
                     * methods that may be redefined or don't yet exist. See
                     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
                     * for more details.
                     *
                     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
                     * builds, may be used as a placeholder for partially applied arguments.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.10.0
                     * @category Function
                     * @param {Object} object The object to invoke the method on.
                     * @param {string} key The key of the method.
                     * @param {...*} [partials] The arguments to be partially applied.
                     * @returns {Function} Returns the new bound function.
                     * @example
                     *
                     * var object = {
                     *   'user': 'fred',
                     *   'greet': function(greeting, punctuation) {
                     *     return greeting + ' ' + this.user + punctuation;
                     *   }
                     * };
                     *
                     * var bound = _.bindKey(object, 'greet', 'hi');
                     * bound('!');
                     * // => 'hi fred!'
                     *
                     * object.greet = function(greeting, punctuation) {
                     *   return greeting + 'ya ' + this.user + punctuation;
                     * };
                     *
                     * bound('!');
                     * // => 'hiya fred!'
                     *
                     * // Bound with placeholders.
                     * var bound = _.bindKey(object, 'greet', _, '!');
                     * bound('hi');
                     * // => 'hiya fred!'
                     */
                    var bindKey = baseRest(function(object, key, partials) {
                        var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
                        if (partials.length) {
                            var holders = replaceHolders(partials, getHolder(bindKey));
                            bitmask |= WRAP_PARTIAL_FLAG;
                        }
                        return createWrap(key, bitmask, object, partials, holders);
                    });

                    /**
                     * Creates a function that accepts arguments of `func` and either invokes
                     * `func` returning its result, if at least `arity` number of arguments have
                     * been provided, or returns a function that accepts the remaining `func`
                     * arguments, and so on. The arity of `func` may be specified if `func.length`
                     * is not sufficient.
                     *
                     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
                     * may be used as a placeholder for provided arguments.
                     *
                     * **Note:** This method doesn't set the "length" property of curried functions.
                     *
                     * @static
                     * @memberOf _
                     * @since 2.0.0
                     * @category Function
                     * @param {Function} func The function to curry.
                     * @param {number} [arity=func.length] The arity of `func`.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                     * @returns {Function} Returns the new curried function.
                     * @example
                     *
                     * var abc = function(a, b, c) {
                     *   return [a, b, c];
                     * };
                     *
                     * var curried = _.curry(abc);
                     *
                     * curried(1)(2)(3);
                     * // => [1, 2, 3]
                     *
                     * curried(1, 2)(3);
                     * // => [1, 2, 3]
                     *
                     * curried(1, 2, 3);
                     * // => [1, 2, 3]
                     *
                     * // Curried with placeholders.
                     * curried(1)(_, 3)(2);
                     * // => [1, 2, 3]
                     */
                    function curry(func, arity, guard) {
                        arity = guard ? undefined : arity;
                        var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
                        result.placeholder = curry.placeholder;
                        return result;
                    }

                    /**
                     * This method is like `_.curry` except that arguments are applied to `func`
                     * in the manner of `_.partialRight` instead of `_.partial`.
                     *
                     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
                     * builds, may be used as a placeholder for provided arguments.
                     *
                     * **Note:** This method doesn't set the "length" property of curried functions.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Function
                     * @param {Function} func The function to curry.
                     * @param {number} [arity=func.length] The arity of `func`.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                     * @returns {Function} Returns the new curried function.
                     * @example
                     *
                     * var abc = function(a, b, c) {
                     *   return [a, b, c];
                     * };
                     *
                     * var curried = _.curryRight(abc);
                     *
                     * curried(3)(2)(1);
                     * // => [1, 2, 3]
                     *
                     * curried(2, 3)(1);
                     * // => [1, 2, 3]
                     *
                     * curried(1, 2, 3);
                     * // => [1, 2, 3]
                     *
                     * // Curried with placeholders.
                     * curried(3)(1, _)(2);
                     * // => [1, 2, 3]
                     */
                    function curryRight(func, arity, guard) {
                        arity = guard ? undefined : arity;
                        var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
                        result.placeholder = curryRight.placeholder;
                        return result;
                    }

                    /**
                     * Creates a debounced function that delays invoking `func` until after `wait`
                     * milliseconds have elapsed since the last time the debounced function was
                     * invoked. The debounced function comes with a `cancel` method to cancel
                     * delayed `func` invocations and a `flush` method to immediately invoke them.
                     * Provide `options` to indicate whether `func` should be invoked on the
                     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
                     * with the last arguments provided to the debounced function. Subsequent
                     * calls to the debounced function return the result of the last `func`
                     * invocation.
                     *
                     * **Note:** If `leading` and `trailing` options are `true`, `func` is
                     * invoked on the trailing edge of the timeout only if the debounced function
                     * is invoked more than once during the `wait` timeout.
                     *
                     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
                     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
                     *
                     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
                     * for details over the differences between `_.debounce` and `_.throttle`.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Function
                     * @param {Function} func The function to debounce.
                     * @param {number} [wait=0] The number of milliseconds to delay.
                     * @param {Object} [options={}] The options object.
                     * @param {boolean} [options.leading=false]
                     *  Specify invoking on the leading edge of the timeout.
                     * @param {number} [options.maxWait]
                     *  The maximum time `func` is allowed to be delayed before it's invoked.
                     * @param {boolean} [options.trailing=true]
                     *  Specify invoking on the trailing edge of the timeout.
                     * @returns {Function} Returns the new debounced function.
                     * @example
                     *
                     * // Avoid costly calculations while the window size is in flux.
                     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
                     *
                     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
                     * jQuery(element).on('click', _.debounce(sendMail, 300, {
                     *   'leading': true,
                     *   'trailing': false
                     * }));
                     *
                     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
                     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
                     * var source = new EventSource('/stream');
                     * jQuery(source).on('message', debounced);
                     *
                     * // Cancel the trailing debounced invocation.
                     * jQuery(window).on('popstate', debounced.cancel);
                     */
                    function debounce(func, wait, options) {
                        var lastArgs,
                            lastThis,
                            maxWait,
                            result,
                            timerId,
                            lastCallTime,
                            lastInvokeTime = 0,
                            leading = false,
                            maxing = false,
                            trailing = true;

                        if (typeof func != 'function') {
                            throw new TypeError(FUNC_ERROR_TEXT);
                        }
                        wait = toNumber(wait) || 0;
                        if (isObject(options)) {
                            leading = !!options.leading;
                            maxing = 'maxWait' in options;
                            maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
                            trailing = 'trailing' in options ? !!options.trailing : trailing;
                        }

                        function invokeFunc(time) {
                            var args = lastArgs,
                                thisArg = lastThis;

                            lastArgs = lastThis = undefined;
                            lastInvokeTime = time;
                            result = func.apply(thisArg, args);
                            return result;
                        }

                        function leadingEdge(time) {
                            // Reset any `maxWait` timer.
                            lastInvokeTime = time;
                            // Start the timer for the trailing edge.
                            timerId = setTimeout(timerExpired, wait);
                            // Invoke the leading edge.
                            return leading ? invokeFunc(time) : result;
                        }

                        function remainingWait(time) {
                            var timeSinceLastCall = time - lastCallTime,
                                timeSinceLastInvoke = time - lastInvokeTime,
                                result = wait - timeSinceLastCall;

                            return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
                        }

                        function shouldInvoke(time) {
                            var timeSinceLastCall = time - lastCallTime,
                                timeSinceLastInvoke = time - lastInvokeTime;

                            // Either this is the first call, activity has stopped and we're at the
                            // trailing edge, the system time has gone backwards and we're treating
                            // it as the trailing edge, or we've hit the `maxWait` limit.
                            return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
                                (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
                        }

                        function timerExpired() {
                            var time = now();
                            if (shouldInvoke(time)) {
                                return trailingEdge(time);
                            }
                            // Restart the timer.
                            timerId = setTimeout(timerExpired, remainingWait(time));
                        }

                        function trailingEdge(time) {
                            timerId = undefined;

                            // Only invoke if we have `lastArgs` which means `func` has been
                            // debounced at least once.
                            if (trailing && lastArgs) {
                                return invokeFunc(time);
                            }
                            lastArgs = lastThis = undefined;
                            return result;
                        }

                        function cancel() {
                            if (timerId !== undefined) {
                                clearTimeout(timerId);
                            }
                            lastInvokeTime = 0;
                            lastArgs = lastCallTime = lastThis = timerId = undefined;
                        }

                        function flush() {
                            return timerId === undefined ? result : trailingEdge(now());
                        }

                        function debounced() {
                            var time = now(),
                                isInvoking = shouldInvoke(time);

                            lastArgs = arguments;
                            lastThis = this;
                            lastCallTime = time;

                            if (isInvoking) {
                                if (timerId === undefined) {
                                    return leadingEdge(lastCallTime);
                                }
                                if (maxing) {
                                    // Handle invocations in a tight loop.
                                    timerId = setTimeout(timerExpired, wait);
                                    return invokeFunc(lastCallTime);
                                }
                            }
                            if (timerId === undefined) {
                                timerId = setTimeout(timerExpired, wait);
                            }
                            return result;
                        }
                        debounced.cancel = cancel;
                        debounced.flush = flush;
                        return debounced;
                    }

                    /**
                     * Defers invoking the `func` until the current call stack has cleared. Any
                     * additional arguments are provided to `func` when it's invoked.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Function
                     * @param {Function} func The function to defer.
                     * @param {...*} [args] The arguments to invoke `func` with.
                     * @returns {number} Returns the timer id.
                     * @example
                     *
                     * _.defer(function(text) {
                     *   console.log(text);
                     * }, 'deferred');
                     * // => Logs 'deferred' after one millisecond.
                     */
                    var defer = baseRest(function(func, args) {
                        return baseDelay(func, 1, args);
                    });

                    /**
                     * Invokes `func` after `wait` milliseconds. Any additional arguments are
                     * provided to `func` when it's invoked.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Function
                     * @param {Function} func The function to delay.
                     * @param {number} wait The number of milliseconds to delay invocation.
                     * @param {...*} [args] The arguments to invoke `func` with.
                     * @returns {number} Returns the timer id.
                     * @example
                     *
                     * _.delay(function(text) {
                     *   console.log(text);
                     * }, 1000, 'later');
                     * // => Logs 'later' after one second.
                     */
                    var delay = baseRest(function(func, wait, args) {
                        return baseDelay(func, toNumber(wait) || 0, args);
                    });

                    /**
                     * Creates a function that invokes `func` with arguments reversed.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Function
                     * @param {Function} func The function to flip arguments for.
                     * @returns {Function} Returns the new flipped function.
                     * @example
                     *
                     * var flipped = _.flip(function() {
                     *   return _.toArray(arguments);
                     * });
                     *
                     * flipped('a', 'b', 'c', 'd');
                     * // => ['d', 'c', 'b', 'a']
                     */
                    function flip(func) {
                        return createWrap(func, WRAP_FLIP_FLAG);
                    }

                    /**
                     * Creates a function that memoizes the result of `func`. If `resolver` is
                     * provided, it determines the cache key for storing the result based on the
                     * arguments provided to the memoized function. By default, the first argument
                     * provided to the memoized function is used as the map cache key. The `func`
                     * is invoked with the `this` binding of the memoized function.
                     *
                     * **Note:** The cache is exposed as the `cache` property on the memoized
                     * function. Its creation may be customized by replacing the `_.memoize.Cache`
                     * constructor with one whose instances implement the
                     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
                     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Function
                     * @param {Function} func The function to have its output memoized.
                     * @param {Function} [resolver] The function to resolve the cache key.
                     * @returns {Function} Returns the new memoized function.
                     * @example
                     *
                     * var object = { 'a': 1, 'b': 2 };
                     * var other = { 'c': 3, 'd': 4 };
                     *
                     * var values = _.memoize(_.values);
                     * values(object);
                     * // => [1, 2]
                     *
                     * values(other);
                     * // => [3, 4]
                     *
                     * object.a = 2;
                     * values(object);
                     * // => [1, 2]
                     *
                     * // Modify the result cache.
                     * values.cache.set(object, ['a', 'b']);
                     * values(object);
                     * // => ['a', 'b']
                     *
                     * // Replace `_.memoize.Cache`.
                     * _.memoize.Cache = WeakMap;
                     */
                    function memoize(func, resolver) {
                        if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
                            throw new TypeError(FUNC_ERROR_TEXT);
                        }
                        var memoized = function() {
                            var args = arguments,
                                key = resolver ? resolver.apply(this, args) : args[0],
                                cache = memoized.cache;

                            if (cache.has(key)) {
                                return cache.get(key);
                            }
                            var result = func.apply(this, args);
                            memoized.cache = cache.set(key, result) || cache;
                            return result;
                        };
                        memoized.cache = new(memoize.Cache || MapCache);
                        return memoized;
                    }

                    // Expose `MapCache`.
                    memoize.Cache = MapCache;

                    /**
                     * Creates a function that negates the result of the predicate `func`. The
                     * `func` predicate is invoked with the `this` binding and arguments of the
                     * created function.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Function
                     * @param {Function} predicate The predicate to negate.
                     * @returns {Function} Returns the new negated function.
                     * @example
                     *
                     * function isEven(n) {
                     *   return n % 2 == 0;
                     * }
                     *
                     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
                     * // => [1, 3, 5]
                     */
                    function negate(predicate) {
                        if (typeof predicate != 'function') {
                            throw new TypeError(FUNC_ERROR_TEXT);
                        }
                        return function() {
                            var args = arguments;
                            switch (args.length) {
                                case 0:
                                    return !predicate.call(this);
                                case 1:
                                    return !predicate.call(this, args[0]);
                                case 2:
                                    return !predicate.call(this, args[0], args[1]);
                                case 3:
                                    return !predicate.call(this, args[0], args[1], args[2]);
                            }
                            return !predicate.apply(this, args);
                        };
                    }

                    /**
                     * Creates a function that is restricted to invoking `func` once. Repeat calls
                     * to the function return the value of the first invocation. The `func` is
                     * invoked with the `this` binding and arguments of the created function.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Function
                     * @param {Function} func The function to restrict.
                     * @returns {Function} Returns the new restricted function.
                     * @example
                     *
                     * var initialize = _.once(createApplication);
                     * initialize();
                     * initialize();
                     * // => `createApplication` is invoked once
                     */
                    function once(func) {
                        return before(2, func);
                    }

                    /**
                     * Creates a function that invokes `func` with its arguments transformed.
                     *
                     * @static
                     * @since 4.0.0
                     * @memberOf _
                     * @category Function
                     * @param {Function} func The function to wrap.
                     * @param {...(Function|Function[])} [transforms=[_.identity]]
                     *  The argument transforms.
                     * @returns {Function} Returns the new function.
                     * @example
                     *
                     * function doubled(n) {
                     *   return n * 2;
                     * }
                     *
                     * function square(n) {
                     *   return n * n;
                     * }
                     *
                     * var func = _.overArgs(function(x, y) {
                     *   return [x, y];
                     * }, [square, doubled]);
                     *
                     * func(9, 3);
                     * // => [81, 6]
                     *
                     * func(10, 5);
                     * // => [100, 10]
                     */
                    var overArgs = castRest(function(func, transforms) {
                        transforms = (transforms.length == 1 && isArray(transforms[0])) ?
                            arrayMap(transforms[0], baseUnary(getIteratee())) :
                            arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

                        var funcsLength = transforms.length;
                        return baseRest(function(args) {
                            var index = -1,
                                length = nativeMin(args.length, funcsLength);

                            while (++index < length) {
                                args[index] = transforms[index].call(this, args[index]);
                            }
                            return apply(func, this, args);
                        });
                    });

                    /**
                     * Creates a function that invokes `func` with `partials` prepended to the
                     * arguments it receives. This method is like `_.bind` except it does **not**
                     * alter the `this` binding.
                     *
                     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
                     * builds, may be used as a placeholder for partially applied arguments.
                     *
                     * **Note:** This method doesn't set the "length" property of partially
                     * applied functions.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.2.0
                     * @category Function
                     * @param {Function} func The function to partially apply arguments to.
                     * @param {...*} [partials] The arguments to be partially applied.
                     * @returns {Function} Returns the new partially applied function.
                     * @example
                     *
                     * function greet(greeting, name) {
                     *   return greeting + ' ' + name;
                     * }
                     *
                     * var sayHelloTo = _.partial(greet, 'hello');
                     * sayHelloTo('fred');
                     * // => 'hello fred'
                     *
                     * // Partially applied with placeholders.
                     * var greetFred = _.partial(greet, _, 'fred');
                     * greetFred('hi');
                     * // => 'hi fred'
                     */
                    var partial = baseRest(function(func, partials) {
                        var holders = replaceHolders(partials, getHolder(partial));
                        return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
                    });

                    /**
                     * This method is like `_.partial` except that partially applied arguments
                     * are appended to the arguments it receives.
                     *
                     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
                     * builds, may be used as a placeholder for partially applied arguments.
                     *
                     * **Note:** This method doesn't set the "length" property of partially
                     * applied functions.
                     *
                     * @static
                     * @memberOf _
                     * @since 1.0.0
                     * @category Function
                     * @param {Function} func The function to partially apply arguments to.
                     * @param {...*} [partials] The arguments to be partially applied.
                     * @returns {Function} Returns the new partially applied function.
                     * @example
                     *
                     * function greet(greeting, name) {
                     *   return greeting + ' ' + name;
                     * }
                     *
                     * var greetFred = _.partialRight(greet, 'fred');
                     * greetFred('hi');
                     * // => 'hi fred'
                     *
                     * // Partially applied with placeholders.
                     * var sayHelloTo = _.partialRight(greet, 'hello', _);
                     * sayHelloTo('fred');
                     * // => 'hello fred'
                     */
                    var partialRight = baseRest(function(func, partials) {
                        var holders = replaceHolders(partials, getHolder(partialRight));
                        return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
                    });

                    /**
                     * Creates a function that invokes `func` with arguments arranged according
                     * to the specified `indexes` where the argument value at the first index is
                     * provided as the first argument, the argument value at the second index is
                     * provided as the second argument, and so on.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Function
                     * @param {Function} func The function to rearrange arguments for.
                     * @param {...(number|number[])} indexes The arranged argument indexes.
                     * @returns {Function} Returns the new function.
                     * @example
                     *
                     * var rearged = _.rearg(function(a, b, c) {
                     *   return [a, b, c];
                     * }, [2, 0, 1]);
                     *
                     * rearged('b', 'c', 'a')
                     * // => ['a', 'b', 'c']
                     */
                    var rearg = flatRest(function(func, indexes) {
                        return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
                    });

                    /**
                     * Creates a function that invokes `func` with the `this` binding of the
                     * created function and arguments from `start` and beyond provided as
                     * an array.
                     *
                     * **Note:** This method is based on the
                     * [rest parameter](https://mdn.io/rest_parameters).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Function
                     * @param {Function} func The function to apply a rest parameter to.
                     * @param {number} [start=func.length-1] The start position of the rest parameter.
                     * @returns {Function} Returns the new function.
                     * @example
                     *
                     * var say = _.rest(function(what, names) {
                     *   return what + ' ' + _.initial(names).join(', ') +
                     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
                     * });
                     *
                     * say('hello', 'fred', 'barney', 'pebbles');
                     * // => 'hello fred, barney, & pebbles'
                     */
                    function rest(func, start) {
                        if (typeof func != 'function') {
                            throw new TypeError(FUNC_ERROR_TEXT);
                        }
                        start = start === undefined ? start : toInteger(start);
                        return baseRest(func, start);
                    }

                    /**
                     * Creates a function that invokes `func` with the `this` binding of the
                     * create function and an array of arguments much like
                     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
                     *
                     * **Note:** This method is based on the
                     * [spread operator](https://mdn.io/spread_operator).
                     *
                     * @static
                     * @memberOf _
                     * @since 3.2.0
                     * @category Function
                     * @param {Function} func The function to spread arguments over.
                     * @param {number} [start=0] The start position of the spread.
                     * @returns {Function} Returns the new function.
                     * @example
                     *
                     * var say = _.spread(function(who, what) {
                     *   return who + ' says ' + what;
                     * });
                     *
                     * say(['fred', 'hello']);
                     * // => 'fred says hello'
                     *
                     * var numbers = Promise.all([
                     *   Promise.resolve(40),
                     *   Promise.resolve(36)
                     * ]);
                     *
                     * numbers.then(_.spread(function(x, y) {
                     *   return x + y;
                     * }));
                     * // => a Promise of 76
                     */
                    function spread(func, start) {
                        if (typeof func != 'function') {
                            throw new TypeError(FUNC_ERROR_TEXT);
                        }
                        start = start == null ? 0 : nativeMax(toInteger(start), 0);
                        return baseRest(function(args) {
                            var array = args[start],
                                otherArgs = castSlice(args, 0, start);

                            if (array) {
                                arrayPush(otherArgs, array);
                            }
                            return apply(func, this, otherArgs);
                        });
                    }

                    /**
                     * Creates a throttled function that only invokes `func` at most once per
                     * every `wait` milliseconds. The throttled function comes with a `cancel`
                     * method to cancel delayed `func` invocations and a `flush` method to
                     * immediately invoke them. Provide `options` to indicate whether `func`
                     * should be invoked on the leading and/or trailing edge of the `wait`
                     * timeout. The `func` is invoked with the last arguments provided to the
                     * throttled function. Subsequent calls to the throttled function return the
                     * result of the last `func` invocation.
                     *
                     * **Note:** If `leading` and `trailing` options are `true`, `func` is
                     * invoked on the trailing edge of the timeout only if the throttled function
                     * is invoked more than once during the `wait` timeout.
                     *
                     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
                     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
                     *
                     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
                     * for details over the differences between `_.throttle` and `_.debounce`.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Function
                     * @param {Function} func The function to throttle.
                     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
                     * @param {Object} [options={}] The options object.
                     * @param {boolean} [options.leading=true]
                     *  Specify invoking on the leading edge of the timeout.
                     * @param {boolean} [options.trailing=true]
                     *  Specify invoking on the trailing edge of the timeout.
                     * @returns {Function} Returns the new throttled function.
                     * @example
                     *
                     * // Avoid excessively updating the position while scrolling.
                     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
                     *
                     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
                     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
                     * jQuery(element).on('click', throttled);
                     *
                     * // Cancel the trailing throttled invocation.
                     * jQuery(window).on('popstate', throttled.cancel);
                     */
                    function throttle(func, wait, options) {
                        var leading = true,
                            trailing = true;

                        if (typeof func != 'function') {
                            throw new TypeError(FUNC_ERROR_TEXT);
                        }
                        if (isObject(options)) {
                            leading = 'leading' in options ? !!options.leading : leading;
                            trailing = 'trailing' in options ? !!options.trailing : trailing;
                        }
                        return debounce(func, wait, {
                            'leading': leading,
                            'maxWait': wait,
                            'trailing': trailing
                        });
                    }

                    /**
                     * Creates a function that accepts up to one argument, ignoring any
                     * additional arguments.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Function
                     * @param {Function} func The function to cap arguments for.
                     * @returns {Function} Returns the new capped function.
                     * @example
                     *
                     * _.map(['6', '8', '10'], _.unary(parseInt));
                     * // => [6, 8, 10]
                     */
                    function unary(func) {
                        return ary(func, 1);
                    }

                    /**
                     * Creates a function that provides `value` to `wrapper` as its first
                     * argument. Any additional arguments provided to the function are appended
                     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
                     * binding of the created function.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Function
                     * @param {*} value The value to wrap.
                     * @param {Function} [wrapper=identity] The wrapper function.
                     * @returns {Function} Returns the new function.
                     * @example
                     *
                     * var p = _.wrap(_.escape, function(func, text) {
                     *   return '<p>' + func(text) + '</p>';
                     * });
                     *
                     * p('fred, barney, & pebbles');
                     * // => '<p>fred, barney, &amp; pebbles</p>'
                     */
                    function wrap(value, wrapper) {
                        return partial(castFunction(wrapper), value);
                    }

                    /*------------------------------------------------------------------------*/

                    /**
                     * Casts `value` as an array if it's not one.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.4.0
                     * @category Lang
                     * @param {*} value The value to inspect.
                     * @returns {Array} Returns the cast array.
                     * @example
                     *
                     * _.castArray(1);
                     * // => [1]
                     *
                     * _.castArray({ 'a': 1 });
                     * // => [{ 'a': 1 }]
                     *
                     * _.castArray('abc');
                     * // => ['abc']
                     *
                     * _.castArray(null);
                     * // => [null]
                     *
                     * _.castArray(undefined);
                     * // => [undefined]
                     *
                     * _.castArray();
                     * // => []
                     *
                     * var array = [1, 2, 3];
                     * console.log(_.castArray(array) === array);
                     * // => true
                     */
                    function castArray() {
                        if (!arguments.length) {
                            return [];
                        }
                        var value = arguments[0];
                        return isArray(value) ? value : [value];
                    }

                    /**
                     * Creates a shallow clone of `value`.
                     *
                     * **Note:** This method is loosely based on the
                     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
                     * and supports cloning arrays, array buffers, booleans, date objects, maps,
                     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
                     * arrays. The own enumerable properties of `arguments` objects are cloned
                     * as plain objects. An empty object is returned for uncloneable values such
                     * as error objects, functions, DOM nodes, and WeakMaps.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Lang
                     * @param {*} value The value to clone.
                     * @returns {*} Returns the cloned value.
                     * @see _.cloneDeep
                     * @example
                     *
                     * var objects = [{ 'a': 1 }, { 'b': 2 }];
                     *
                     * var shallow = _.clone(objects);
                     * console.log(shallow[0] === objects[0]);
                     * // => true
                     */
                    function clone(value) {
                        return baseClone(value, CLONE_SYMBOLS_FLAG);
                    }

                    /**
                     * This method is like `_.clone` except that it accepts `customizer` which
                     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
                     * cloning is handled by the method instead. The `customizer` is invoked with
                     * up to four arguments; (value [, index|key, object, stack]).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Lang
                     * @param {*} value The value to clone.
                     * @param {Function} [customizer] The function to customize cloning.
                     * @returns {*} Returns the cloned value.
                     * @see _.cloneDeepWith
                     * @example
                     *
                     * function customizer(value) {
                     *   if (_.isElement(value)) {
                     *     return value.cloneNode(false);
                     *   }
                     * }
                     *
                     * var el = _.cloneWith(document.body, customizer);
                     *
                     * console.log(el === document.body);
                     * // => false
                     * console.log(el.nodeName);
                     * // => 'BODY'
                     * console.log(el.childNodes.length);
                     * // => 0
                     */
                    function cloneWith(value, customizer) {
                        customizer = typeof customizer == 'function' ? customizer : undefined;
                        return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
                    }

                    /**
                     * This method is like `_.clone` except that it recursively clones `value`.
                     *
                     * @static
                     * @memberOf _
                     * @since 1.0.0
                     * @category Lang
                     * @param {*} value The value to recursively clone.
                     * @returns {*} Returns the deep cloned value.
                     * @see _.clone
                     * @example
                     *
                     * var objects = [{ 'a': 1 }, { 'b': 2 }];
                     *
                     * var deep = _.cloneDeep(objects);
                     * console.log(deep[0] === objects[0]);
                     * // => false
                     */
                    function cloneDeep(value) {
                        return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
                    }

                    /**
                     * This method is like `_.cloneWith` except that it recursively clones `value`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Lang
                     * @param {*} value The value to recursively clone.
                     * @param {Function} [customizer] The function to customize cloning.
                     * @returns {*} Returns the deep cloned value.
                     * @see _.cloneWith
                     * @example
                     *
                     * function customizer(value) {
                     *   if (_.isElement(value)) {
                     *     return value.cloneNode(true);
                     *   }
                     * }
                     *
                     * var el = _.cloneDeepWith(document.body, customizer);
                     *
                     * console.log(el === document.body);
                     * // => false
                     * console.log(el.nodeName);
                     * // => 'BODY'
                     * console.log(el.childNodes.length);
                     * // => 20
                     */
                    function cloneDeepWith(value, customizer) {
                        customizer = typeof customizer == 'function' ? customizer : undefined;
                        return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
                    }

                    /**
                     * Checks if `object` conforms to `source` by invoking the predicate
                     * properties of `source` with the corresponding property values of `object`.
                     *
                     * **Note:** This method is equivalent to `_.conforms` when `source` is
                     * partially applied.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.14.0
                     * @category Lang
                     * @param {Object} object The object to inspect.
                     * @param {Object} source The object of property predicates to conform to.
                     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
                     * @example
                     *
                     * var object = { 'a': 1, 'b': 2 };
                     *
                     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
                     * // => true
                     *
                     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
                     * // => false
                     */
                    function conformsTo(object, source) {
                        return source == null || baseConformsTo(object, source, keys(source));
                    }

                    /**
                     * Performs a
                     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                     * comparison between two values to determine if they are equivalent.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Lang
                     * @param {*} value The value to compare.
                     * @param {*} other The other value to compare.
                     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
                     * @example
                     *
                     * var object = { 'a': 1 };
                     * var other = { 'a': 1 };
                     *
                     * _.eq(object, object);
                     * // => true
                     *
                     * _.eq(object, other);
                     * // => false
                     *
                     * _.eq('a', 'a');
                     * // => true
                     *
                     * _.eq('a', Object('a'));
                     * // => false
                     *
                     * _.eq(NaN, NaN);
                     * // => true
                     */
                    function eq(value, other) {
                        return value === other || (value !== value && other !== other);
                    }

                    /**
                     * Checks if `value` is greater than `other`.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.9.0
                     * @category Lang
                     * @param {*} value The value to compare.
                     * @param {*} other The other value to compare.
                     * @returns {boolean} Returns `true` if `value` is greater than `other`,
                     *  else `false`.
                     * @see _.lt
                     * @example
                     *
                     * _.gt(3, 1);
                     * // => true
                     *
                     * _.gt(3, 3);
                     * // => false
                     *
                     * _.gt(1, 3);
                     * // => false
                     */
                    var gt = createRelationalOperation(baseGt);

                    /**
                     * Checks if `value` is greater than or equal to `other`.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.9.0
                     * @category Lang
                     * @param {*} value The value to compare.
                     * @param {*} other The other value to compare.
                     * @returns {boolean} Returns `true` if `value` is greater than or equal to
                     *  `other`, else `false`.
                     * @see _.lte
                     * @example
                     *
                     * _.gte(3, 1);
                     * // => true
                     *
                     * _.gte(3, 3);
                     * // => true
                     *
                     * _.gte(1, 3);
                     * // => false
                     */
                    var gte = createRelationalOperation(function(value, other) {
                        return value >= other;
                    });

                    /**
                     * Checks if `value` is likely an `arguments` object.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
                     *  else `false`.
                     * @example
                     *
                     * _.isArguments(function() { return arguments; }());
                     * // => true
                     *
                     * _.isArguments([1, 2, 3]);
                     * // => false
                     */
                    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
                        return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
                            !propertyIsEnumerable.call(value, 'callee');
                    };

                    /**
                     * Checks if `value` is classified as an `Array` object.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
                     * @example
                     *
                     * _.isArray([1, 2, 3]);
                     * // => true
                     *
                     * _.isArray(document.body.children);
                     * // => false
                     *
                     * _.isArray('abc');
                     * // => false
                     *
                     * _.isArray(_.noop);
                     * // => false
                     */
                    var isArray = Array.isArray;

                    /**
                     * Checks if `value` is classified as an `ArrayBuffer` object.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.3.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
                     * @example
                     *
                     * _.isArrayBuffer(new ArrayBuffer(2));
                     * // => true
                     *
                     * _.isArrayBuffer(new Array(2));
                     * // => false
                     */
                    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

                    /**
                     * Checks if `value` is array-like. A value is considered array-like if it's
                     * not a function and has a `value.length` that's an integer greater than or
                     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
                     * @example
                     *
                     * _.isArrayLike([1, 2, 3]);
                     * // => true
                     *
                     * _.isArrayLike(document.body.children);
                     * // => true
                     *
                     * _.isArrayLike('abc');
                     * // => true
                     *
                     * _.isArrayLike(_.noop);
                     * // => false
                     */
                    function isArrayLike(value) {
                        return value != null && isLength(value.length) && !isFunction(value);
                    }

                    /**
                     * This method is like `_.isArrayLike` except that it also checks if `value`
                     * is an object.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is an array-like object,
                     *  else `false`.
                     * @example
                     *
                     * _.isArrayLikeObject([1, 2, 3]);
                     * // => true
                     *
                     * _.isArrayLikeObject(document.body.children);
                     * // => true
                     *
                     * _.isArrayLikeObject('abc');
                     * // => false
                     *
                     * _.isArrayLikeObject(_.noop);
                     * // => false
                     */
                    function isArrayLikeObject(value) {
                        return isObjectLike(value) && isArrayLike(value);
                    }

                    /**
                     * Checks if `value` is classified as a boolean primitive or object.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
                     * @example
                     *
                     * _.isBoolean(false);
                     * // => true
                     *
                     * _.isBoolean(null);
                     * // => false
                     */
                    function isBoolean(value) {
                        return value === true || value === false ||
                            (isObjectLike(value) && baseGetTag(value) == boolTag);
                    }

                    /**
                     * Checks if `value` is a buffer.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.3.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
                     * @example
                     *
                     * _.isBuffer(new Buffer(2));
                     * // => true
                     *
                     * _.isBuffer(new Uint8Array(2));
                     * // => false
                     */
                    var isBuffer = nativeIsBuffer || stubFalse;

                    /**
                     * Checks if `value` is classified as a `Date` object.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
                     * @example
                     *
                     * _.isDate(new Date);
                     * // => true
                     *
                     * _.isDate('Mon April 23 2012');
                     * // => false
                     */
                    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

                    /**
                     * Checks if `value` is likely a DOM element.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
                     * @example
                     *
                     * _.isElement(document.body);
                     * // => true
                     *
                     * _.isElement('<body>');
                     * // => false
                     */
                    function isElement(value) {
                        return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
                    }

                    /**
                     * Checks if `value` is an empty object, collection, map, or set.
                     *
                     * Objects are considered empty if they have no own enumerable string keyed
                     * properties.
                     *
                     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
                     * jQuery-like collections are considered empty if they have a `length` of `0`.
                     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
                     * @example
                     *
                     * _.isEmpty(null);
                     * // => true
                     *
                     * _.isEmpty(true);
                     * // => true
                     *
                     * _.isEmpty(1);
                     * // => true
                     *
                     * _.isEmpty([1, 2, 3]);
                     * // => false
                     *
                     * _.isEmpty({ 'a': 1 });
                     * // => false
                     */
                    function isEmpty(value) {
                        if (value == null) {
                            return true;
                        }
                        if (isArrayLike(value) &&
                            (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
                                isBuffer(value) || isTypedArray(value) || isArguments(value))) {
                            return !value.length;
                        }
                        var tag = getTag(value);
                        if (tag == mapTag || tag == setTag) {
                            return !value.size;
                        }
                        if (isPrototype(value)) {
                            return !baseKeys(value).length;
                        }
                        for (var key in value) {
                            if (hasOwnProperty.call(value, key)) {
                                return false;
                            }
                        }
                        return true;
                    }

                    /**
                     * Performs a deep comparison between two values to determine if they are
                     * equivalent.
                     *
                     * **Note:** This method supports comparing arrays, array buffers, booleans,
                     * date objects, error objects, maps, numbers, `Object` objects, regexes,
                     * sets, strings, symbols, and typed arrays. `Object` objects are compared
                     * by their own, not inherited, enumerable properties. Functions and DOM
                     * nodes are compared by strict equality, i.e. `===`.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Lang
                     * @param {*} value The value to compare.
                     * @param {*} other The other value to compare.
                     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
                     * @example
                     *
                     * var object = { 'a': 1 };
                     * var other = { 'a': 1 };
                     *
                     * _.isEqual(object, other);
                     * // => true
                     *
                     * object === other;
                     * // => false
                     */
                    function isEqual(value, other) {
                        return baseIsEqual(value, other);
                    }

                    /**
                     * This method is like `_.isEqual` except that it accepts `customizer` which
                     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
                     * are handled by the method instead. The `customizer` is invoked with up to
                     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Lang
                     * @param {*} value The value to compare.
                     * @param {*} other The other value to compare.
                     * @param {Function} [customizer] The function to customize comparisons.
                     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
                     * @example
                     *
                     * function isGreeting(value) {
                     *   return /^h(?:i|ello)$/.test(value);
                     * }
                     *
                     * function customizer(objValue, othValue) {
                     *   if (isGreeting(objValue) && isGreeting(othValue)) {
                     *     return true;
                     *   }
                     * }
                     *
                     * var array = ['hello', 'goodbye'];
                     * var other = ['hi', 'goodbye'];
                     *
                     * _.isEqualWith(array, other, customizer);
                     * // => true
                     */
                    function isEqualWith(value, other, customizer) {
                        customizer = typeof customizer == 'function' ? customizer : undefined;
                        var result = customizer ? customizer(value, other) : undefined;
                        return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
                    }

                    /**
                     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
                     * `SyntaxError`, `TypeError`, or `URIError` object.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
                     * @example
                     *
                     * _.isError(new Error);
                     * // => true
                     *
                     * _.isError(Error);
                     * // => false
                     */
                    function isError(value) {
                        if (!isObjectLike(value)) {
                            return false;
                        }
                        var tag = baseGetTag(value);
                        return tag == errorTag || tag == domExcTag ||
                            (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
                    }

                    /**
                     * Checks if `value` is a finite primitive number.
                     *
                     * **Note:** This method is based on
                     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
                     * @example
                     *
                     * _.isFinite(3);
                     * // => true
                     *
                     * _.isFinite(Number.MIN_VALUE);
                     * // => true
                     *
                     * _.isFinite(Infinity);
                     * // => false
                     *
                     * _.isFinite('3');
                     * // => false
                     */
                    function isFinite(value) {
                        return typeof value == 'number' && nativeIsFinite(value);
                    }

                    /**
                     * Checks if `value` is classified as a `Function` object.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
                     * @example
                     *
                     * _.isFunction(_);
                     * // => true
                     *
                     * _.isFunction(/abc/);
                     * // => false
                     */
                    function isFunction(value) {
                        if (!isObject(value)) {
                            return false;
                        }
                        // The use of `Object#toString` avoids issues with the `typeof` operator
                        // in Safari 9 which returns 'object' for typed arrays and other constructors.
                        var tag = baseGetTag(value);
                        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
                    }

                    /**
                     * Checks if `value` is an integer.
                     *
                     * **Note:** This method is based on
                     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
                     * @example
                     *
                     * _.isInteger(3);
                     * // => true
                     *
                     * _.isInteger(Number.MIN_VALUE);
                     * // => false
                     *
                     * _.isInteger(Infinity);
                     * // => false
                     *
                     * _.isInteger('3');
                     * // => false
                     */
                    function isInteger(value) {
                        return typeof value == 'number' && value == toInteger(value);
                    }

                    /**
                     * Checks if `value` is a valid array-like length.
                     *
                     * **Note:** This method is loosely based on
                     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
                     * @example
                     *
                     * _.isLength(3);
                     * // => true
                     *
                     * _.isLength(Number.MIN_VALUE);
                     * // => false
                     *
                     * _.isLength(Infinity);
                     * // => false
                     *
                     * _.isLength('3');
                     * // => false
                     */
                    function isLength(value) {
                        return typeof value == 'number' &&
                            value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
                    }

                    /**
                     * Checks if `value` is the
                     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
                     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
                     * @example
                     *
                     * _.isObject({});
                     * // => true
                     *
                     * _.isObject([1, 2, 3]);
                     * // => true
                     *
                     * _.isObject(_.noop);
                     * // => true
                     *
                     * _.isObject(null);
                     * // => false
                     */
                    function isObject(value) {
                        var type = typeof value;
                        return value != null && (type == 'object' || type == 'function');
                    }

                    /**
                     * Checks if `value` is object-like. A value is object-like if it's not `null`
                     * and has a `typeof` result of "object".
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
                     * @example
                     *
                     * _.isObjectLike({});
                     * // => true
                     *
                     * _.isObjectLike([1, 2, 3]);
                     * // => true
                     *
                     * _.isObjectLike(_.noop);
                     * // => false
                     *
                     * _.isObjectLike(null);
                     * // => false
                     */
                    function isObjectLike(value) {
                        return value != null && typeof value == 'object';
                    }

                    /**
                     * Checks if `value` is classified as a `Map` object.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.3.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
                     * @example
                     *
                     * _.isMap(new Map);
                     * // => true
                     *
                     * _.isMap(new WeakMap);
                     * // => false
                     */
                    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

                    /**
                     * Performs a partial deep comparison between `object` and `source` to
                     * determine if `object` contains equivalent property values.
                     *
                     * **Note:** This method is equivalent to `_.matches` when `source` is
                     * partially applied.
                     *
                     * Partial comparisons will match empty array and empty object `source`
                     * values against any array or object value, respectively. See `_.isEqual`
                     * for a list of supported value comparisons.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Lang
                     * @param {Object} object The object to inspect.
                     * @param {Object} source The object of property values to match.
                     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
                     * @example
                     *
                     * var object = { 'a': 1, 'b': 2 };
                     *
                     * _.isMatch(object, { 'b': 2 });
                     * // => true
                     *
                     * _.isMatch(object, { 'b': 1 });
                     * // => false
                     */
                    function isMatch(object, source) {
                        return object === source || baseIsMatch(object, source, getMatchData(source));
                    }

                    /**
                     * This method is like `_.isMatch` except that it accepts `customizer` which
                     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
                     * are handled by the method instead. The `customizer` is invoked with five
                     * arguments: (objValue, srcValue, index|key, object, source).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Lang
                     * @param {Object} object The object to inspect.
                     * @param {Object} source The object of property values to match.
                     * @param {Function} [customizer] The function to customize comparisons.
                     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
                     * @example
                     *
                     * function isGreeting(value) {
                     *   return /^h(?:i|ello)$/.test(value);
                     * }
                     *
                     * function customizer(objValue, srcValue) {
                     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
                     *     return true;
                     *   }
                     * }
                     *
                     * var object = { 'greeting': 'hello' };
                     * var source = { 'greeting': 'hi' };
                     *
                     * _.isMatchWith(object, source, customizer);
                     * // => true
                     */
                    function isMatchWith(object, source, customizer) {
                        customizer = typeof customizer == 'function' ? customizer : undefined;
                        return baseIsMatch(object, source, getMatchData(source), customizer);
                    }

                    /**
                     * Checks if `value` is `NaN`.
                     *
                     * **Note:** This method is based on
                     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
                     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
                     * `undefined` and other non-number values.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
                     * @example
                     *
                     * _.isNaN(NaN);
                     * // => true
                     *
                     * _.isNaN(new Number(NaN));
                     * // => true
                     *
                     * isNaN(undefined);
                     * // => true
                     *
                     * _.isNaN(undefined);
                     * // => false
                     */
                    function isNaN(value) {
                        // An `NaN` primitive is the only value that is not equal to itself.
                        // Perform the `toStringTag` check first to avoid errors with some
                        // ActiveX objects in IE.
                        return isNumber(value) && value != +value;
                    }

                    /**
                     * Checks if `value` is a pristine native function.
                     *
                     * **Note:** This method can't reliably detect native functions in the presence
                     * of the core-js package because core-js circumvents this kind of detection.
                     * Despite multiple requests, the core-js maintainer has made it clear: any
                     * attempt to fix the detection will be obstructed. As a result, we're left
                     * with little choice but to throw an error. Unfortunately, this also affects
                     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
                     * which rely on core-js.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a native function,
                     *  else `false`.
                     * @example
                     *
                     * _.isNative(Array.prototype.push);
                     * // => true
                     *
                     * _.isNative(_);
                     * // => false
                     */
                    function isNative(value) {
                        if (isMaskable(value)) {
                            throw new Error(CORE_ERROR_TEXT);
                        }
                        return baseIsNative(value);
                    }

                    /**
                     * Checks if `value` is `null`.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
                     * @example
                     *
                     * _.isNull(null);
                     * // => true
                     *
                     * _.isNull(void 0);
                     * // => false
                     */
                    function isNull(value) {
                        return value === null;
                    }

                    /**
                     * Checks if `value` is `null` or `undefined`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
                     * @example
                     *
                     * _.isNil(null);
                     * // => true
                     *
                     * _.isNil(void 0);
                     * // => true
                     *
                     * _.isNil(NaN);
                     * // => false
                     */
                    function isNil(value) {
                        return value == null;
                    }

                    /**
                     * Checks if `value` is classified as a `Number` primitive or object.
                     *
                     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
                     * classified as numbers, use the `_.isFinite` method.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
                     * @example
                     *
                     * _.isNumber(3);
                     * // => true
                     *
                     * _.isNumber(Number.MIN_VALUE);
                     * // => true
                     *
                     * _.isNumber(Infinity);
                     * // => true
                     *
                     * _.isNumber('3');
                     * // => false
                     */
                    function isNumber(value) {
                        return typeof value == 'number' ||
                            (isObjectLike(value) && baseGetTag(value) == numberTag);
                    }

                    /**
                     * Checks if `value` is a plain object, that is, an object created by the
                     * `Object` constructor or one with a `[[Prototype]]` of `null`.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.8.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
                     * @example
                     *
                     * function Foo() {
                     *   this.a = 1;
                     * }
                     *
                     * _.isPlainObject(new Foo);
                     * // => false
                     *
                     * _.isPlainObject([1, 2, 3]);
                     * // => false
                     *
                     * _.isPlainObject({ 'x': 0, 'y': 0 });
                     * // => true
                     *
                     * _.isPlainObject(Object.create(null));
                     * // => true
                     */
                    function isPlainObject(value) {
                        if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
                            return false;
                        }
                        var proto = getPrototype(value);
                        if (proto === null) {
                            return true;
                        }
                        var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
                        return typeof Ctor == 'function' && Ctor instanceof Ctor &&
                            funcToString.call(Ctor) == objectCtorString;
                    }

                    /**
                     * Checks if `value` is classified as a `RegExp` object.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
                     * @example
                     *
                     * _.isRegExp(/abc/);
                     * // => true
                     *
                     * _.isRegExp('/abc/');
                     * // => false
                     */
                    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

                    /**
                     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
                     * double precision number which isn't the result of a rounded unsafe integer.
                     *
                     * **Note:** This method is based on
                     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
                     * @example
                     *
                     * _.isSafeInteger(3);
                     * // => true
                     *
                     * _.isSafeInteger(Number.MIN_VALUE);
                     * // => false
                     *
                     * _.isSafeInteger(Infinity);
                     * // => false
                     *
                     * _.isSafeInteger('3');
                     * // => false
                     */
                    function isSafeInteger(value) {
                        return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
                    }

                    /**
                     * Checks if `value` is classified as a `Set` object.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.3.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
                     * @example
                     *
                     * _.isSet(new Set);
                     * // => true
                     *
                     * _.isSet(new WeakSet);
                     * // => false
                     */
                    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

                    /**
                     * Checks if `value` is classified as a `String` primitive or object.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
                     * @example
                     *
                     * _.isString('abc');
                     * // => true
                     *
                     * _.isString(1);
                     * // => false
                     */
                    function isString(value) {
                        return typeof value == 'string' ||
                            (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
                    }

                    /**
                     * Checks if `value` is classified as a `Symbol` primitive or object.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
                     * @example
                     *
                     * _.isSymbol(Symbol.iterator);
                     * // => true
                     *
                     * _.isSymbol('abc');
                     * // => false
                     */
                    function isSymbol(value) {
                        return typeof value == 'symbol' ||
                            (isObjectLike(value) && baseGetTag(value) == symbolTag);
                    }

                    /**
                     * Checks if `value` is classified as a typed array.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
                     * @example
                     *
                     * _.isTypedArray(new Uint8Array);
                     * // => true
                     *
                     * _.isTypedArray([]);
                     * // => false
                     */
                    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

                    /**
                     * Checks if `value` is `undefined`.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
                     * @example
                     *
                     * _.isUndefined(void 0);
                     * // => true
                     *
                     * _.isUndefined(null);
                     * // => false
                     */
                    function isUndefined(value) {
                        return value === undefined;
                    }

                    /**
                     * Checks if `value` is classified as a `WeakMap` object.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.3.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
                     * @example
                     *
                     * _.isWeakMap(new WeakMap);
                     * // => true
                     *
                     * _.isWeakMap(new Map);
                     * // => false
                     */
                    function isWeakMap(value) {
                        return isObjectLike(value) && getTag(value) == weakMapTag;
                    }

                    /**
                     * Checks if `value` is classified as a `WeakSet` object.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.3.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
                     * @example
                     *
                     * _.isWeakSet(new WeakSet);
                     * // => true
                     *
                     * _.isWeakSet(new Set);
                     * // => false
                     */
                    function isWeakSet(value) {
                        return isObjectLike(value) && baseGetTag(value) == weakSetTag;
                    }

                    /**
                     * Checks if `value` is less than `other`.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.9.0
                     * @category Lang
                     * @param {*} value The value to compare.
                     * @param {*} other The other value to compare.
                     * @returns {boolean} Returns `true` if `value` is less than `other`,
                     *  else `false`.
                     * @see _.gt
                     * @example
                     *
                     * _.lt(1, 3);
                     * // => true
                     *
                     * _.lt(3, 3);
                     * // => false
                     *
                     * _.lt(3, 1);
                     * // => false
                     */
                    var lt = createRelationalOperation(baseLt);

                    /**
                     * Checks if `value` is less than or equal to `other`.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.9.0
                     * @category Lang
                     * @param {*} value The value to compare.
                     * @param {*} other The other value to compare.
                     * @returns {boolean} Returns `true` if `value` is less than or equal to
                     *  `other`, else `false`.
                     * @see _.gte
                     * @example
                     *
                     * _.lte(1, 3);
                     * // => true
                     *
                     * _.lte(3, 3);
                     * // => true
                     *
                     * _.lte(3, 1);
                     * // => false
                     */
                    var lte = createRelationalOperation(function(value, other) {
                        return value <= other;
                    });

                    /**
                     * Converts `value` to an array.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Lang
                     * @param {*} value The value to convert.
                     * @returns {Array} Returns the converted array.
                     * @example
                     *
                     * _.toArray({ 'a': 1, 'b': 2 });
                     * // => [1, 2]
                     *
                     * _.toArray('abc');
                     * // => ['a', 'b', 'c']
                     *
                     * _.toArray(1);
                     * // => []
                     *
                     * _.toArray(null);
                     * // => []
                     */
                    function toArray(value) {
                        if (!value) {
                            return [];
                        }
                        if (isArrayLike(value)) {
                            return isString(value) ? stringToArray(value) : copyArray(value);
                        }
                        if (symIterator && value[symIterator]) {
                            return iteratorToArray(value[symIterator]());
                        }
                        var tag = getTag(value),
                            func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

                        return func(value);
                    }

                    /**
                     * Converts `value` to a finite number.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.12.0
                     * @category Lang
                     * @param {*} value The value to convert.
                     * @returns {number} Returns the converted number.
                     * @example
                     *
                     * _.toFinite(3.2);
                     * // => 3.2
                     *
                     * _.toFinite(Number.MIN_VALUE);
                     * // => 5e-324
                     *
                     * _.toFinite(Infinity);
                     * // => 1.7976931348623157e+308
                     *
                     * _.toFinite('3.2');
                     * // => 3.2
                     */
                    function toFinite(value) {
                        if (!value) {
                            return value === 0 ? value : 0;
                        }
                        value = toNumber(value);
                        if (value === INFINITY || value === -INFINITY) {
                            var sign = (value < 0 ? -1 : 1);
                            return sign * MAX_INTEGER;
                        }
                        return value === value ? value : 0;
                    }

                    /**
                     * Converts `value` to an integer.
                     *
                     * **Note:** This method is loosely based on
                     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Lang
                     * @param {*} value The value to convert.
                     * @returns {number} Returns the converted integer.
                     * @example
                     *
                     * _.toInteger(3.2);
                     * // => 3
                     *
                     * _.toInteger(Number.MIN_VALUE);
                     * // => 0
                     *
                     * _.toInteger(Infinity);
                     * // => 1.7976931348623157e+308
                     *
                     * _.toInteger('3.2');
                     * // => 3
                     */
                    function toInteger(value) {
                        var result = toFinite(value),
                            remainder = result % 1;

                        return result === result ? (remainder ? result - remainder : result) : 0;
                    }

                    /**
                     * Converts `value` to an integer suitable for use as the length of an
                     * array-like object.
                     *
                     * **Note:** This method is based on
                     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Lang
                     * @param {*} value The value to convert.
                     * @returns {number} Returns the converted integer.
                     * @example
                     *
                     * _.toLength(3.2);
                     * // => 3
                     *
                     * _.toLength(Number.MIN_VALUE);
                     * // => 0
                     *
                     * _.toLength(Infinity);
                     * // => 4294967295
                     *
                     * _.toLength('3.2');
                     * // => 3
                     */
                    function toLength(value) {
                        return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
                    }

                    /**
                     * Converts `value` to a number.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Lang
                     * @param {*} value The value to process.
                     * @returns {number} Returns the number.
                     * @example
                     *
                     * _.toNumber(3.2);
                     * // => 3.2
                     *
                     * _.toNumber(Number.MIN_VALUE);
                     * // => 5e-324
                     *
                     * _.toNumber(Infinity);
                     * // => Infinity
                     *
                     * _.toNumber('3.2');
                     * // => 3.2
                     */
                    function toNumber(value) {
                        if (typeof value == 'number') {
                            return value;
                        }
                        if (isSymbol(value)) {
                            return NAN;
                        }
                        if (isObject(value)) {
                            var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
                            value = isObject(other) ? (other + '') : other;
                        }
                        if (typeof value != 'string') {
                            return value === 0 ? value : +value;
                        }
                        value = value.replace(reTrim, '');
                        var isBinary = reIsBinary.test(value);
                        return (isBinary || reIsOctal.test(value)) ?
                            freeParseInt(value.slice(2), isBinary ? 2 : 8) :
                            (reIsBadHex.test(value) ? NAN : +value);
                    }

                    /**
                     * Converts `value` to a plain object flattening inherited enumerable string
                     * keyed properties of `value` to own properties of the plain object.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Lang
                     * @param {*} value The value to convert.
                     * @returns {Object} Returns the converted plain object.
                     * @example
                     *
                     * function Foo() {
                     *   this.b = 2;
                     * }
                     *
                     * Foo.prototype.c = 3;
                     *
                     * _.assign({ 'a': 1 }, new Foo);
                     * // => { 'a': 1, 'b': 2 }
                     *
                     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
                     * // => { 'a': 1, 'b': 2, 'c': 3 }
                     */
                    function toPlainObject(value) {
                        return copyObject(value, keysIn(value));
                    }

                    /**
                     * Converts `value` to a safe integer. A safe integer can be compared and
                     * represented correctly.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Lang
                     * @param {*} value The value to convert.
                     * @returns {number} Returns the converted integer.
                     * @example
                     *
                     * _.toSafeInteger(3.2);
                     * // => 3
                     *
                     * _.toSafeInteger(Number.MIN_VALUE);
                     * // => 0
                     *
                     * _.toSafeInteger(Infinity);
                     * // => 9007199254740991
                     *
                     * _.toSafeInteger('3.2');
                     * // => 3
                     */
                    function toSafeInteger(value) {
                        return value ?
                            baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) :
                            (value === 0 ? value : 0);
                    }

                    /**
                     * Converts `value` to a string. An empty string is returned for `null`
                     * and `undefined` values. The sign of `-0` is preserved.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Lang
                     * @param {*} value The value to convert.
                     * @returns {string} Returns the converted string.
                     * @example
                     *
                     * _.toString(null);
                     * // => ''
                     *
                     * _.toString(-0);
                     * // => '-0'
                     *
                     * _.toString([1, 2, 3]);
                     * // => '1,2,3'
                     */
                    function toString(value) {
                        return value == null ? '' : baseToString(value);
                    }

                    /*------------------------------------------------------------------------*/

                    /**
                     * Assigns own enumerable string keyed properties of source objects to the
                     * destination object. Source objects are applied from left to right.
                     * Subsequent sources overwrite property assignments of previous sources.
                     *
                     * **Note:** This method mutates `object` and is loosely based on
                     * [`Object.assign`](https://mdn.io/Object/assign).
                     *
                     * @static
                     * @memberOf _
                     * @since 0.10.0
                     * @category Object
                     * @param {Object} object The destination object.
                     * @param {...Object} [sources] The source objects.
                     * @returns {Object} Returns `object`.
                     * @see _.assignIn
                     * @example
                     *
                     * function Foo() {
                     *   this.a = 1;
                     * }
                     *
                     * function Bar() {
                     *   this.c = 3;
                     * }
                     *
                     * Foo.prototype.b = 2;
                     * Bar.prototype.d = 4;
                     *
                     * _.assign({ 'a': 0 }, new Foo, new Bar);
                     * // => { 'a': 1, 'c': 3 }
                     */
                    var assign = createAssigner(function(object, source) {
                        if (isPrototype(source) || isArrayLike(source)) {
                            copyObject(source, keys(source), object);
                            return;
                        }
                        for (var key in source) {
                            if (hasOwnProperty.call(source, key)) {
                                assignValue(object, key, source[key]);
                            }
                        }
                    });

                    /**
                     * This method is like `_.assign` except that it iterates over own and
                     * inherited source properties.
                     *
                     * **Note:** This method mutates `object`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @alias extend
                     * @category Object
                     * @param {Object} object The destination object.
                     * @param {...Object} [sources] The source objects.
                     * @returns {Object} Returns `object`.
                     * @see _.assign
                     * @example
                     *
                     * function Foo() {
                     *   this.a = 1;
                     * }
                     *
                     * function Bar() {
                     *   this.c = 3;
                     * }
                     *
                     * Foo.prototype.b = 2;
                     * Bar.prototype.d = 4;
                     *
                     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
                     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
                     */
                    var assignIn = createAssigner(function(object, source) {
                        copyObject(source, keysIn(source), object);
                    });

                    /**
                     * This method is like `_.assignIn` except that it accepts `customizer`
                     * which is invoked to produce the assigned values. If `customizer` returns
                     * `undefined`, assignment is handled by the method instead. The `customizer`
                     * is invoked with five arguments: (objValue, srcValue, key, object, source).
                     *
                     * **Note:** This method mutates `object`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @alias extendWith
                     * @category Object
                     * @param {Object} object The destination object.
                     * @param {...Object} sources The source objects.
                     * @param {Function} [customizer] The function to customize assigned values.
                     * @returns {Object} Returns `object`.
                     * @see _.assignWith
                     * @example
                     *
                     * function customizer(objValue, srcValue) {
                     *   return _.isUndefined(objValue) ? srcValue : objValue;
                     * }
                     *
                     * var defaults = _.partialRight(_.assignInWith, customizer);
                     *
                     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
                     * // => { 'a': 1, 'b': 2 }
                     */
                    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
                        copyObject(source, keysIn(source), object, customizer);
                    });

                    /**
                     * This method is like `_.assign` except that it accepts `customizer`
                     * which is invoked to produce the assigned values. If `customizer` returns
                     * `undefined`, assignment is handled by the method instead. The `customizer`
                     * is invoked with five arguments: (objValue, srcValue, key, object, source).
                     *
                     * **Note:** This method mutates `object`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Object
                     * @param {Object} object The destination object.
                     * @param {...Object} sources The source objects.
                     * @param {Function} [customizer] The function to customize assigned values.
                     * @returns {Object} Returns `object`.
                     * @see _.assignInWith
                     * @example
                     *
                     * function customizer(objValue, srcValue) {
                     *   return _.isUndefined(objValue) ? srcValue : objValue;
                     * }
                     *
                     * var defaults = _.partialRight(_.assignWith, customizer);
                     *
                     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
                     * // => { 'a': 1, 'b': 2 }
                     */
                    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
                        copyObject(source, keys(source), object, customizer);
                    });

                    /**
                     * Creates an array of values corresponding to `paths` of `object`.
                     *
                     * @static
                     * @memberOf _
                     * @since 1.0.0
                     * @category Object
                     * @param {Object} object The object to iterate over.
                     * @param {...(string|string[])} [paths] The property paths to pick.
                     * @returns {Array} Returns the picked values.
                     * @example
                     *
                     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
                     *
                     * _.at(object, ['a[0].b.c', 'a[1]']);
                     * // => [3, 4]
                     */
                    var at = flatRest(baseAt);

                    /**
                     * Creates an object that inherits from the `prototype` object. If a
                     * `properties` object is given, its own enumerable string keyed properties
                     * are assigned to the created object.
                     *
                     * @static
                     * @memberOf _
                     * @since 2.3.0
                     * @category Object
                     * @param {Object} prototype The object to inherit from.
                     * @param {Object} [properties] The properties to assign to the object.
                     * @returns {Object} Returns the new object.
                     * @example
                     *
                     * function Shape() {
                     *   this.x = 0;
                     *   this.y = 0;
                     * }
                     *
                     * function Circle() {
                     *   Shape.call(this);
                     * }
                     *
                     * Circle.prototype = _.create(Shape.prototype, {
                     *   'constructor': Circle
                     * });
                     *
                     * var circle = new Circle;
                     * circle instanceof Circle;
                     * // => true
                     *
                     * circle instanceof Shape;
                     * // => true
                     */
                    function create(prototype, properties) {
                        var result = baseCreate(prototype);
                        return properties == null ? result : baseAssign(result, properties);
                    }

                    /**
                     * Assigns own and inherited enumerable string keyed properties of source
                     * objects to the destination object for all destination properties that
                     * resolve to `undefined`. Source objects are applied from left to right.
                     * Once a property is set, additional values of the same property are ignored.
                     *
                     * **Note:** This method mutates `object`.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Object
                     * @param {Object} object The destination object.
                     * @param {...Object} [sources] The source objects.
                     * @returns {Object} Returns `object`.
                     * @see _.defaultsDeep
                     * @example
                     *
                     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
                     * // => { 'a': 1, 'b': 2 }
                     */
                    var defaults = baseRest(function(args) {
                        args.push(undefined, customDefaultsAssignIn);
                        return apply(assignInWith, undefined, args);
                    });

                    /**
                     * This method is like `_.defaults` except that it recursively assigns
                     * default properties.
                     *
                     * **Note:** This method mutates `object`.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.10.0
                     * @category Object
                     * @param {Object} object The destination object.
                     * @param {...Object} [sources] The source objects.
                     * @returns {Object} Returns `object`.
                     * @see _.defaults
                     * @example
                     *
                     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
                     * // => { 'a': { 'b': 2, 'c': 3 } }
                     */
                    var defaultsDeep = baseRest(function(args) {
                        args.push(undefined, customDefaultsMerge);
                        return apply(mergeWith, undefined, args);
                    });

                    /**
                     * This method is like `_.find` except that it returns the key of the first
                     * element `predicate` returns truthy for instead of the element itself.
                     *
                     * @static
                     * @memberOf _
                     * @since 1.1.0
                     * @category Object
                     * @param {Object} object The object to inspect.
                     * @param {Function} [predicate=_.identity] The function invoked per iteration.
                     * @returns {string|undefined} Returns the key of the matched element,
                     *  else `undefined`.
                     * @example
                     *
                     * var users = {
                     *   'barney':  { 'age': 36, 'active': true },
                     *   'fred':    { 'age': 40, 'active': false },
                     *   'pebbles': { 'age': 1,  'active': true }
                     * };
                     *
                     * _.findKey(users, function(o) { return o.age < 40; });
                     * // => 'barney' (iteration order is not guaranteed)
                     *
                     * // The `_.matches` iteratee shorthand.
                     * _.findKey(users, { 'age': 1, 'active': true });
                     * // => 'pebbles'
                     *
                     * // The `_.matchesProperty` iteratee shorthand.
                     * _.findKey(users, ['active', false]);
                     * // => 'fred'
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.findKey(users, 'active');
                     * // => 'barney'
                     */
                    function findKey(object, predicate) {
                        return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
                    }

                    /**
                     * This method is like `_.findKey` except that it iterates over elements of
                     * a collection in the opposite order.
                     *
                     * @static
                     * @memberOf _
                     * @since 2.0.0
                     * @category Object
                     * @param {Object} object The object to inspect.
                     * @param {Function} [predicate=_.identity] The function invoked per iteration.
                     * @returns {string|undefined} Returns the key of the matched element,
                     *  else `undefined`.
                     * @example
                     *
                     * var users = {
                     *   'barney':  { 'age': 36, 'active': true },
                     *   'fred':    { 'age': 40, 'active': false },
                     *   'pebbles': { 'age': 1,  'active': true }
                     * };
                     *
                     * _.findLastKey(users, function(o) { return o.age < 40; });
                     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
                     *
                     * // The `_.matches` iteratee shorthand.
                     * _.findLastKey(users, { 'age': 36, 'active': true });
                     * // => 'barney'
                     *
                     * // The `_.matchesProperty` iteratee shorthand.
                     * _.findLastKey(users, ['active', false]);
                     * // => 'fred'
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.findLastKey(users, 'active');
                     * // => 'pebbles'
                     */
                    function findLastKey(object, predicate) {
                        return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
                    }

                    /**
                     * Iterates over own and inherited enumerable string keyed properties of an
                     * object and invokes `iteratee` for each property. The iteratee is invoked
                     * with three arguments: (value, key, object). Iteratee functions may exit
                     * iteration early by explicitly returning `false`.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.3.0
                     * @category Object
                     * @param {Object} object The object to iterate over.
                     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                     * @returns {Object} Returns `object`.
                     * @see _.forInRight
                     * @example
                     *
                     * function Foo() {
                     *   this.a = 1;
                     *   this.b = 2;
                     * }
                     *
                     * Foo.prototype.c = 3;
                     *
                     * _.forIn(new Foo, function(value, key) {
                     *   console.log(key);
                     * });
                     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
                     */
                    function forIn(object, iteratee) {
                        return object == null ?
                            object :
                            baseFor(object, getIteratee(iteratee, 3), keysIn);
                    }

                    /**
                     * This method is like `_.forIn` except that it iterates over properties of
                     * `object` in the opposite order.
                     *
                     * @static
                     * @memberOf _
                     * @since 2.0.0
                     * @category Object
                     * @param {Object} object The object to iterate over.
                     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                     * @returns {Object} Returns `object`.
                     * @see _.forIn
                     * @example
                     *
                     * function Foo() {
                     *   this.a = 1;
                     *   this.b = 2;
                     * }
                     *
                     * Foo.prototype.c = 3;
                     *
                     * _.forInRight(new Foo, function(value, key) {
                     *   console.log(key);
                     * });
                     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
                     */
                    function forInRight(object, iteratee) {
                        return object == null ?
                            object :
                            baseForRight(object, getIteratee(iteratee, 3), keysIn);
                    }

                    /**
                     * Iterates over own enumerable string keyed properties of an object and
                     * invokes `iteratee` for each property. The iteratee is invoked with three
                     * arguments: (value, key, object). Iteratee functions may exit iteration
                     * early by explicitly returning `false`.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.3.0
                     * @category Object
                     * @param {Object} object The object to iterate over.
                     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                     * @returns {Object} Returns `object`.
                     * @see _.forOwnRight
                     * @example
                     *
                     * function Foo() {
                     *   this.a = 1;
                     *   this.b = 2;
                     * }
                     *
                     * Foo.prototype.c = 3;
                     *
                     * _.forOwn(new Foo, function(value, key) {
                     *   console.log(key);
                     * });
                     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
                     */
                    function forOwn(object, iteratee) {
                        return object && baseForOwn(object, getIteratee(iteratee, 3));
                    }

                    /**
                     * This method is like `_.forOwn` except that it iterates over properties of
                     * `object` in the opposite order.
                     *
                     * @static
                     * @memberOf _
                     * @since 2.0.0
                     * @category Object
                     * @param {Object} object The object to iterate over.
                     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                     * @returns {Object} Returns `object`.
                     * @see _.forOwn
                     * @example
                     *
                     * function Foo() {
                     *   this.a = 1;
                     *   this.b = 2;
                     * }
                     *
                     * Foo.prototype.c = 3;
                     *
                     * _.forOwnRight(new Foo, function(value, key) {
                     *   console.log(key);
                     * });
                     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
                     */
                    function forOwnRight(object, iteratee) {
                        return object && baseForOwnRight(object, getIteratee(iteratee, 3));
                    }

                    /**
                     * Creates an array of function property names from own enumerable properties
                     * of `object`.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Object
                     * @param {Object} object The object to inspect.
                     * @returns {Array} Returns the function names.
                     * @see _.functionsIn
                     * @example
                     *
                     * function Foo() {
                     *   this.a = _.constant('a');
                     *   this.b = _.constant('b');
                     * }
                     *
                     * Foo.prototype.c = _.constant('c');
                     *
                     * _.functions(new Foo);
                     * // => ['a', 'b']
                     */
                    function functions(object) {
                        return object == null ? [] : baseFunctions(object, keys(object));
                    }

                    /**
                     * Creates an array of function property names from own and inherited
                     * enumerable properties of `object`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Object
                     * @param {Object} object The object to inspect.
                     * @returns {Array} Returns the function names.
                     * @see _.functions
                     * @example
                     *
                     * function Foo() {
                     *   this.a = _.constant('a');
                     *   this.b = _.constant('b');
                     * }
                     *
                     * Foo.prototype.c = _.constant('c');
                     *
                     * _.functionsIn(new Foo);
                     * // => ['a', 'b', 'c']
                     */
                    function functionsIn(object) {
                        return object == null ? [] : baseFunctions(object, keysIn(object));
                    }

                    /**
                     * Gets the value at `path` of `object`. If the resolved value is
                     * `undefined`, the `defaultValue` is returned in its place.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.7.0
                     * @category Object
                     * @param {Object} object The object to query.
                     * @param {Array|string} path The path of the property to get.
                     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
                     * @returns {*} Returns the resolved value.
                     * @example
                     *
                     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
                     *
                     * _.get(object, 'a[0].b.c');
                     * // => 3
                     *
                     * _.get(object, ['a', '0', 'b', 'c']);
                     * // => 3
                     *
                     * _.get(object, 'a.b.c', 'default');
                     * // => 'default'
                     */
                    function get(object, path, defaultValue) {
                        var result = object == null ? undefined : baseGet(object, path);
                        return result === undefined ? defaultValue : result;
                    }

                    /**
                     * Checks if `path` is a direct property of `object`.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Object
                     * @param {Object} object The object to query.
                     * @param {Array|string} path The path to check.
                     * @returns {boolean} Returns `true` if `path` exists, else `false`.
                     * @example
                     *
                     * var object = { 'a': { 'b': 2 } };
                     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
                     *
                     * _.has(object, 'a');
                     * // => true
                     *
                     * _.has(object, 'a.b');
                     * // => true
                     *
                     * _.has(object, ['a', 'b']);
                     * // => true
                     *
                     * _.has(other, 'a');
                     * // => false
                     */
                    function has(object, path) {
                        return object != null && hasPath(object, path, baseHas);
                    }

                    /**
                     * Checks if `path` is a direct or inherited property of `object`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Object
                     * @param {Object} object The object to query.
                     * @param {Array|string} path The path to check.
                     * @returns {boolean} Returns `true` if `path` exists, else `false`.
                     * @example
                     *
                     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
                     *
                     * _.hasIn(object, 'a');
                     * // => true
                     *
                     * _.hasIn(object, 'a.b');
                     * // => true
                     *
                     * _.hasIn(object, ['a', 'b']);
                     * // => true
                     *
                     * _.hasIn(object, 'b');
                     * // => false
                     */
                    function hasIn(object, path) {
                        return object != null && hasPath(object, path, baseHasIn);
                    }

                    /**
                     * Creates an object composed of the inverted keys and values of `object`.
                     * If `object` contains duplicate values, subsequent values overwrite
                     * property assignments of previous values.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.7.0
                     * @category Object
                     * @param {Object} object The object to invert.
                     * @returns {Object} Returns the new inverted object.
                     * @example
                     *
                     * var object = { 'a': 1, 'b': 2, 'c': 1 };
                     *
                     * _.invert(object);
                     * // => { '1': 'c', '2': 'b' }
                     */
                    var invert = createInverter(function(result, value, key) {
                        result[value] = key;
                    }, constant(identity));

                    /**
                     * This method is like `_.invert` except that the inverted object is generated
                     * from the results of running each element of `object` thru `iteratee`. The
                     * corresponding inverted value of each inverted key is an array of keys
                     * responsible for generating the inverted value. The iteratee is invoked
                     * with one argument: (value).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.1.0
                     * @category Object
                     * @param {Object} object The object to invert.
                     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                     * @returns {Object} Returns the new inverted object.
                     * @example
                     *
                     * var object = { 'a': 1, 'b': 2, 'c': 1 };
                     *
                     * _.invertBy(object);
                     * // => { '1': ['a', 'c'], '2': ['b'] }
                     *
                     * _.invertBy(object, function(value) {
                     *   return 'group' + value;
                     * });
                     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
                     */
                    var invertBy = createInverter(function(result, value, key) {
                        if (hasOwnProperty.call(result, value)) {
                            result[value].push(key);
                        } else {
                            result[value] = [key];
                        }
                    }, getIteratee);

                    /**
                     * Invokes the method at `path` of `object`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Object
                     * @param {Object} object The object to query.
                     * @param {Array|string} path The path of the method to invoke.
                     * @param {...*} [args] The arguments to invoke the method with.
                     * @returns {*} Returns the result of the invoked method.
                     * @example
                     *
                     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
                     *
                     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
                     * // => [2, 3]
                     */
                    var invoke = baseRest(baseInvoke);

                    /**
                     * Creates an array of the own enumerable property names of `object`.
                     *
                     * **Note:** Non-object values are coerced to objects. See the
                     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
                     * for more details.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Object
                     * @param {Object} object The object to query.
                     * @returns {Array} Returns the array of property names.
                     * @example
                     *
                     * function Foo() {
                     *   this.a = 1;
                     *   this.b = 2;
                     * }
                     *
                     * Foo.prototype.c = 3;
                     *
                     * _.keys(new Foo);
                     * // => ['a', 'b'] (iteration order is not guaranteed)
                     *
                     * _.keys('hi');
                     * // => ['0', '1']
                     */
                    function keys(object) {
                        return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
                    }

                    /**
                     * Creates an array of the own and inherited enumerable property names of `object`.
                     *
                     * **Note:** Non-object values are coerced to objects.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Object
                     * @param {Object} object The object to query.
                     * @returns {Array} Returns the array of property names.
                     * @example
                     *
                     * function Foo() {
                     *   this.a = 1;
                     *   this.b = 2;
                     * }
                     *
                     * Foo.prototype.c = 3;
                     *
                     * _.keysIn(new Foo);
                     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
                     */
                    function keysIn(object) {
                        return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
                    }

                    /**
                     * The opposite of `_.mapValues`; this method creates an object with the
                     * same values as `object` and keys generated by running each own enumerable
                     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
                     * with three arguments: (value, key, object).
                     *
                     * @static
                     * @memberOf _
                     * @since 3.8.0
                     * @category Object
                     * @param {Object} object The object to iterate over.
                     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                     * @returns {Object} Returns the new mapped object.
                     * @see _.mapValues
                     * @example
                     *
                     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
                     *   return key + value;
                     * });
                     * // => { 'a1': 1, 'b2': 2 }
                     */
                    function mapKeys(object, iteratee) {
                        var result = {};
                        iteratee = getIteratee(iteratee, 3);

                        baseForOwn(object, function(value, key, object) {
                            baseAssignValue(result, iteratee(value, key, object), value);
                        });
                        return result;
                    }

                    /**
                     * Creates an object with the same keys as `object` and values generated
                     * by running each own enumerable string keyed property of `object` thru
                     * `iteratee`. The iteratee is invoked with three arguments:
                     * (value, key, object).
                     *
                     * @static
                     * @memberOf _
                     * @since 2.4.0
                     * @category Object
                     * @param {Object} object The object to iterate over.
                     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                     * @returns {Object} Returns the new mapped object.
                     * @see _.mapKeys
                     * @example
                     *
                     * var users = {
                     *   'fred':    { 'user': 'fred',    'age': 40 },
                     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
                     * };
                     *
                     * _.mapValues(users, function(o) { return o.age; });
                     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.mapValues(users, 'age');
                     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
                     */
                    function mapValues(object, iteratee) {
                        var result = {};
                        iteratee = getIteratee(iteratee, 3);

                        baseForOwn(object, function(value, key, object) {
                            baseAssignValue(result, key, iteratee(value, key, object));
                        });
                        return result;
                    }

                    /**
                     * This method is like `_.assign` except that it recursively merges own and
                     * inherited enumerable string keyed properties of source objects into the
                     * destination object. Source properties that resolve to `undefined` are
                     * skipped if a destination value exists. Array and plain object properties
                     * are merged recursively. Other objects and value types are overridden by
                     * assignment. Source objects are applied from left to right. Subsequent
                     * sources overwrite property assignments of previous sources.
                     *
                     * **Note:** This method mutates `object`.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.5.0
                     * @category Object
                     * @param {Object} object The destination object.
                     * @param {...Object} [sources] The source objects.
                     * @returns {Object} Returns `object`.
                     * @example
                     *
                     * var object = {
                     *   'a': [{ 'b': 2 }, { 'd': 4 }]
                     * };
                     *
                     * var other = {
                     *   'a': [{ 'c': 3 }, { 'e': 5 }]
                     * };
                     *
                     * _.merge(object, other);
                     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
                     */
                    var merge = createAssigner(function(object, source, srcIndex) {
                        baseMerge(object, source, srcIndex);
                    });

                    /**
                     * This method is like `_.merge` except that it accepts `customizer` which
                     * is invoked to produce the merged values of the destination and source
                     * properties. If `customizer` returns `undefined`, merging is handled by the
                     * method instead. The `customizer` is invoked with six arguments:
                     * (objValue, srcValue, key, object, source, stack).
                     *
                     * **Note:** This method mutates `object`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Object
                     * @param {Object} object The destination object.
                     * @param {...Object} sources The source objects.
                     * @param {Function} customizer The function to customize assigned values.
                     * @returns {Object} Returns `object`.
                     * @example
                     *
                     * function customizer(objValue, srcValue) {
                     *   if (_.isArray(objValue)) {
                     *     return objValue.concat(srcValue);
                     *   }
                     * }
                     *
                     * var object = { 'a': [1], 'b': [2] };
                     * var other = { 'a': [3], 'b': [4] };
                     *
                     * _.mergeWith(object, other, customizer);
                     * // => { 'a': [1, 3], 'b': [2, 4] }
                     */
                    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
                        baseMerge(object, source, srcIndex, customizer);
                    });

                    /**
                     * The opposite of `_.pick`; this method creates an object composed of the
                     * own and inherited enumerable property paths of `object` that are not omitted.
                     *
                     * **Note:** This method is considerably slower than `_.pick`.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Object
                     * @param {Object} object The source object.
                     * @param {...(string|string[])} [paths] The property paths to omit.
                     * @returns {Object} Returns the new object.
                     * @example
                     *
                     * var object = { 'a': 1, 'b': '2', 'c': 3 };
                     *
                     * _.omit(object, ['a', 'c']);
                     * // => { 'b': '2' }
                     */
                    var omit = flatRest(function(object, paths) {
                        var result = {};
                        if (object == null) {
                            return result;
                        }
                        var isDeep = false;
                        paths = arrayMap(paths, function(path) {
                            path = castPath(path, object);
                            isDeep || (isDeep = path.length > 1);
                            return path;
                        });
                        copyObject(object, getAllKeysIn(object), result);
                        if (isDeep) {
                            result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
                        }
                        var length = paths.length;
                        while (length--) {
                            baseUnset(result, paths[length]);
                        }
                        return result;
                    });

                    /**
                     * The opposite of `_.pickBy`; this method creates an object composed of
                     * the own and inherited enumerable string keyed properties of `object` that
                     * `predicate` doesn't return truthy for. The predicate is invoked with two
                     * arguments: (value, key).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Object
                     * @param {Object} object The source object.
                     * @param {Function} [predicate=_.identity] The function invoked per property.
                     * @returns {Object} Returns the new object.
                     * @example
                     *
                     * var object = { 'a': 1, 'b': '2', 'c': 3 };
                     *
                     * _.omitBy(object, _.isNumber);
                     * // => { 'b': '2' }
                     */
                    function omitBy(object, predicate) {
                        return pickBy(object, negate(getIteratee(predicate)));
                    }

                    /**
                     * Creates an object composed of the picked `object` properties.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Object
                     * @param {Object} object The source object.
                     * @param {...(string|string[])} [paths] The property paths to pick.
                     * @returns {Object} Returns the new object.
                     * @example
                     *
                     * var object = { 'a': 1, 'b': '2', 'c': 3 };
                     *
                     * _.pick(object, ['a', 'c']);
                     * // => { 'a': 1, 'c': 3 }
                     */
                    var pick = flatRest(function(object, paths) {
                        return object == null ? {} : basePick(object, paths);
                    });

                    /**
                     * Creates an object composed of the `object` properties `predicate` returns
                     * truthy for. The predicate is invoked with two arguments: (value, key).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Object
                     * @param {Object} object The source object.
                     * @param {Function} [predicate=_.identity] The function invoked per property.
                     * @returns {Object} Returns the new object.
                     * @example
                     *
                     * var object = { 'a': 1, 'b': '2', 'c': 3 };
                     *
                     * _.pickBy(object, _.isNumber);
                     * // => { 'a': 1, 'c': 3 }
                     */
                    function pickBy(object, predicate) {
                        if (object == null) {
                            return {};
                        }
                        var props = arrayMap(getAllKeysIn(object), function(prop) {
                            return [prop];
                        });
                        predicate = getIteratee(predicate);
                        return basePickBy(object, props, function(value, path) {
                            return predicate(value, path[0]);
                        });
                    }

                    /**
                     * This method is like `_.get` except that if the resolved value is a
                     * function it's invoked with the `this` binding of its parent object and
                     * its result is returned.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Object
                     * @param {Object} object The object to query.
                     * @param {Array|string} path The path of the property to resolve.
                     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
                     * @returns {*} Returns the resolved value.
                     * @example
                     *
                     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
                     *
                     * _.result(object, 'a[0].b.c1');
                     * // => 3
                     *
                     * _.result(object, 'a[0].b.c2');
                     * // => 4
                     *
                     * _.result(object, 'a[0].b.c3', 'default');
                     * // => 'default'
                     *
                     * _.result(object, 'a[0].b.c3', _.constant('default'));
                     * // => 'default'
                     */
                    function result(object, path, defaultValue) {
                        path = castPath(path, object);

                        var index = -1,
                            length = path.length;

                        // Ensure the loop is entered when path is empty.
                        if (!length) {
                            length = 1;
                            object = undefined;
                        }
                        while (++index < length) {
                            var value = object == null ? undefined : object[toKey(path[index])];
                            if (value === undefined) {
                                index = length;
                                value = defaultValue;
                            }
                            object = isFunction(value) ? value.call(object) : value;
                        }
                        return object;
                    }

                    /**
                     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
                     * it's created. Arrays are created for missing index properties while objects
                     * are created for all other missing properties. Use `_.setWith` to customize
                     * `path` creation.
                     *
                     * **Note:** This method mutates `object`.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.7.0
                     * @category Object
                     * @param {Object} object The object to modify.
                     * @param {Array|string} path The path of the property to set.
                     * @param {*} value The value to set.
                     * @returns {Object} Returns `object`.
                     * @example
                     *
                     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
                     *
                     * _.set(object, 'a[0].b.c', 4);
                     * console.log(object.a[0].b.c);
                     * // => 4
                     *
                     * _.set(object, ['x', '0', 'y', 'z'], 5);
                     * console.log(object.x[0].y.z);
                     * // => 5
                     */
                    function set(object, path, value) {
                        return object == null ? object : baseSet(object, path, value);
                    }

                    /**
                     * This method is like `_.set` except that it accepts `customizer` which is
                     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
                     * path creation is handled by the method instead. The `customizer` is invoked
                     * with three arguments: (nsValue, key, nsObject).
                     *
                     * **Note:** This method mutates `object`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Object
                     * @param {Object} object The object to modify.
                     * @param {Array|string} path The path of the property to set.
                     * @param {*} value The value to set.
                     * @param {Function} [customizer] The function to customize assigned values.
                     * @returns {Object} Returns `object`.
                     * @example
                     *
                     * var object = {};
                     *
                     * _.setWith(object, '[0][1]', 'a', Object);
                     * // => { '0': { '1': 'a' } }
                     */
                    function setWith(object, path, value, customizer) {
                        customizer = typeof customizer == 'function' ? customizer : undefined;
                        return object == null ? object : baseSet(object, path, value, customizer);
                    }

                    /**
                     * Creates an array of own enumerable string keyed-value pairs for `object`
                     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
                     * entries are returned.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @alias entries
                     * @category Object
                     * @param {Object} object The object to query.
                     * @returns {Array} Returns the key-value pairs.
                     * @example
                     *
                     * function Foo() {
                     *   this.a = 1;
                     *   this.b = 2;
                     * }
                     *
                     * Foo.prototype.c = 3;
                     *
                     * _.toPairs(new Foo);
                     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
                     */
                    var toPairs = createToPairs(keys);

                    /**
                     * Creates an array of own and inherited enumerable string keyed-value pairs
                     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
                     * or set, its entries are returned.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @alias entriesIn
                     * @category Object
                     * @param {Object} object The object to query.
                     * @returns {Array} Returns the key-value pairs.
                     * @example
                     *
                     * function Foo() {
                     *   this.a = 1;
                     *   this.b = 2;
                     * }
                     *
                     * Foo.prototype.c = 3;
                     *
                     * _.toPairsIn(new Foo);
                     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
                     */
                    var toPairsIn = createToPairs(keysIn);

                    /**
                     * An alternative to `_.reduce`; this method transforms `object` to a new
                     * `accumulator` object which is the result of running each of its own
                     * enumerable string keyed properties thru `iteratee`, with each invocation
                     * potentially mutating the `accumulator` object. If `accumulator` is not
                     * provided, a new object with the same `[[Prototype]]` will be used. The
                     * iteratee is invoked with four arguments: (accumulator, value, key, object).
                     * Iteratee functions may exit iteration early by explicitly returning `false`.
                     *
                     * @static
                     * @memberOf _
                     * @since 1.3.0
                     * @category Object
                     * @param {Object} object The object to iterate over.
                     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                     * @param {*} [accumulator] The custom accumulator value.
                     * @returns {*} Returns the accumulated value.
                     * @example
                     *
                     * _.transform([2, 3, 4], function(result, n) {
                     *   result.push(n *= n);
                     *   return n % 2 == 0;
                     * }, []);
                     * // => [4, 9]
                     *
                     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
                     *   (result[value] || (result[value] = [])).push(key);
                     * }, {});
                     * // => { '1': ['a', 'c'], '2': ['b'] }
                     */
                    function transform(object, iteratee, accumulator) {
                        var isArr = isArray(object),
                            isArrLike = isArr || isBuffer(object) || isTypedArray(object);

                        iteratee = getIteratee(iteratee, 4);
                        if (accumulator == null) {
                            var Ctor = object && object.constructor;
                            if (isArrLike) {
                                accumulator = isArr ? new Ctor : [];
                            } else if (isObject(object)) {
                                accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
                            } else {
                                accumulator = {};
                            }
                        }
                        (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
                            return iteratee(accumulator, value, index, object);
                        });
                        return accumulator;
                    }

                    /**
                     * Removes the property at `path` of `object`.
                     *
                     * **Note:** This method mutates `object`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Object
                     * @param {Object} object The object to modify.
                     * @param {Array|string} path The path of the property to unset.
                     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
                     * @example
                     *
                     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
                     * _.unset(object, 'a[0].b.c');
                     * // => true
                     *
                     * console.log(object);
                     * // => { 'a': [{ 'b': {} }] };
                     *
                     * _.unset(object, ['a', '0', 'b', 'c']);
                     * // => true
                     *
                     * console.log(object);
                     * // => { 'a': [{ 'b': {} }] };
                     */
                    function unset(object, path) {
                        return object == null ? true : baseUnset(object, path);
                    }

                    /**
                     * This method is like `_.set` except that accepts `updater` to produce the
                     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
                     * is invoked with one argument: (value).
                     *
                     * **Note:** This method mutates `object`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.6.0
                     * @category Object
                     * @param {Object} object The object to modify.
                     * @param {Array|string} path The path of the property to set.
                     * @param {Function} updater The function to produce the updated value.
                     * @returns {Object} Returns `object`.
                     * @example
                     *
                     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
                     *
                     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
                     * console.log(object.a[0].b.c);
                     * // => 9
                     *
                     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
                     * console.log(object.x[0].y.z);
                     * // => 0
                     */
                    function update(object, path, updater) {
                        return object == null ? object : baseUpdate(object, path, castFunction(updater));
                    }

                    /**
                     * This method is like `_.update` except that it accepts `customizer` which is
                     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
                     * path creation is handled by the method instead. The `customizer` is invoked
                     * with three arguments: (nsValue, key, nsObject).
                     *
                     * **Note:** This method mutates `object`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.6.0
                     * @category Object
                     * @param {Object} object The object to modify.
                     * @param {Array|string} path The path of the property to set.
                     * @param {Function} updater The function to produce the updated value.
                     * @param {Function} [customizer] The function to customize assigned values.
                     * @returns {Object} Returns `object`.
                     * @example
                     *
                     * var object = {};
                     *
                     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
                     * // => { '0': { '1': 'a' } }
                     */
                    function updateWith(object, path, updater, customizer) {
                        customizer = typeof customizer == 'function' ? customizer : undefined;
                        return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
                    }

                    /**
                     * Creates an array of the own enumerable string keyed property values of `object`.
                     *
                     * **Note:** Non-object values are coerced to objects.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Object
                     * @param {Object} object The object to query.
                     * @returns {Array} Returns the array of property values.
                     * @example
                     *
                     * function Foo() {
                     *   this.a = 1;
                     *   this.b = 2;
                     * }
                     *
                     * Foo.prototype.c = 3;
                     *
                     * _.values(new Foo);
                     * // => [1, 2] (iteration order is not guaranteed)
                     *
                     * _.values('hi');
                     * // => ['h', 'i']
                     */
                    function values(object) {
                        return object == null ? [] : baseValues(object, keys(object));
                    }

                    /**
                     * Creates an array of the own and inherited enumerable string keyed property
                     * values of `object`.
                     *
                     * **Note:** Non-object values are coerced to objects.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Object
                     * @param {Object} object The object to query.
                     * @returns {Array} Returns the array of property values.
                     * @example
                     *
                     * function Foo() {
                     *   this.a = 1;
                     *   this.b = 2;
                     * }
                     *
                     * Foo.prototype.c = 3;
                     *
                     * _.valuesIn(new Foo);
                     * // => [1, 2, 3] (iteration order is not guaranteed)
                     */
                    function valuesIn(object) {
                        return object == null ? [] : baseValues(object, keysIn(object));
                    }

                    /*------------------------------------------------------------------------*/

                    /**
                     * Clamps `number` within the inclusive `lower` and `upper` bounds.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Number
                     * @param {number} number The number to clamp.
                     * @param {number} [lower] The lower bound.
                     * @param {number} upper The upper bound.
                     * @returns {number} Returns the clamped number.
                     * @example
                     *
                     * _.clamp(-10, -5, 5);
                     * // => -5
                     *
                     * _.clamp(10, -5, 5);
                     * // => 5
                     */
                    function clamp(number, lower, upper) {
                        if (upper === undefined) {
                            upper = lower;
                            lower = undefined;
                        }
                        if (upper !== undefined) {
                            upper = toNumber(upper);
                            upper = upper === upper ? upper : 0;
                        }
                        if (lower !== undefined) {
                            lower = toNumber(lower);
                            lower = lower === lower ? lower : 0;
                        }
                        return baseClamp(toNumber(number), lower, upper);
                    }

                    /**
                     * Checks if `n` is between `start` and up to, but not including, `end`. If
                     * `end` is not specified, it's set to `start` with `start` then set to `0`.
                     * If `start` is greater than `end` the params are swapped to support
                     * negative ranges.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.3.0
                     * @category Number
                     * @param {number} number The number to check.
                     * @param {number} [start=0] The start of the range.
                     * @param {number} end The end of the range.
                     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
                     * @see _.range, _.rangeRight
                     * @example
                     *
                     * _.inRange(3, 2, 4);
                     * // => true
                     *
                     * _.inRange(4, 8);
                     * // => true
                     *
                     * _.inRange(4, 2);
                     * // => false
                     *
                     * _.inRange(2, 2);
                     * // => false
                     *
                     * _.inRange(1.2, 2);
                     * // => true
                     *
                     * _.inRange(5.2, 4);
                     * // => false
                     *
                     * _.inRange(-3, -2, -6);
                     * // => true
                     */
                    function inRange(number, start, end) {
                        start = toFinite(start);
                        if (end === undefined) {
                            end = start;
                            start = 0;
                        } else {
                            end = toFinite(end);
                        }
                        number = toNumber(number);
                        return baseInRange(number, start, end);
                    }

                    /**
                     * Produces a random number between the inclusive `lower` and `upper` bounds.
                     * If only one argument is provided a number between `0` and the given number
                     * is returned. If `floating` is `true`, or either `lower` or `upper` are
                     * floats, a floating-point number is returned instead of an integer.
                     *
                     * **Note:** JavaScript follows the IEEE-754 standard for resolving
                     * floating-point values which can produce unexpected results.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.7.0
                     * @category Number
                     * @param {number} [lower=0] The lower bound.
                     * @param {number} [upper=1] The upper bound.
                     * @param {boolean} [floating] Specify returning a floating-point number.
                     * @returns {number} Returns the random number.
                     * @example
                     *
                     * _.random(0, 5);
                     * // => an integer between 0 and 5
                     *
                     * _.random(5);
                     * // => also an integer between 0 and 5
                     *
                     * _.random(5, true);
                     * // => a floating-point number between 0 and 5
                     *
                     * _.random(1.2, 5.2);
                     * // => a floating-point number between 1.2 and 5.2
                     */
                    function random(lower, upper, floating) {
                        if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
                            upper = floating = undefined;
                        }
                        if (floating === undefined) {
                            if (typeof upper == 'boolean') {
                                floating = upper;
                                upper = undefined;
                            } else if (typeof lower == 'boolean') {
                                floating = lower;
                                lower = undefined;
                            }
                        }
                        if (lower === undefined && upper === undefined) {
                            lower = 0;
                            upper = 1;
                        } else {
                            lower = toFinite(lower);
                            if (upper === undefined) {
                                upper = lower;
                                lower = 0;
                            } else {
                                upper = toFinite(upper);
                            }
                        }
                        if (lower > upper) {
                            var temp = lower;
                            lower = upper;
                            upper = temp;
                        }
                        if (floating || lower % 1 || upper % 1) {
                            var rand = nativeRandom();
                            return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
                        }
                        return baseRandom(lower, upper);
                    }

                    /*------------------------------------------------------------------------*/

                    /**
                     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category String
                     * @param {string} [string=''] The string to convert.
                     * @returns {string} Returns the camel cased string.
                     * @example
                     *
                     * _.camelCase('Foo Bar');
                     * // => 'fooBar'
                     *
                     * _.camelCase('--foo-bar--');
                     * // => 'fooBar'
                     *
                     * _.camelCase('__FOO_BAR__');
                     * // => 'fooBar'
                     */
                    var camelCase = createCompounder(function(result, word, index) {
                        word = word.toLowerCase();
                        return result + (index ? capitalize(word) : word);
                    });

                    /**
                     * Converts the first character of `string` to upper case and the remaining
                     * to lower case.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category String
                     * @param {string} [string=''] The string to capitalize.
                     * @returns {string} Returns the capitalized string.
                     * @example
                     *
                     * _.capitalize('FRED');
                     * // => 'Fred'
                     */
                    function capitalize(string) {
                        return upperFirst(toString(string).toLowerCase());
                    }

                    /**
                     * Deburrs `string` by converting
                     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
                     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
                     * letters to basic Latin letters and removing
                     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category String
                     * @param {string} [string=''] The string to deburr.
                     * @returns {string} Returns the deburred string.
                     * @example
                     *
                     * _.deburr('déjà vu');
                     * // => 'deja vu'
                     */
                    function deburr(string) {
                        string = toString(string);
                        return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
                    }

                    /**
                     * Checks if `string` ends with the given target string.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category String
                     * @param {string} [string=''] The string to inspect.
                     * @param {string} [target] The string to search for.
                     * @param {number} [position=string.length] The position to search up to.
                     * @returns {boolean} Returns `true` if `string` ends with `target`,
                     *  else `false`.
                     * @example
                     *
                     * _.endsWith('abc', 'c');
                     * // => true
                     *
                     * _.endsWith('abc', 'b');
                     * // => false
                     *
                     * _.endsWith('abc', 'b', 2);
                     * // => true
                     */
                    function endsWith(string, target, position) {
                        string = toString(string);
                        target = baseToString(target);

                        var length = string.length;
                        position = position === undefined ?
                            length :
                            baseClamp(toInteger(position), 0, length);

                        var end = position;
                        position -= target.length;
                        return position >= 0 && string.slice(position, end) == target;
                    }

                    /**
                     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
                     * corresponding HTML entities.
                     *
                     * **Note:** No other characters are escaped. To escape additional
                     * characters use a third-party library like [_he_](https://mths.be/he).
                     *
                     * Though the ">" character is escaped for symmetry, characters like
                     * ">" and "/" don't need escaping in HTML and have no special meaning
                     * unless they're part of a tag or unquoted attribute value. See
                     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
                     * (under "semi-related fun fact") for more details.
                     *
                     * When working with HTML you should always
                     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
                     * XSS vectors.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category String
                     * @param {string} [string=''] The string to escape.
                     * @returns {string} Returns the escaped string.
                     * @example
                     *
                     * _.escape('fred, barney, & pebbles');
                     * // => 'fred, barney, &amp; pebbles'
                     */
                    function escape(string) {
                        string = toString(string);
                        return (string && reHasUnescapedHtml.test(string)) ?
                            string.replace(reUnescapedHtml, escapeHtmlChar) :
                            string;
                    }

                    /**
                     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
                     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category String
                     * @param {string} [string=''] The string to escape.
                     * @returns {string} Returns the escaped string.
                     * @example
                     *
                     * _.escapeRegExp('[lodash](https://lodash.com/)');
                     * // => '\[lodash\]\(https://lodash\.com/\)'
                     */
                    function escapeRegExp(string) {
                        string = toString(string);
                        return (string && reHasRegExpChar.test(string)) ?
                            string.replace(reRegExpChar, '\\$&') :
                            string;
                    }

                    /**
                     * Converts `string` to
                     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category String
                     * @param {string} [string=''] The string to convert.
                     * @returns {string} Returns the kebab cased string.
                     * @example
                     *
                     * _.kebabCase('Foo Bar');
                     * // => 'foo-bar'
                     *
                     * _.kebabCase('fooBar');
                     * // => 'foo-bar'
                     *
                     * _.kebabCase('__FOO_BAR__');
                     * // => 'foo-bar'
                     */
                    var kebabCase = createCompounder(function(result, word, index) {
                        return result + (index ? '-' : '') + word.toLowerCase();
                    });

                    /**
                     * Converts `string`, as space separated words, to lower case.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category String
                     * @param {string} [string=''] The string to convert.
                     * @returns {string} Returns the lower cased string.
                     * @example
                     *
                     * _.lowerCase('--Foo-Bar--');
                     * // => 'foo bar'
                     *
                     * _.lowerCase('fooBar');
                     * // => 'foo bar'
                     *
                     * _.lowerCase('__FOO_BAR__');
                     * // => 'foo bar'
                     */
                    var lowerCase = createCompounder(function(result, word, index) {
                        return result + (index ? ' ' : '') + word.toLowerCase();
                    });

                    /**
                     * Converts the first character of `string` to lower case.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category String
                     * @param {string} [string=''] The string to convert.
                     * @returns {string} Returns the converted string.
                     * @example
                     *
                     * _.lowerFirst('Fred');
                     * // => 'fred'
                     *
                     * _.lowerFirst('FRED');
                     * // => 'fRED'
                     */
                    var lowerFirst = createCaseFirst('toLowerCase');

                    /**
                     * Pads `string` on the left and right sides if it's shorter than `length`.
                     * Padding characters are truncated if they can't be evenly divided by `length`.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category String
                     * @param {string} [string=''] The string to pad.
                     * @param {number} [length=0] The padding length.
                     * @param {string} [chars=' '] The string used as padding.
                     * @returns {string} Returns the padded string.
                     * @example
                     *
                     * _.pad('abc', 8);
                     * // => '  abc   '
                     *
                     * _.pad('abc', 8, '_-');
                     * // => '_-abc_-_'
                     *
                     * _.pad('abc', 3);
                     * // => 'abc'
                     */
                    function pad(string, length, chars) {
                        string = toString(string);
                        length = toInteger(length);

                        var strLength = length ? stringSize(string) : 0;
                        if (!length || strLength >= length) {
                            return string;
                        }
                        var mid = (length - strLength) / 2;
                        return (
                            createPadding(nativeFloor(mid), chars) +
                            string +
                            createPadding(nativeCeil(mid), chars)
                        );
                    }

                    /**
                     * Pads `string` on the right side if it's shorter than `length`. Padding
                     * characters are truncated if they exceed `length`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category String
                     * @param {string} [string=''] The string to pad.
                     * @param {number} [length=0] The padding length.
                     * @param {string} [chars=' '] The string used as padding.
                     * @returns {string} Returns the padded string.
                     * @example
                     *
                     * _.padEnd('abc', 6);
                     * // => 'abc   '
                     *
                     * _.padEnd('abc', 6, '_-');
                     * // => 'abc_-_'
                     *
                     * _.padEnd('abc', 3);
                     * // => 'abc'
                     */
                    function padEnd(string, length, chars) {
                        string = toString(string);
                        length = toInteger(length);

                        var strLength = length ? stringSize(string) : 0;
                        return (length && strLength < length) ?
                            (string + createPadding(length - strLength, chars)) :
                            string;
                    }

                    /**
                     * Pads `string` on the left side if it's shorter than `length`. Padding
                     * characters are truncated if they exceed `length`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category String
                     * @param {string} [string=''] The string to pad.
                     * @param {number} [length=0] The padding length.
                     * @param {string} [chars=' '] The string used as padding.
                     * @returns {string} Returns the padded string.
                     * @example
                     *
                     * _.padStart('abc', 6);
                     * // => '   abc'
                     *
                     * _.padStart('abc', 6, '_-');
                     * // => '_-_abc'
                     *
                     * _.padStart('abc', 3);
                     * // => 'abc'
                     */
                    function padStart(string, length, chars) {
                        string = toString(string);
                        length = toInteger(length);

                        var strLength = length ? stringSize(string) : 0;
                        return (length && strLength < length) ?
                            (createPadding(length - strLength, chars) + string) :
                            string;
                    }

                    /**
                     * Converts `string` to an integer of the specified radix. If `radix` is
                     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
                     * hexadecimal, in which case a `radix` of `16` is used.
                     *
                     * **Note:** This method aligns with the
                     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
                     *
                     * @static
                     * @memberOf _
                     * @since 1.1.0
                     * @category String
                     * @param {string} string The string to convert.
                     * @param {number} [radix=10] The radix to interpret `value` by.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                     * @returns {number} Returns the converted integer.
                     * @example
                     *
                     * _.parseInt('08');
                     * // => 8
                     *
                     * _.map(['6', '08', '10'], _.parseInt);
                     * // => [6, 8, 10]
                     */
                    function parseInt(string, radix, guard) {
                        if (guard || radix == null) {
                            radix = 0;
                        } else if (radix) {
                            radix = +radix;
                        }
                        return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
                    }

                    /**
                     * Repeats the given string `n` times.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category String
                     * @param {string} [string=''] The string to repeat.
                     * @param {number} [n=1] The number of times to repeat the string.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                     * @returns {string} Returns the repeated string.
                     * @example
                     *
                     * _.repeat('*', 3);
                     * // => '***'
                     *
                     * _.repeat('abc', 2);
                     * // => 'abcabc'
                     *
                     * _.repeat('abc', 0);
                     * // => ''
                     */
                    function repeat(string, n, guard) {
                        if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
                            n = 1;
                        } else {
                            n = toInteger(n);
                        }
                        return baseRepeat(toString(string), n);
                    }

                    /**
                     * Replaces matches for `pattern` in `string` with `replacement`.
                     *
                     * **Note:** This method is based on
                     * [`String#replace`](https://mdn.io/String/replace).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category String
                     * @param {string} [string=''] The string to modify.
                     * @param {RegExp|string} pattern The pattern to replace.
                     * @param {Function|string} replacement The match replacement.
                     * @returns {string} Returns the modified string.
                     * @example
                     *
                     * _.replace('Hi Fred', 'Fred', 'Barney');
                     * // => 'Hi Barney'
                     */
                    function replace() {
                        var args = arguments,
                            string = toString(args[0]);

                        return args.length < 3 ? string : string.replace(args[1], args[2]);
                    }

                    /**
                     * Converts `string` to
                     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category String
                     * @param {string} [string=''] The string to convert.
                     * @returns {string} Returns the snake cased string.
                     * @example
                     *
                     * _.snakeCase('Foo Bar');
                     * // => 'foo_bar'
                     *
                     * _.snakeCase('fooBar');
                     * // => 'foo_bar'
                     *
                     * _.snakeCase('--FOO-BAR--');
                     * // => 'foo_bar'
                     */
                    var snakeCase = createCompounder(function(result, word, index) {
                        return result + (index ? '_' : '') + word.toLowerCase();
                    });

                    /**
                     * Splits `string` by `separator`.
                     *
                     * **Note:** This method is based on
                     * [`String#split`](https://mdn.io/String/split).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category String
                     * @param {string} [string=''] The string to split.
                     * @param {RegExp|string} separator The separator pattern to split by.
                     * @param {number} [limit] The length to truncate results to.
                     * @returns {Array} Returns the string segments.
                     * @example
                     *
                     * _.split('a-b-c', '-', 2);
                     * // => ['a', 'b']
                     */
                    function split(string, separator, limit) {
                        if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
                            separator = limit = undefined;
                        }
                        limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
                        if (!limit) {
                            return [];
                        }
                        string = toString(string);
                        if (string && (
                                typeof separator == 'string' ||
                                (separator != null && !isRegExp(separator))
                            )) {
                            separator = baseToString(separator);
                            if (!separator && hasUnicode(string)) {
                                return castSlice(stringToArray(string), 0, limit);
                            }
                        }
                        return string.split(separator, limit);
                    }

                    /**
                     * Converts `string` to
                     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
                     *
                     * @static
                     * @memberOf _
                     * @since 3.1.0
                     * @category String
                     * @param {string} [string=''] The string to convert.
                     * @returns {string} Returns the start cased string.
                     * @example
                     *
                     * _.startCase('--foo-bar--');
                     * // => 'Foo Bar'
                     *
                     * _.startCase('fooBar');
                     * // => 'Foo Bar'
                     *
                     * _.startCase('__FOO_BAR__');
                     * // => 'FOO BAR'
                     */
                    var startCase = createCompounder(function(result, word, index) {
                        return result + (index ? ' ' : '') + upperFirst(word);
                    });

                    /**
                     * Checks if `string` starts with the given target string.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category String
                     * @param {string} [string=''] The string to inspect.
                     * @param {string} [target] The string to search for.
                     * @param {number} [position=0] The position to search from.
                     * @returns {boolean} Returns `true` if `string` starts with `target`,
                     *  else `false`.
                     * @example
                     *
                     * _.startsWith('abc', 'a');
                     * // => true
                     *
                     * _.startsWith('abc', 'b');
                     * // => false
                     *
                     * _.startsWith('abc', 'b', 1);
                     * // => true
                     */
                    function startsWith(string, target, position) {
                        string = toString(string);
                        position = position == null ?
                            0 :
                            baseClamp(toInteger(position), 0, string.length);

                        target = baseToString(target);
                        return string.slice(position, position + target.length) == target;
                    }

                    /**
                     * Creates a compiled template function that can interpolate data properties
                     * in "interpolate" delimiters, HTML-escape interpolated data properties in
                     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
                     * properties may be accessed as free variables in the template. If a setting
                     * object is given, it takes precedence over `_.templateSettings` values.
                     *
                     * **Note:** In the development build `_.template` utilizes
                     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
                     * for easier debugging.
                     *
                     * For more information on precompiling templates see
                     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
                     *
                     * For more information on Chrome extension sandboxes see
                     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category String
                     * @param {string} [string=''] The template string.
                     * @param {Object} [options={}] The options object.
                     * @param {RegExp} [options.escape=_.templateSettings.escape]
                     *  The HTML "escape" delimiter.
                     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
                     *  The "evaluate" delimiter.
                     * @param {Object} [options.imports=_.templateSettings.imports]
                     *  An object to import into the template as free variables.
                     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
                     *  The "interpolate" delimiter.
                     * @param {string} [options.sourceURL='lodash.templateSources[n]']
                     *  The sourceURL of the compiled template.
                     * @param {string} [options.variable='obj']
                     *  The data object variable name.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                     * @returns {Function} Returns the compiled template function.
                     * @example
                     *
                     * // Use the "interpolate" delimiter to create a compiled template.
                     * var compiled = _.template('hello <%= user %>!');
                     * compiled({ 'user': 'fred' });
                     * // => 'hello fred!'
                     *
                     * // Use the HTML "escape" delimiter to escape data property values.
                     * var compiled = _.template('<b><%- value %></b>');
                     * compiled({ 'value': '<script>' });
                     * // => '<b>&lt;script&gt;</b>'
                     *
                     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
                     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
                     * compiled({ 'users': ['fred', 'barney'] });
                     * // => '<li>fred</li><li>barney</li>'
                     *
                     * // Use the internal `print` function in "evaluate" delimiters.
                     * var compiled = _.template('<% print("hello " + user); %>!');
                     * compiled({ 'user': 'barney' });
                     * // => 'hello barney!'
                     *
                     * // Use the ES template literal delimiter as an "interpolate" delimiter.
                     * // Disable support by replacing the "interpolate" delimiter.
                     * var compiled = _.template('hello ${ user }!');
                     * compiled({ 'user': 'pebbles' });
                     * // => 'hello pebbles!'
                     *
                     * // Use backslashes to treat delimiters as plain text.
                     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
                     * compiled({ 'value': 'ignored' });
                     * // => '<%- value %>'
                     *
                     * // Use the `imports` option to import `jQuery` as `jq`.
                     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
                     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
                     * compiled({ 'users': ['fred', 'barney'] });
                     * // => '<li>fred</li><li>barney</li>'
                     *
                     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
                     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
                     * compiled(data);
                     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
                     *
                     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
                     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
                     * compiled.source;
                     * // => function(data) {
                     * //   var __t, __p = '';
                     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
                     * //   return __p;
                     * // }
                     *
                     * // Use custom template delimiters.
                     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
                     * var compiled = _.template('hello {{ user }}!');
                     * compiled({ 'user': 'mustache' });
                     * // => 'hello mustache!'
                     *
                     * // Use the `source` property to inline compiled templates for meaningful
                     * // line numbers in error messages and stack traces.
                     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
                     *   var JST = {\
                     *     "main": ' + _.template(mainText).source + '\
                     *   };\
                     * ');
                     */
                    function template(string, options, guard) {
                        // Based on John Resig's `tmpl` implementation
                        // (http://ejohn.org/blog/javascript-micro-templating/)
                        // and Laura Doktorova's doT.js (https://github.com/olado/doT).
                        var settings = lodash.templateSettings;

                        if (guard && isIterateeCall(string, options, guard)) {
                            options = undefined;
                        }
                        string = toString(string);
                        options = assignInWith({}, options, settings, customDefaultsAssignIn);

                        var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
                            importsKeys = keys(imports),
                            importsValues = baseValues(imports, importsKeys);

                        var isEscaping,
                            isEvaluating,
                            index = 0,
                            interpolate = options.interpolate || reNoMatch,
                            source = "__p += '";

                        // Compile the regexp to match each delimiter.
                        var reDelimiters = RegExp(
                            (options.escape || reNoMatch).source + '|' +
                            interpolate.source + '|' +
                            (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
                            (options.evaluate || reNoMatch).source + '|$', 'g');

                        // Use a sourceURL for easier debugging.
                        var sourceURL = '//# sourceURL=' +
                            ('sourceURL' in options ?
                                options.sourceURL :
                                ('lodash.templateSources[' + (++templateCounter) + ']')
                            ) + '\n';

                        string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
                            interpolateValue || (interpolateValue = esTemplateValue);

                            // Escape characters that can't be included in string literals.
                            source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

                            // Replace delimiters with snippets.
                            if (escapeValue) {
                                isEscaping = true;
                                source += "' +\n__e(" + escapeValue + ") +\n'";
                            }
                            if (evaluateValue) {
                                isEvaluating = true;
                                source += "';\n" + evaluateValue + ";\n__p += '";
                            }
                            if (interpolateValue) {
                                source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
                            }
                            index = offset + match.length;

                            // The JS engine embedded in Adobe products needs `match` returned in
                            // order to produce the correct `offset` value.
                            return match;
                        });

                        source += "';\n";

                        // If `variable` is not specified wrap a with-statement around the generated
                        // code to add the data object to the top of the scope chain.
                        var variable = options.variable;
                        if (!variable) {
                            source = 'with (obj) {\n' + source + '\n}\n';
                        }
                        // Cleanup code by stripping empty strings.
                        source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
                            .replace(reEmptyStringMiddle, '$1')
                            .replace(reEmptyStringTrailing, '$1;');

                        // Frame code as the function body.
                        source = 'function(' + (variable || 'obj') + ') {\n' +
                            (variable ?
                                '' :
                                'obj || (obj = {});\n'
                            ) +
                            "var __t, __p = ''" +
                            (isEscaping ?
                                ', __e = _.escape' :
                                ''
                            ) +
                            (isEvaluating ?
                                ', __j = Array.prototype.join;\n' +
                                "function print() { __p += __j.call(arguments, '') }\n" :
                                ';\n'
                            ) +
                            source +
                            'return __p\n}';

                        var result = attempt(function() {
                            return Function(importsKeys, sourceURL + 'return ' + source)
                                .apply(undefined, importsValues);
                        });

                        // Provide the compiled function's source by its `toString` method or
                        // the `source` property as a convenience for inlining compiled templates.
                        result.source = source;
                        if (isError(result)) {
                            throw result;
                        }
                        return result;
                    }

                    /**
                     * Converts `string`, as a whole, to lower case just like
                     * [String#toLowerCase](https://mdn.io/toLowerCase).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category String
                     * @param {string} [string=''] The string to convert.
                     * @returns {string} Returns the lower cased string.
                     * @example
                     *
                     * _.toLower('--Foo-Bar--');
                     * // => '--foo-bar--'
                     *
                     * _.toLower('fooBar');
                     * // => 'foobar'
                     *
                     * _.toLower('__FOO_BAR__');
                     * // => '__foo_bar__'
                     */
                    function toLower(value) {
                        return toString(value).toLowerCase();
                    }

                    /**
                     * Converts `string`, as a whole, to upper case just like
                     * [String#toUpperCase](https://mdn.io/toUpperCase).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category String
                     * @param {string} [string=''] The string to convert.
                     * @returns {string} Returns the upper cased string.
                     * @example
                     *
                     * _.toUpper('--foo-bar--');
                     * // => '--FOO-BAR--'
                     *
                     * _.toUpper('fooBar');
                     * // => 'FOOBAR'
                     *
                     * _.toUpper('__foo_bar__');
                     * // => '__FOO_BAR__'
                     */
                    function toUpper(value) {
                        return toString(value).toUpperCase();
                    }

                    /**
                     * Removes leading and trailing whitespace or specified characters from `string`.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category String
                     * @param {string} [string=''] The string to trim.
                     * @param {string} [chars=whitespace] The characters to trim.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                     * @returns {string} Returns the trimmed string.
                     * @example
                     *
                     * _.trim('  abc  ');
                     * // => 'abc'
                     *
                     * _.trim('-_-abc-_-', '_-');
                     * // => 'abc'
                     *
                     * _.map(['  foo  ', '  bar  '], _.trim);
                     * // => ['foo', 'bar']
                     */
                    function trim(string, chars, guard) {
                        string = toString(string);
                        if (string && (guard || chars === undefined)) {
                            return string.replace(reTrim, '');
                        }
                        if (!string || !(chars = baseToString(chars))) {
                            return string;
                        }
                        var strSymbols = stringToArray(string),
                            chrSymbols = stringToArray(chars),
                            start = charsStartIndex(strSymbols, chrSymbols),
                            end = charsEndIndex(strSymbols, chrSymbols) + 1;

                        return castSlice(strSymbols, start, end).join('');
                    }

                    /**
                     * Removes trailing whitespace or specified characters from `string`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category String
                     * @param {string} [string=''] The string to trim.
                     * @param {string} [chars=whitespace] The characters to trim.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                     * @returns {string} Returns the trimmed string.
                     * @example
                     *
                     * _.trimEnd('  abc  ');
                     * // => '  abc'
                     *
                     * _.trimEnd('-_-abc-_-', '_-');
                     * // => '-_-abc'
                     */
                    function trimEnd(string, chars, guard) {
                        string = toString(string);
                        if (string && (guard || chars === undefined)) {
                            return string.replace(reTrimEnd, '');
                        }
                        if (!string || !(chars = baseToString(chars))) {
                            return string;
                        }
                        var strSymbols = stringToArray(string),
                            end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

                        return castSlice(strSymbols, 0, end).join('');
                    }

                    /**
                     * Removes leading whitespace or specified characters from `string`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category String
                     * @param {string} [string=''] The string to trim.
                     * @param {string} [chars=whitespace] The characters to trim.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                     * @returns {string} Returns the trimmed string.
                     * @example
                     *
                     * _.trimStart('  abc  ');
                     * // => 'abc  '
                     *
                     * _.trimStart('-_-abc-_-', '_-');
                     * // => 'abc-_-'
                     */
                    function trimStart(string, chars, guard) {
                        string = toString(string);
                        if (string && (guard || chars === undefined)) {
                            return string.replace(reTrimStart, '');
                        }
                        if (!string || !(chars = baseToString(chars))) {
                            return string;
                        }
                        var strSymbols = stringToArray(string),
                            start = charsStartIndex(strSymbols, stringToArray(chars));

                        return castSlice(strSymbols, start).join('');
                    }

                    /**
                     * Truncates `string` if it's longer than the given maximum string length.
                     * The last characters of the truncated string are replaced with the omission
                     * string which defaults to "...".
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category String
                     * @param {string} [string=''] The string to truncate.
                     * @param {Object} [options={}] The options object.
                     * @param {number} [options.length=30] The maximum string length.
                     * @param {string} [options.omission='...'] The string to indicate text is omitted.
                     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
                     * @returns {string} Returns the truncated string.
                     * @example
                     *
                     * _.truncate('hi-diddly-ho there, neighborino');
                     * // => 'hi-diddly-ho there, neighbo...'
                     *
                     * _.truncate('hi-diddly-ho there, neighborino', {
                     *   'length': 24,
                     *   'separator': ' '
                     * });
                     * // => 'hi-diddly-ho there,...'
                     *
                     * _.truncate('hi-diddly-ho there, neighborino', {
                     *   'length': 24,
                     *   'separator': /,? +/
                     * });
                     * // => 'hi-diddly-ho there...'
                     *
                     * _.truncate('hi-diddly-ho there, neighborino', {
                     *   'omission': ' [...]'
                     * });
                     * // => 'hi-diddly-ho there, neig [...]'
                     */
                    function truncate(string, options) {
                        var length = DEFAULT_TRUNC_LENGTH,
                            omission = DEFAULT_TRUNC_OMISSION;

                        if (isObject(options)) {
                            var separator = 'separator' in options ? options.separator : separator;
                            length = 'length' in options ? toInteger(options.length) : length;
                            omission = 'omission' in options ? baseToString(options.omission) : omission;
                        }
                        string = toString(string);

                        var strLength = string.length;
                        if (hasUnicode(string)) {
                            var strSymbols = stringToArray(string);
                            strLength = strSymbols.length;
                        }
                        if (length >= strLength) {
                            return string;
                        }
                        var end = length - stringSize(omission);
                        if (end < 1) {
                            return omission;
                        }
                        var result = strSymbols ?
                            castSlice(strSymbols, 0, end).join('') :
                            string.slice(0, end);

                        if (separator === undefined) {
                            return result + omission;
                        }
                        if (strSymbols) {
                            end += (result.length - end);
                        }
                        if (isRegExp(separator)) {
                            if (string.slice(end).search(separator)) {
                                var match,
                                    substring = result;

                                if (!separator.global) {
                                    separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
                                }
                                separator.lastIndex = 0;
                                while ((match = separator.exec(substring))) {
                                    var newEnd = match.index;
                                }
                                result = result.slice(0, newEnd === undefined ? end : newEnd);
                            }
                        } else if (string.indexOf(baseToString(separator), end) != end) {
                            var index = result.lastIndexOf(separator);
                            if (index > -1) {
                                result = result.slice(0, index);
                            }
                        }
                        return result + omission;
                    }

                    /**
                     * The inverse of `_.escape`; this method converts the HTML entities
                     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
                     * their corresponding characters.
                     *
                     * **Note:** No other HTML entities are unescaped. To unescape additional
                     * HTML entities use a third-party library like [_he_](https://mths.be/he).
                     *
                     * @static
                     * @memberOf _
                     * @since 0.6.0
                     * @category String
                     * @param {string} [string=''] The string to unescape.
                     * @returns {string} Returns the unescaped string.
                     * @example
                     *
                     * _.unescape('fred, barney, &amp; pebbles');
                     * // => 'fred, barney, & pebbles'
                     */
                    function unescape(string) {
                        string = toString(string);
                        return (string && reHasEscapedHtml.test(string)) ?
                            string.replace(reEscapedHtml, unescapeHtmlChar) :
                            string;
                    }

                    /**
                     * Converts `string`, as space separated words, to upper case.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category String
                     * @param {string} [string=''] The string to convert.
                     * @returns {string} Returns the upper cased string.
                     * @example
                     *
                     * _.upperCase('--foo-bar');
                     * // => 'FOO BAR'
                     *
                     * _.upperCase('fooBar');
                     * // => 'FOO BAR'
                     *
                     * _.upperCase('__foo_bar__');
                     * // => 'FOO BAR'
                     */
                    var upperCase = createCompounder(function(result, word, index) {
                        return result + (index ? ' ' : '') + word.toUpperCase();
                    });

                    /**
                     * Converts the first character of `string` to upper case.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category String
                     * @param {string} [string=''] The string to convert.
                     * @returns {string} Returns the converted string.
                     * @example
                     *
                     * _.upperFirst('fred');
                     * // => 'Fred'
                     *
                     * _.upperFirst('FRED');
                     * // => 'FRED'
                     */
                    var upperFirst = createCaseFirst('toUpperCase');

                    /**
                     * Splits `string` into an array of its words.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category String
                     * @param {string} [string=''] The string to inspect.
                     * @param {RegExp|string} [pattern] The pattern to match words.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                     * @returns {Array} Returns the words of `string`.
                     * @example
                     *
                     * _.words('fred, barney, & pebbles');
                     * // => ['fred', 'barney', 'pebbles']
                     *
                     * _.words('fred, barney, & pebbles', /[^, ]+/g);
                     * // => ['fred', 'barney', '&', 'pebbles']
                     */
                    function words(string, pattern, guard) {
                        string = toString(string);
                        pattern = guard ? undefined : pattern;

                        if (pattern === undefined) {
                            return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
                        }
                        return string.match(pattern) || [];
                    }

                    /*------------------------------------------------------------------------*/

                    /**
                     * Attempts to invoke `func`, returning either the result or the caught error
                     * object. Any additional arguments are provided to `func` when it's invoked.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Util
                     * @param {Function} func The function to attempt.
                     * @param {...*} [args] The arguments to invoke `func` with.
                     * @returns {*} Returns the `func` result or error object.
                     * @example
                     *
                     * // Avoid throwing errors for invalid selectors.
                     * var elements = _.attempt(function(selector) {
                     *   return document.querySelectorAll(selector);
                     * }, '>_>');
                     *
                     * if (_.isError(elements)) {
                     *   elements = [];
                     * }
                     */
                    var attempt = baseRest(function(func, args) {
                        try {
                            return apply(func, undefined, args);
                        } catch (e) {
                            return isError(e) ? e : new Error(e);
                        }
                    });

                    /**
                     * Binds methods of an object to the object itself, overwriting the existing
                     * method.
                     *
                     * **Note:** This method doesn't set the "length" property of bound functions.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Util
                     * @param {Object} object The object to bind and assign the bound methods to.
                     * @param {...(string|string[])} methodNames The object method names to bind.
                     * @returns {Object} Returns `object`.
                     * @example
                     *
                     * var view = {
                     *   'label': 'docs',
                     *   'click': function() {
                     *     console.log('clicked ' + this.label);
                     *   }
                     * };
                     *
                     * _.bindAll(view, ['click']);
                     * jQuery(element).on('click', view.click);
                     * // => Logs 'clicked docs' when clicked.
                     */
                    var bindAll = flatRest(function(object, methodNames) {
                        arrayEach(methodNames, function(key) {
                            key = toKey(key);
                            baseAssignValue(object, key, bind(object[key], object));
                        });
                        return object;
                    });

                    /**
                     * Creates a function that iterates over `pairs` and invokes the corresponding
                     * function of the first predicate to return truthy. The predicate-function
                     * pairs are invoked with the `this` binding and arguments of the created
                     * function.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Util
                     * @param {Array} pairs The predicate-function pairs.
                     * @returns {Function} Returns the new composite function.
                     * @example
                     *
                     * var func = _.cond([
                     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
                     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
                     *   [_.stubTrue,                      _.constant('no match')]
                     * ]);
                     *
                     * func({ 'a': 1, 'b': 2 });
                     * // => 'matches A'
                     *
                     * func({ 'a': 0, 'b': 1 });
                     * // => 'matches B'
                     *
                     * func({ 'a': '1', 'b': '2' });
                     * // => 'no match'
                     */
                    function cond(pairs) {
                        var length = pairs == null ? 0 : pairs.length,
                            toIteratee = getIteratee();

                        pairs = !length ? [] : arrayMap(pairs, function(pair) {
                            if (typeof pair[1] != 'function') {
                                throw new TypeError(FUNC_ERROR_TEXT);
                            }
                            return [toIteratee(pair[0]), pair[1]];
                        });

                        return baseRest(function(args) {
                            var index = -1;
                            while (++index < length) {
                                var pair = pairs[index];
                                if (apply(pair[0], this, args)) {
                                    return apply(pair[1], this, args);
                                }
                            }
                        });
                    }

                    /**
                     * Creates a function that invokes the predicate properties of `source` with
                     * the corresponding property values of a given object, returning `true` if
                     * all predicates return truthy, else `false`.
                     *
                     * **Note:** The created function is equivalent to `_.conformsTo` with
                     * `source` partially applied.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Util
                     * @param {Object} source The object of property predicates to conform to.
                     * @returns {Function} Returns the new spec function.
                     * @example
                     *
                     * var objects = [
                     *   { 'a': 2, 'b': 1 },
                     *   { 'a': 1, 'b': 2 }
                     * ];
                     *
                     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
                     * // => [{ 'a': 1, 'b': 2 }]
                     */
                    function conforms(source) {
                        return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
                    }

                    /**
                     * Creates a function that returns `value`.
                     *
                     * @static
                     * @memberOf _
                     * @since 2.4.0
                     * @category Util
                     * @param {*} value The value to return from the new function.
                     * @returns {Function} Returns the new constant function.
                     * @example
                     *
                     * var objects = _.times(2, _.constant({ 'a': 1 }));
                     *
                     * console.log(objects);
                     * // => [{ 'a': 1 }, { 'a': 1 }]
                     *
                     * console.log(objects[0] === objects[1]);
                     * // => true
                     */
                    function constant(value) {
                        return function() {
                            return value;
                        };
                    }

                    /**
                     * Checks `value` to determine whether a default value should be returned in
                     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
                     * or `undefined`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.14.0
                     * @category Util
                     * @param {*} value The value to check.
                     * @param {*} defaultValue The default value.
                     * @returns {*} Returns the resolved value.
                     * @example
                     *
                     * _.defaultTo(1, 10);
                     * // => 1
                     *
                     * _.defaultTo(undefined, 10);
                     * // => 10
                     */
                    function defaultTo(value, defaultValue) {
                        return (value == null || value !== value) ? defaultValue : value;
                    }

                    /**
                     * Creates a function that returns the result of invoking the given functions
                     * with the `this` binding of the created function, where each successive
                     * invocation is supplied the return value of the previous.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Util
                     * @param {...(Function|Function[])} [funcs] The functions to invoke.
                     * @returns {Function} Returns the new composite function.
                     * @see _.flowRight
                     * @example
                     *
                     * function square(n) {
                     *   return n * n;
                     * }
                     *
                     * var addSquare = _.flow([_.add, square]);
                     * addSquare(1, 2);
                     * // => 9
                     */
                    var flow = createFlow();

                    /**
                     * This method is like `_.flow` except that it creates a function that
                     * invokes the given functions from right to left.
                     *
                     * @static
                     * @since 3.0.0
                     * @memberOf _
                     * @category Util
                     * @param {...(Function|Function[])} [funcs] The functions to invoke.
                     * @returns {Function} Returns the new composite function.
                     * @see _.flow
                     * @example
                     *
                     * function square(n) {
                     *   return n * n;
                     * }
                     *
                     * var addSquare = _.flowRight([square, _.add]);
                     * addSquare(1, 2);
                     * // => 9
                     */
                    var flowRight = createFlow(true);

                    /**
                     * This method returns the first argument it receives.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Util
                     * @param {*} value Any value.
                     * @returns {*} Returns `value`.
                     * @example
                     *
                     * var object = { 'a': 1 };
                     *
                     * console.log(_.identity(object) === object);
                     * // => true
                     */
                    function identity(value) {
                        return value;
                    }

                    /**
                     * Creates a function that invokes `func` with the arguments of the created
                     * function. If `func` is a property name, the created function returns the
                     * property value for a given element. If `func` is an array or object, the
                     * created function returns `true` for elements that contain the equivalent
                     * source properties, otherwise it returns `false`.
                     *
                     * @static
                     * @since 4.0.0
                     * @memberOf _
                     * @category Util
                     * @param {*} [func=_.identity] The value to convert to a callback.
                     * @returns {Function} Returns the callback.
                     * @example
                     *
                     * var users = [
                     *   { 'user': 'barney', 'age': 36, 'active': true },
                     *   { 'user': 'fred',   'age': 40, 'active': false }
                     * ];
                     *
                     * // The `_.matches` iteratee shorthand.
                     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
                     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
                     *
                     * // The `_.matchesProperty` iteratee shorthand.
                     * _.filter(users, _.iteratee(['user', 'fred']));
                     * // => [{ 'user': 'fred', 'age': 40 }]
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.map(users, _.iteratee('user'));
                     * // => ['barney', 'fred']
                     *
                     * // Create custom iteratee shorthands.
                     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
                     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
                     *     return func.test(string);
                     *   };
                     * });
                     *
                     * _.filter(['abc', 'def'], /ef/);
                     * // => ['def']
                     */
                    function iteratee(func) {
                        return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
                    }

                    /**
                     * Creates a function that performs a partial deep comparison between a given
                     * object and `source`, returning `true` if the given object has equivalent
                     * property values, else `false`.
                     *
                     * **Note:** The created function is equivalent to `_.isMatch` with `source`
                     * partially applied.
                     *
                     * Partial comparisons will match empty array and empty object `source`
                     * values against any array or object value, respectively. See `_.isEqual`
                     * for a list of supported value comparisons.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Util
                     * @param {Object} source The object of property values to match.
                     * @returns {Function} Returns the new spec function.
                     * @example
                     *
                     * var objects = [
                     *   { 'a': 1, 'b': 2, 'c': 3 },
                     *   { 'a': 4, 'b': 5, 'c': 6 }
                     * ];
                     *
                     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
                     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
                     */
                    function matches(source) {
                        return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
                    }

                    /**
                     * Creates a function that performs a partial deep comparison between the
                     * value at `path` of a given object to `srcValue`, returning `true` if the
                     * object value is equivalent, else `false`.
                     *
                     * **Note:** Partial comparisons will match empty array and empty object
                     * `srcValue` values against any array or object value, respectively. See
                     * `_.isEqual` for a list of supported value comparisons.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.2.0
                     * @category Util
                     * @param {Array|string} path The path of the property to get.
                     * @param {*} srcValue The value to match.
                     * @returns {Function} Returns the new spec function.
                     * @example
                     *
                     * var objects = [
                     *   { 'a': 1, 'b': 2, 'c': 3 },
                     *   { 'a': 4, 'b': 5, 'c': 6 }
                     * ];
                     *
                     * _.find(objects, _.matchesProperty('a', 4));
                     * // => { 'a': 4, 'b': 5, 'c': 6 }
                     */
                    function matchesProperty(path, srcValue) {
                        return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
                    }

                    /**
                     * Creates a function that invokes the method at `path` of a given object.
                     * Any additional arguments are provided to the invoked method.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.7.0
                     * @category Util
                     * @param {Array|string} path The path of the method to invoke.
                     * @param {...*} [args] The arguments to invoke the method with.
                     * @returns {Function} Returns the new invoker function.
                     * @example
                     *
                     * var objects = [
                     *   { 'a': { 'b': _.constant(2) } },
                     *   { 'a': { 'b': _.constant(1) } }
                     * ];
                     *
                     * _.map(objects, _.method('a.b'));
                     * // => [2, 1]
                     *
                     * _.map(objects, _.method(['a', 'b']));
                     * // => [2, 1]
                     */
                    var method = baseRest(function(path, args) {
                        return function(object) {
                            return baseInvoke(object, path, args);
                        };
                    });

                    /**
                     * The opposite of `_.method`; this method creates a function that invokes
                     * the method at a given path of `object`. Any additional arguments are
                     * provided to the invoked method.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.7.0
                     * @category Util
                     * @param {Object} object The object to query.
                     * @param {...*} [args] The arguments to invoke the method with.
                     * @returns {Function} Returns the new invoker function.
                     * @example
                     *
                     * var array = _.times(3, _.constant),
                     *     object = { 'a': array, 'b': array, 'c': array };
                     *
                     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
                     * // => [2, 0]
                     *
                     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
                     * // => [2, 0]
                     */
                    var methodOf = baseRest(function(object, args) {
                        return function(path) {
                            return baseInvoke(object, path, args);
                        };
                    });

                    /**
                     * Adds all own enumerable string keyed function properties of a source
                     * object to the destination object. If `object` is a function, then methods
                     * are added to its prototype as well.
                     *
                     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
                     * avoid conflicts caused by modifying the original.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Util
                     * @param {Function|Object} [object=lodash] The destination object.
                     * @param {Object} source The object of functions to add.
                     * @param {Object} [options={}] The options object.
                     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
                     * @returns {Function|Object} Returns `object`.
                     * @example
                     *
                     * function vowels(string) {
                     *   return _.filter(string, function(v) {
                     *     return /[aeiou]/i.test(v);
                     *   });
                     * }
                     *
                     * _.mixin({ 'vowels': vowels });
                     * _.vowels('fred');
                     * // => ['e']
                     *
                     * _('fred').vowels().value();
                     * // => ['e']
                     *
                     * _.mixin({ 'vowels': vowels }, { 'chain': false });
                     * _('fred').vowels();
                     * // => ['e']
                     */
                    function mixin(object, source, options) {
                        var props = keys(source),
                            methodNames = baseFunctions(source, props);

                        if (options == null &&
                            !(isObject(source) && (methodNames.length || !props.length))) {
                            options = source;
                            source = object;
                            object = this;
                            methodNames = baseFunctions(source, keys(source));
                        }
                        var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
                            isFunc = isFunction(object);

                        arrayEach(methodNames, function(methodName) {
                            var func = source[methodName];
                            object[methodName] = func;
                            if (isFunc) {
                                object.prototype[methodName] = function() {
                                    var chainAll = this.__chain__;
                                    if (chain || chainAll) {
                                        var result = object(this.__wrapped__),
                                            actions = result.__actions__ = copyArray(this.__actions__);

                                        actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
                                        result.__chain__ = chainAll;
                                        return result;
                                    }
                                    return func.apply(object, arrayPush([this.value()], arguments));
                                };
                            }
                        });

                        return object;
                    }

                    /**
                     * Reverts the `_` variable to its previous value and returns a reference to
                     * the `lodash` function.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Util
                     * @returns {Function} Returns the `lodash` function.
                     * @example
                     *
                     * var lodash = _.noConflict();
                     */
                    function noConflict() {
                        if (root._ === this) {
                            root._ = oldDash;
                        }
                        return this;
                    }

                    /**
                     * This method returns `undefined`.
                     *
                     * @static
                     * @memberOf _
                     * @since 2.3.0
                     * @category Util
                     * @example
                     *
                     * _.times(2, _.noop);
                     * // => [undefined, undefined]
                     */
                    function noop() {
                        // No operation performed.
                    }

                    /**
                     * Creates a function that gets the argument at index `n`. If `n` is negative,
                     * the nth argument from the end is returned.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Util
                     * @param {number} [n=0] The index of the argument to return.
                     * @returns {Function} Returns the new pass-thru function.
                     * @example
                     *
                     * var func = _.nthArg(1);
                     * func('a', 'b', 'c', 'd');
                     * // => 'b'
                     *
                     * var func = _.nthArg(-2);
                     * func('a', 'b', 'c', 'd');
                     * // => 'c'
                     */
                    function nthArg(n) {
                        n = toInteger(n);
                        return baseRest(function(args) {
                            return baseNth(args, n);
                        });
                    }

                    /**
                     * Creates a function that invokes `iteratees` with the arguments it receives
                     * and returns their results.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Util
                     * @param {...(Function|Function[])} [iteratees=[_.identity]]
                     *  The iteratees to invoke.
                     * @returns {Function} Returns the new function.
                     * @example
                     *
                     * var func = _.over([Math.max, Math.min]);
                     *
                     * func(1, 2, 3, 4);
                     * // => [4, 1]
                     */
                    var over = createOver(arrayMap);

                    /**
                     * Creates a function that checks if **all** of the `predicates` return
                     * truthy when invoked with the arguments it receives.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Util
                     * @param {...(Function|Function[])} [predicates=[_.identity]]
                     *  The predicates to check.
                     * @returns {Function} Returns the new function.
                     * @example
                     *
                     * var func = _.overEvery([Boolean, isFinite]);
                     *
                     * func('1');
                     * // => true
                     *
                     * func(null);
                     * // => false
                     *
                     * func(NaN);
                     * // => false
                     */
                    var overEvery = createOver(arrayEvery);

                    /**
                     * Creates a function that checks if **any** of the `predicates` return
                     * truthy when invoked with the arguments it receives.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Util
                     * @param {...(Function|Function[])} [predicates=[_.identity]]
                     *  The predicates to check.
                     * @returns {Function} Returns the new function.
                     * @example
                     *
                     * var func = _.overSome([Boolean, isFinite]);
                     *
                     * func('1');
                     * // => true
                     *
                     * func(null);
                     * // => true
                     *
                     * func(NaN);
                     * // => false
                     */
                    var overSome = createOver(arraySome);

                    /**
                     * Creates a function that returns the value at `path` of a given object.
                     *
                     * @static
                     * @memberOf _
                     * @since 2.4.0
                     * @category Util
                     * @param {Array|string} path The path of the property to get.
                     * @returns {Function} Returns the new accessor function.
                     * @example
                     *
                     * var objects = [
                     *   { 'a': { 'b': 2 } },
                     *   { 'a': { 'b': 1 } }
                     * ];
                     *
                     * _.map(objects, _.property('a.b'));
                     * // => [2, 1]
                     *
                     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
                     * // => [1, 2]
                     */
                    function property(path) {
                        return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
                    }

                    /**
                     * The opposite of `_.property`; this method creates a function that returns
                     * the value at a given path of `object`.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Util
                     * @param {Object} object The object to query.
                     * @returns {Function} Returns the new accessor function.
                     * @example
                     *
                     * var array = [0, 1, 2],
                     *     object = { 'a': array, 'b': array, 'c': array };
                     *
                     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
                     * // => [2, 0]
                     *
                     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
                     * // => [2, 0]
                     */
                    function propertyOf(object) {
                        return function(path) {
                            return object == null ? undefined : baseGet(object, path);
                        };
                    }

                    /**
                     * Creates an array of numbers (positive and/or negative) progressing from
                     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
                     * `start` is specified without an `end` or `step`. If `end` is not specified,
                     * it's set to `start` with `start` then set to `0`.
                     *
                     * **Note:** JavaScript follows the IEEE-754 standard for resolving
                     * floating-point values which can produce unexpected results.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Util
                     * @param {number} [start=0] The start of the range.
                     * @param {number} end The end of the range.
                     * @param {number} [step=1] The value to increment or decrement by.
                     * @returns {Array} Returns the range of numbers.
                     * @see _.inRange, _.rangeRight
                     * @example
                     *
                     * _.range(4);
                     * // => [0, 1, 2, 3]
                     *
                     * _.range(-4);
                     * // => [0, -1, -2, -3]
                     *
                     * _.range(1, 5);
                     * // => [1, 2, 3, 4]
                     *
                     * _.range(0, 20, 5);
                     * // => [0, 5, 10, 15]
                     *
                     * _.range(0, -4, -1);
                     * // => [0, -1, -2, -3]
                     *
                     * _.range(1, 4, 0);
                     * // => [1, 1, 1]
                     *
                     * _.range(0);
                     * // => []
                     */
                    var range = createRange();

                    /**
                     * This method is like `_.range` except that it populates values in
                     * descending order.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Util
                     * @param {number} [start=0] The start of the range.
                     * @param {number} end The end of the range.
                     * @param {number} [step=1] The value to increment or decrement by.
                     * @returns {Array} Returns the range of numbers.
                     * @see _.inRange, _.range
                     * @example
                     *
                     * _.rangeRight(4);
                     * // => [3, 2, 1, 0]
                     *
                     * _.rangeRight(-4);
                     * // => [-3, -2, -1, 0]
                     *
                     * _.rangeRight(1, 5);
                     * // => [4, 3, 2, 1]
                     *
                     * _.rangeRight(0, 20, 5);
                     * // => [15, 10, 5, 0]
                     *
                     * _.rangeRight(0, -4, -1);
                     * // => [-3, -2, -1, 0]
                     *
                     * _.rangeRight(1, 4, 0);
                     * // => [1, 1, 1]
                     *
                     * _.rangeRight(0);
                     * // => []
                     */
                    var rangeRight = createRange(true);

                    /**
                     * This method returns a new empty array.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.13.0
                     * @category Util
                     * @returns {Array} Returns the new empty array.
                     * @example
                     *
                     * var arrays = _.times(2, _.stubArray);
                     *
                     * console.log(arrays);
                     * // => [[], []]
                     *
                     * console.log(arrays[0] === arrays[1]);
                     * // => false
                     */
                    function stubArray() {
                        return [];
                    }

                    /**
                     * This method returns `false`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.13.0
                     * @category Util
                     * @returns {boolean} Returns `false`.
                     * @example
                     *
                     * _.times(2, _.stubFalse);
                     * // => [false, false]
                     */
                    function stubFalse() {
                        return false;
                    }

                    /**
                     * This method returns a new empty object.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.13.0
                     * @category Util
                     * @returns {Object} Returns the new empty object.
                     * @example
                     *
                     * var objects = _.times(2, _.stubObject);
                     *
                     * console.log(objects);
                     * // => [{}, {}]
                     *
                     * console.log(objects[0] === objects[1]);
                     * // => false
                     */
                    function stubObject() {
                        return {};
                    }

                    /**
                     * This method returns an empty string.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.13.0
                     * @category Util
                     * @returns {string} Returns the empty string.
                     * @example
                     *
                     * _.times(2, _.stubString);
                     * // => ['', '']
                     */
                    function stubString() {
                        return '';
                    }

                    /**
                     * This method returns `true`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.13.0
                     * @category Util
                     * @returns {boolean} Returns `true`.
                     * @example
                     *
                     * _.times(2, _.stubTrue);
                     * // => [true, true]
                     */
                    function stubTrue() {
                        return true;
                    }

                    /**
                     * Invokes the iteratee `n` times, returning an array of the results of
                     * each invocation. The iteratee is invoked with one argument; (index).
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Util
                     * @param {number} n The number of times to invoke `iteratee`.
                     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                     * @returns {Array} Returns the array of results.
                     * @example
                     *
                     * _.times(3, String);
                     * // => ['0', '1', '2']
                     *
                     *  _.times(4, _.constant(0));
                     * // => [0, 0, 0, 0]
                     */
                    function times(n, iteratee) {
                        n = toInteger(n);
                        if (n < 1 || n > MAX_SAFE_INTEGER) {
                            return [];
                        }
                        var index = MAX_ARRAY_LENGTH,
                            length = nativeMin(n, MAX_ARRAY_LENGTH);

                        iteratee = getIteratee(iteratee);
                        n -= MAX_ARRAY_LENGTH;

                        var result = baseTimes(length, iteratee);
                        while (++index < n) {
                            iteratee(index);
                        }
                        return result;
                    }

                    /**
                     * Converts `value` to a property path array.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Util
                     * @param {*} value The value to convert.
                     * @returns {Array} Returns the new property path array.
                     * @example
                     *
                     * _.toPath('a.b.c');
                     * // => ['a', 'b', 'c']
                     *
                     * _.toPath('a[0].b.c');
                     * // => ['a', '0', 'b', 'c']
                     */
                    function toPath(value) {
                        if (isArray(value)) {
                            return arrayMap(value, toKey);
                        }
                        return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
                    }

                    /**
                     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Util
                     * @param {string} [prefix=''] The value to prefix the ID with.
                     * @returns {string} Returns the unique ID.
                     * @example
                     *
                     * _.uniqueId('contact_');
                     * // => 'contact_104'
                     *
                     * _.uniqueId();
                     * // => '105'
                     */
                    function uniqueId(prefix) {
                        var id = ++idCounter;
                        return toString(prefix) + id;
                    }

                    /*------------------------------------------------------------------------*/

                    /**
                     * Adds two numbers.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.4.0
                     * @category Math
                     * @param {number} augend The first number in an addition.
                     * @param {number} addend The second number in an addition.
                     * @returns {number} Returns the total.
                     * @example
                     *
                     * _.add(6, 4);
                     * // => 10
                     */
                    var add = createMathOperation(function(augend, addend) {
                        return augend + addend;
                    }, 0);

                    /**
                     * Computes `number` rounded up to `precision`.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.10.0
                     * @category Math
                     * @param {number} number The number to round up.
                     * @param {number} [precision=0] The precision to round up to.
                     * @returns {number} Returns the rounded up number.
                     * @example
                     *
                     * _.ceil(4.006);
                     * // => 5
                     *
                     * _.ceil(6.004, 2);
                     * // => 6.01
                     *
                     * _.ceil(6040, -2);
                     * // => 6100
                     */
                    var ceil = createRound('ceil');

                    /**
                     * Divide two numbers.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.7.0
                     * @category Math
                     * @param {number} dividend The first number in a division.
                     * @param {number} divisor The second number in a division.
                     * @returns {number} Returns the quotient.
                     * @example
                     *
                     * _.divide(6, 4);
                     * // => 1.5
                     */
                    var divide = createMathOperation(function(dividend, divisor) {
                        return dividend / divisor;
                    }, 1);

                    /**
                     * Computes `number` rounded down to `precision`.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.10.0
                     * @category Math
                     * @param {number} number The number to round down.
                     * @param {number} [precision=0] The precision to round down to.
                     * @returns {number} Returns the rounded down number.
                     * @example
                     *
                     * _.floor(4.006);
                     * // => 4
                     *
                     * _.floor(0.046, 2);
                     * // => 0.04
                     *
                     * _.floor(4060, -2);
                     * // => 4000
                     */
                    var floor = createRound('floor');

                    /**
                     * Computes the maximum value of `array`. If `array` is empty or falsey,
                     * `undefined` is returned.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Math
                     * @param {Array} array The array to iterate over.
                     * @returns {*} Returns the maximum value.
                     * @example
                     *
                     * _.max([4, 2, 8, 6]);
                     * // => 8
                     *
                     * _.max([]);
                     * // => undefined
                     */
                    function max(array) {
                        return (array && array.length) ?
                            baseExtremum(array, identity, baseGt) :
                            undefined;
                    }

                    /**
                     * This method is like `_.max` except that it accepts `iteratee` which is
                     * invoked for each element in `array` to generate the criterion by which
                     * the value is ranked. The iteratee is invoked with one argument: (value).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Math
                     * @param {Array} array The array to iterate over.
                     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                     * @returns {*} Returns the maximum value.
                     * @example
                     *
                     * var objects = [{ 'n': 1 }, { 'n': 2 }];
                     *
                     * _.maxBy(objects, function(o) { return o.n; });
                     * // => { 'n': 2 }
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.maxBy(objects, 'n');
                     * // => { 'n': 2 }
                     */
                    function maxBy(array, iteratee) {
                        return (array && array.length) ?
                            baseExtremum(array, getIteratee(iteratee, 2), baseGt) :
                            undefined;
                    }

                    /**
                     * Computes the mean of the values in `array`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Math
                     * @param {Array} array The array to iterate over.
                     * @returns {number} Returns the mean.
                     * @example
                     *
                     * _.mean([4, 2, 8, 6]);
                     * // => 5
                     */
                    function mean(array) {
                        return baseMean(array, identity);
                    }

                    /**
                     * This method is like `_.mean` except that it accepts `iteratee` which is
                     * invoked for each element in `array` to generate the value to be averaged.
                     * The iteratee is invoked with one argument: (value).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.7.0
                     * @category Math
                     * @param {Array} array The array to iterate over.
                     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                     * @returns {number} Returns the mean.
                     * @example
                     *
                     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
                     *
                     * _.meanBy(objects, function(o) { return o.n; });
                     * // => 5
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.meanBy(objects, 'n');
                     * // => 5
                     */
                    function meanBy(array, iteratee) {
                        return baseMean(array, getIteratee(iteratee, 2));
                    }

                    /**
                     * Computes the minimum value of `array`. If `array` is empty or falsey,
                     * `undefined` is returned.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Math
                     * @param {Array} array The array to iterate over.
                     * @returns {*} Returns the minimum value.
                     * @example
                     *
                     * _.min([4, 2, 8, 6]);
                     * // => 2
                     *
                     * _.min([]);
                     * // => undefined
                     */
                    function min(array) {
                        return (array && array.length) ?
                            baseExtremum(array, identity, baseLt) :
                            undefined;
                    }

                    /**
                     * This method is like `_.min` except that it accepts `iteratee` which is
                     * invoked for each element in `array` to generate the criterion by which
                     * the value is ranked. The iteratee is invoked with one argument: (value).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Math
                     * @param {Array} array The array to iterate over.
                     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                     * @returns {*} Returns the minimum value.
                     * @example
                     *
                     * var objects = [{ 'n': 1 }, { 'n': 2 }];
                     *
                     * _.minBy(objects, function(o) { return o.n; });
                     * // => { 'n': 1 }
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.minBy(objects, 'n');
                     * // => { 'n': 1 }
                     */
                    function minBy(array, iteratee) {
                        return (array && array.length) ?
                            baseExtremum(array, getIteratee(iteratee, 2), baseLt) :
                            undefined;
                    }

                    /**
                     * Multiply two numbers.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.7.0
                     * @category Math
                     * @param {number} multiplier The first number in a multiplication.
                     * @param {number} multiplicand The second number in a multiplication.
                     * @returns {number} Returns the product.
                     * @example
                     *
                     * _.multiply(6, 4);
                     * // => 24
                     */
                    var multiply = createMathOperation(function(multiplier, multiplicand) {
                        return multiplier * multiplicand;
                    }, 1);

                    /**
                     * Computes `number` rounded to `precision`.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.10.0
                     * @category Math
                     * @param {number} number The number to round.
                     * @param {number} [precision=0] The precision to round to.
                     * @returns {number} Returns the rounded number.
                     * @example
                     *
                     * _.round(4.006);
                     * // => 4
                     *
                     * _.round(4.006, 2);
                     * // => 4.01
                     *
                     * _.round(4060, -2);
                     * // => 4100
                     */
                    var round = createRound('round');

                    /**
                     * Subtract two numbers.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Math
                     * @param {number} minuend The first number in a subtraction.
                     * @param {number} subtrahend The second number in a subtraction.
                     * @returns {number} Returns the difference.
                     * @example
                     *
                     * _.subtract(6, 4);
                     * // => 2
                     */
                    var subtract = createMathOperation(function(minuend, subtrahend) {
                        return minuend - subtrahend;
                    }, 0);

                    /**
                     * Computes the sum of the values in `array`.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.4.0
                     * @category Math
                     * @param {Array} array The array to iterate over.
                     * @returns {number} Returns the sum.
                     * @example
                     *
                     * _.sum([4, 2, 8, 6]);
                     * // => 20
                     */
                    function sum(array) {
                        return (array && array.length) ?
                            baseSum(array, identity) :
                            0;
                    }

                    /**
                     * This method is like `_.sum` except that it accepts `iteratee` which is
                     * invoked for each element in `array` to generate the value to be summed.
                     * The iteratee is invoked with one argument: (value).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Math
                     * @param {Array} array The array to iterate over.
                     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                     * @returns {number} Returns the sum.
                     * @example
                     *
                     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
                     *
                     * _.sumBy(objects, function(o) { return o.n; });
                     * // => 20
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.sumBy(objects, 'n');
                     * // => 20
                     */
                    function sumBy(array, iteratee) {
                        return (array && array.length) ?
                            baseSum(array, getIteratee(iteratee, 2)) :
                            0;
                    }

                    /*------------------------------------------------------------------------*/

                    // Add methods that return wrapped values in chain sequences.
                    lodash.after = after;
                    lodash.ary = ary;
                    lodash.assign = assign;
                    lodash.assignIn = assignIn;
                    lodash.assignInWith = assignInWith;
                    lodash.assignWith = assignWith;
                    lodash.at = at;
                    lodash.before = before;
                    lodash.bind = bind;
                    lodash.bindAll = bindAll;
                    lodash.bindKey = bindKey;
                    lodash.castArray = castArray;
                    lodash.chain = chain;
                    lodash.chunk = chunk;
                    lodash.compact = compact;
                    lodash.concat = concat;
                    lodash.cond = cond;
                    lodash.conforms = conforms;
                    lodash.constant = constant;
                    lodash.countBy = countBy;
                    lodash.create = create;
                    lodash.curry = curry;
                    lodash.curryRight = curryRight;
                    lodash.debounce = debounce;
                    lodash.defaults = defaults;
                    lodash.defaultsDeep = defaultsDeep;
                    lodash.defer = defer;
                    lodash.delay = delay;
                    lodash.difference = difference;
                    lodash.differenceBy = differenceBy;
                    lodash.differenceWith = differenceWith;
                    lodash.drop = drop;
                    lodash.dropRight = dropRight;
                    lodash.dropRightWhile = dropRightWhile;
                    lodash.dropWhile = dropWhile;
                    lodash.fill = fill;
                    lodash.filter = filter;
                    lodash.flatMap = flatMap;
                    lodash.flatMapDeep = flatMapDeep;
                    lodash.flatMapDepth = flatMapDepth;
                    lodash.flatten = flatten;
                    lodash.flattenDeep = flattenDeep;
                    lodash.flattenDepth = flattenDepth;
                    lodash.flip = flip;
                    lodash.flow = flow;
                    lodash.flowRight = flowRight;
                    lodash.fromPairs = fromPairs;
                    lodash.functions = functions;
                    lodash.functionsIn = functionsIn;
                    lodash.groupBy = groupBy;
                    lodash.initial = initial;
                    lodash.intersection = intersection;
                    lodash.intersectionBy = intersectionBy;
                    lodash.intersectionWith = intersectionWith;
                    lodash.invert = invert;
                    lodash.invertBy = invertBy;
                    lodash.invokeMap = invokeMap;
                    lodash.iteratee = iteratee;
                    lodash.keyBy = keyBy;
                    lodash.keys = keys;
                    lodash.keysIn = keysIn;
                    lodash.map = map;
                    lodash.mapKeys = mapKeys;
                    lodash.mapValues = mapValues;
                    lodash.matches = matches;
                    lodash.matchesProperty = matchesProperty;
                    lodash.memoize = memoize;
                    lodash.merge = merge;
                    lodash.mergeWith = mergeWith;
                    lodash.method = method;
                    lodash.methodOf = methodOf;
                    lodash.mixin = mixin;
                    lodash.negate = negate;
                    lodash.nthArg = nthArg;
                    lodash.omit = omit;
                    lodash.omitBy = omitBy;
                    lodash.once = once;
                    lodash.orderBy = orderBy;
                    lodash.over = over;
                    lodash.overArgs = overArgs;
                    lodash.overEvery = overEvery;
                    lodash.overSome = overSome;
                    lodash.partial = partial;
                    lodash.partialRight = partialRight;
                    lodash.partition = partition;
                    lodash.pick = pick;
                    lodash.pickBy = pickBy;
                    lodash.property = property;
                    lodash.propertyOf = propertyOf;
                    lodash.pull = pull;
                    lodash.pullAll = pullAll;
                    lodash.pullAllBy = pullAllBy;
                    lodash.pullAllWith = pullAllWith;
                    lodash.pullAt = pullAt;
                    lodash.range = range;
                    lodash.rangeRight = rangeRight;
                    lodash.rearg = rearg;
                    lodash.reject = reject;
                    lodash.remove = remove;
                    lodash.rest = rest;
                    lodash.reverse = reverse;
                    lodash.sampleSize = sampleSize;
                    lodash.set = set;
                    lodash.setWith = setWith;
                    lodash.shuffle = shuffle;
                    lodash.slice = slice;
                    lodash.sortBy = sortBy;
                    lodash.sortedUniq = sortedUniq;
                    lodash.sortedUniqBy = sortedUniqBy;
                    lodash.split = split;
                    lodash.spread = spread;
                    lodash.tail = tail;
                    lodash.take = take;
                    lodash.takeRight = takeRight;
                    lodash.takeRightWhile = takeRightWhile;
                    lodash.takeWhile = takeWhile;
                    lodash.tap = tap;
                    lodash.throttle = throttle;
                    lodash.thru = thru;
                    lodash.toArray = toArray;
                    lodash.toPairs = toPairs;
                    lodash.toPairsIn = toPairsIn;
                    lodash.toPath = toPath;
                    lodash.toPlainObject = toPlainObject;
                    lodash.transform = transform;
                    lodash.unary = unary;
                    lodash.union = union;
                    lodash.unionBy = unionBy;
                    lodash.unionWith = unionWith;
                    lodash.uniq = uniq;
                    lodash.uniqBy = uniqBy;
                    lodash.uniqWith = uniqWith;
                    lodash.unset = unset;
                    lodash.unzip = unzip;
                    lodash.unzipWith = unzipWith;
                    lodash.update = update;
                    lodash.updateWith = updateWith;
                    lodash.values = values;
                    lodash.valuesIn = valuesIn;
                    lodash.without = without;
                    lodash.words = words;
                    lodash.wrap = wrap;
                    lodash.xor = xor;
                    lodash.xorBy = xorBy;
                    lodash.xorWith = xorWith;
                    lodash.zip = zip;
                    lodash.zipObject = zipObject;
                    lodash.zipObjectDeep = zipObjectDeep;
                    lodash.zipWith = zipWith;

                    // Add aliases.
                    lodash.entries = toPairs;
                    lodash.entriesIn = toPairsIn;
                    lodash.extend = assignIn;
                    lodash.extendWith = assignInWith;

                    // Add methods to `lodash.prototype`.
                    mixin(lodash, lodash);

                    /*------------------------------------------------------------------------*/

                    // Add methods that return unwrapped values in chain sequences.
                    lodash.add = add;
                    lodash.attempt = attempt;
                    lodash.camelCase = camelCase;
                    lodash.capitalize = capitalize;
                    lodash.ceil = ceil;
                    lodash.clamp = clamp;
                    lodash.clone = clone;
                    lodash.cloneDeep = cloneDeep;
                    lodash.cloneDeepWith = cloneDeepWith;
                    lodash.cloneWith = cloneWith;
                    lodash.conformsTo = conformsTo;
                    lodash.deburr = deburr;
                    lodash.defaultTo = defaultTo;
                    lodash.divide = divide;
                    lodash.endsWith = endsWith;
                    lodash.eq = eq;
                    lodash.escape = escape;
                    lodash.escapeRegExp = escapeRegExp;
                    lodash.every = every;
                    lodash.find = find;
                    lodash.findIndex = findIndex;
                    lodash.findKey = findKey;
                    lodash.findLast = findLast;
                    lodash.findLastIndex = findLastIndex;
                    lodash.findLastKey = findLastKey;
                    lodash.floor = floor;
                    lodash.forEach = forEach;
                    lodash.forEachRight = forEachRight;
                    lodash.forIn = forIn;
                    lodash.forInRight = forInRight;
                    lodash.forOwn = forOwn;
                    lodash.forOwnRight = forOwnRight;
                    lodash.get = get;
                    lodash.gt = gt;
                    lodash.gte = gte;
                    lodash.has = has;
                    lodash.hasIn = hasIn;
                    lodash.head = head;
                    lodash.identity = identity;
                    lodash.includes = includes;
                    lodash.indexOf = indexOf;
                    lodash.inRange = inRange;
                    lodash.invoke = invoke;
                    lodash.isArguments = isArguments;
                    lodash.isArray = isArray;
                    lodash.isArrayBuffer = isArrayBuffer;
                    lodash.isArrayLike = isArrayLike;
                    lodash.isArrayLikeObject = isArrayLikeObject;
                    lodash.isBoolean = isBoolean;
                    lodash.isBuffer = isBuffer;
                    lodash.isDate = isDate;
                    lodash.isElement = isElement;
                    lodash.isEmpty = isEmpty;
                    lodash.isEqual = isEqual;
                    lodash.isEqualWith = isEqualWith;
                    lodash.isError = isError;
                    lodash.isFinite = isFinite;
                    lodash.isFunction = isFunction;
                    lodash.isInteger = isInteger;
                    lodash.isLength = isLength;
                    lodash.isMap = isMap;
                    lodash.isMatch = isMatch;
                    lodash.isMatchWith = isMatchWith;
                    lodash.isNaN = isNaN;
                    lodash.isNative = isNative;
                    lodash.isNil = isNil;
                    lodash.isNull = isNull;
                    lodash.isNumber = isNumber;
                    lodash.isObject = isObject;
                    lodash.isObjectLike = isObjectLike;
                    lodash.isPlainObject = isPlainObject;
                    lodash.isRegExp = isRegExp;
                    lodash.isSafeInteger = isSafeInteger;
                    lodash.isSet = isSet;
                    lodash.isString = isString;
                    lodash.isSymbol = isSymbol;
                    lodash.isTypedArray = isTypedArray;
                    lodash.isUndefined = isUndefined;
                    lodash.isWeakMap = isWeakMap;
                    lodash.isWeakSet = isWeakSet;
                    lodash.join = join;
                    lodash.kebabCase = kebabCase;
                    lodash.last = last;
                    lodash.lastIndexOf = lastIndexOf;
                    lodash.lowerCase = lowerCase;
                    lodash.lowerFirst = lowerFirst;
                    lodash.lt = lt;
                    lodash.lte = lte;
                    lodash.max = max;
                    lodash.maxBy = maxBy;
                    lodash.mean = mean;
                    lodash.meanBy = meanBy;
                    lodash.min = min;
                    lodash.minBy = minBy;
                    lodash.stubArray = stubArray;
                    lodash.stubFalse = stubFalse;
                    lodash.stubObject = stubObject;
                    lodash.stubString = stubString;
                    lodash.stubTrue = stubTrue;
                    lodash.multiply = multiply;
                    lodash.nth = nth;
                    lodash.noConflict = noConflict;
                    lodash.noop = noop;
                    lodash.now = now;
                    lodash.pad = pad;
                    lodash.padEnd = padEnd;
                    lodash.padStart = padStart;
                    lodash.parseInt = parseInt;
                    lodash.random = random;
                    lodash.reduce = reduce;
                    lodash.reduceRight = reduceRight;
                    lodash.repeat = repeat;
                    lodash.replace = replace;
                    lodash.result = result;
                    lodash.round = round;
                    lodash.runInContext = runInContext;
                    lodash.sample = sample;
                    lodash.size = size;
                    lodash.snakeCase = snakeCase;
                    lodash.some = some;
                    lodash.sortedIndex = sortedIndex;
                    lodash.sortedIndexBy = sortedIndexBy;
                    lodash.sortedIndexOf = sortedIndexOf;
                    lodash.sortedLastIndex = sortedLastIndex;
                    lodash.sortedLastIndexBy = sortedLastIndexBy;
                    lodash.sortedLastIndexOf = sortedLastIndexOf;
                    lodash.startCase = startCase;
                    lodash.startsWith = startsWith;
                    lodash.subtract = subtract;
                    lodash.sum = sum;
                    lodash.sumBy = sumBy;
                    lodash.template = template;
                    lodash.times = times;
                    lodash.toFinite = toFinite;
                    lodash.toInteger = toInteger;
                    lodash.toLength = toLength;
                    lodash.toLower = toLower;
                    lodash.toNumber = toNumber;
                    lodash.toSafeInteger = toSafeInteger;
                    lodash.toString = toString;
                    lodash.toUpper = toUpper;
                    lodash.trim = trim;
                    lodash.trimEnd = trimEnd;
                    lodash.trimStart = trimStart;
                    lodash.truncate = truncate;
                    lodash.unescape = unescape;
                    lodash.uniqueId = uniqueId;
                    lodash.upperCase = upperCase;
                    lodash.upperFirst = upperFirst;

                    // Add aliases.
                    lodash.each = forEach;
                    lodash.eachRight = forEachRight;
                    lodash.first = head;

                    mixin(lodash, (function() {
                        var source = {};
                        baseForOwn(lodash, function(func, methodName) {
                            if (!hasOwnProperty.call(lodash.prototype, methodName)) {
                                source[methodName] = func;
                            }
                        });
                        return source;
                    }()), { 'chain': false });

                    /*------------------------------------------------------------------------*/

                    /**
                     * The semantic version number.
                     *
                     * @static
                     * @memberOf _
                     * @type {string}
                     */
                    lodash.VERSION = VERSION;

                    // Assign default placeholders.
                    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
                        lodash[methodName].placeholder = lodash;
                    });

                    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
                    arrayEach(['drop', 'take'], function(methodName, index) {
                        LazyWrapper.prototype[methodName] = function(n) {
                            n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

                            var result = (this.__filtered__ && !index) ?
                                new LazyWrapper(this) :
                                this.clone();

                            if (result.__filtered__) {
                                result.__takeCount__ = nativeMin(n, result.__takeCount__);
                            } else {
                                result.__views__.push({
                                    'size': nativeMin(n, MAX_ARRAY_LENGTH),
                                    'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
                                });
                            }
                            return result;
                        };

                        LazyWrapper.prototype[methodName + 'Right'] = function(n) {
                            return this.reverse()[methodName](n).reverse();
                        };
                    });

                    // Add `LazyWrapper` methods that accept an `iteratee` value.
                    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
                        var type = index + 1,
                            isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

                        LazyWrapper.prototype[methodName] = function(iteratee) {
                            var result = this.clone();
                            result.__iteratees__.push({
                                'iteratee': getIteratee(iteratee, 3),
                                'type': type
                            });
                            result.__filtered__ = result.__filtered__ || isFilter;
                            return result;
                        };
                    });

                    // Add `LazyWrapper` methods for `_.head` and `_.last`.
                    arrayEach(['head', 'last'], function(methodName, index) {
                        var takeName = 'take' + (index ? 'Right' : '');

                        LazyWrapper.prototype[methodName] = function() {
                            return this[takeName](1).value()[0];
                        };
                    });

                    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
                    arrayEach(['initial', 'tail'], function(methodName, index) {
                        var dropName = 'drop' + (index ? '' : 'Right');

                        LazyWrapper.prototype[methodName] = function() {
                            return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
                        };
                    });

                    LazyWrapper.prototype.compact = function() {
                        return this.filter(identity);
                    };

                    LazyWrapper.prototype.find = function(predicate) {
                        return this.filter(predicate).head();
                    };

                    LazyWrapper.prototype.findLast = function(predicate) {
                        return this.reverse().find(predicate);
                    };

                    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
                        if (typeof path == 'function') {
                            return new LazyWrapper(this);
                        }
                        return this.map(function(value) {
                            return baseInvoke(value, path, args);
                        });
                    });

                    LazyWrapper.prototype.reject = function(predicate) {
                        return this.filter(negate(getIteratee(predicate)));
                    };

                    LazyWrapper.prototype.slice = function(start, end) {
                        start = toInteger(start);

                        var result = this;
                        if (result.__filtered__ && (start > 0 || end < 0)) {
                            return new LazyWrapper(result);
                        }
                        if (start < 0) {
                            result = result.takeRight(-start);
                        } else if (start) {
                            result = result.drop(start);
                        }
                        if (end !== undefined) {
                            end = toInteger(end);
                            result = end < 0 ? result.dropRight(-end) : result.take(end - start);
                        }
                        return result;
                    };

                    LazyWrapper.prototype.takeRightWhile = function(predicate) {
                        return this.reverse().takeWhile(predicate).reverse();
                    };

                    LazyWrapper.prototype.toArray = function() {
                        return this.take(MAX_ARRAY_LENGTH);
                    };

                    // Add `LazyWrapper` methods to `lodash.prototype`.
                    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
                        var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
                            isTaker = /^(?:head|last)$/.test(methodName),
                            lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
                            retUnwrapped = isTaker || /^find/.test(methodName);

                        if (!lodashFunc) {
                            return;
                        }
                        lodash.prototype[methodName] = function() {
                            var value = this.__wrapped__,
                                args = isTaker ? [1] : arguments,
                                isLazy = value instanceof LazyWrapper,
                                iteratee = args[0],
                                useLazy = isLazy || isArray(value);

                            var interceptor = function(value) {
                                var result = lodashFunc.apply(lodash, arrayPush([value], args));
                                return (isTaker && chainAll) ? result[0] : result;
                            };

                            if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
                                // Avoid lazy use if the iteratee has a "length" value other than `1`.
                                isLazy = useLazy = false;
                            }
                            var chainAll = this.__chain__,
                                isHybrid = !!this.__actions__.length,
                                isUnwrapped = retUnwrapped && !chainAll,
                                onlyLazy = isLazy && !isHybrid;

                            if (!retUnwrapped && useLazy) {
                                value = onlyLazy ? value : new LazyWrapper(this);
                                var result = func.apply(value, args);
                                result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
                                return new LodashWrapper(result, chainAll);
                            }
                            if (isUnwrapped && onlyLazy) {
                                return func.apply(this, args);
                            }
                            result = this.thru(interceptor);
                            return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
                        };
                    });

                    // Add `Array` methods to `lodash.prototype`.
                    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
                        var func = arrayProto[methodName],
                            chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
                            retUnwrapped = /^(?:pop|shift)$/.test(methodName);

                        lodash.prototype[methodName] = function() {
                            var args = arguments;
                            if (retUnwrapped && !this.__chain__) {
                                var value = this.value();
                                return func.apply(isArray(value) ? value : [], args);
                            }
                            return this[chainName](function(value) {
                                return func.apply(isArray(value) ? value : [], args);
                            });
                        };
                    });

                    // Map minified method names to their real names.
                    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
                        var lodashFunc = lodash[methodName];
                        if (lodashFunc) {
                            var key = (lodashFunc.name + ''),
                                names = realNames[key] || (realNames[key] = []);

                            names.push({ 'name': methodName, 'func': lodashFunc });
                        }
                    });

                    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
                        'name': 'wrapper',
                        'func': undefined
                    }];

                    // Add methods to `LazyWrapper`.
                    LazyWrapper.prototype.clone = lazyClone;
                    LazyWrapper.prototype.reverse = lazyReverse;
                    LazyWrapper.prototype.value = lazyValue;

                    // Add chain sequence methods to the `lodash` wrapper.
                    lodash.prototype.at = wrapperAt;
                    lodash.prototype.chain = wrapperChain;
                    lodash.prototype.commit = wrapperCommit;
                    lodash.prototype.next = wrapperNext;
                    lodash.prototype.plant = wrapperPlant;
                    lodash.prototype.reverse = wrapperReverse;
                    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

                    // Add lazy aliases.
                    lodash.prototype.first = lodash.prototype.head;

                    if (symIterator) {
                        lodash.prototype[symIterator] = wrapperToIterator;
                    }
                    return lodash;
                });

                /*--------------------------------------------------------------------------*/

                // Export lodash.
                var _ = runInContext();

                // Some AMD build optimizers, like r.js, check for condition patterns like:
                if (true) {
                    // Expose Lodash on the global object to prevent errors when Lodash is
                    // loaded by a script tag in the presence of an AMD loader.
                    // See http://requirejs.org/docs/errors.html#mismatch for more details.
                    // Use `_.noConflict` to remove Lodash from the global object.
                    root._ = _;

                    // Define as an anonymous module so, through path mapping, it can be
                    // referenced as the "underscore" module.
                    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
                        return _;
                    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
                }
                // Check for `exports` after `define` in case a build optimizer adds it.
                else if (freeModule) {
                    // Export for Node.js.
                    (freeModule.exports = _)._ = _;
                    // Export for CommonJS support.
                    freeExports._ = _;
                } else {
                    // Export to the global object.
                    root._ = _;
                }
            }.call(this));

            /* WEBPACK VAR INJECTION */
        }.call(exports, (function() { return this; }()), __webpack_require__(8)(module)))

        /***/
    }),
    /* 8 */
    /***/
    (function(module, exports) {

        module.exports = function(module) {
            if (!module.webpackPolyfill) {
                module.deprecate = function() {};
                module.paths = [];
                // module.parent = undefined by default
                module.children = [];
                module.webpackPolyfill = 1;
            }
            return module;
        }


        /***/
    }),
    /* 9 */
    /***/
    (function(module, exports) {

        "use strict";

        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        exports.default = function(imageWidth, imageHeight, containerWidth, containerHeight, alignX, alignY) {

            var target = {
                x: 0,
                y: 0,
                width: containerWidth,
                height: containerHeight
            };

            var imageRatio = imageWidth / imageHeight;
            var containerRatio = containerWidth / containerHeight;

            var scale = void 0;
            if (imageRatio > containerRatio) {
                scale = containerHeight / imageHeight;
                target.width = imageWidth * scale;
                target.x = (containerWidth - target.width) * alignX;
            } else {
                scale = containerWidth / imageWidth;
                target.height = imageHeight * scale;
                target.y = (containerHeight - target.height) * alignY;
            }

            return target;
        };

        /***/
    }),
    /* 10 */
    /***/
    (function(module, exports, __webpack_require__) {

        'use strict';

        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        var _lodash = __webpack_require__(7);

        exports.default = function() {
            return {
                _listeners: null,
                addEventListener: function addEventListener(event, callback) {
                    if (this._listeners == null) this._listeners = [];

                    this._listeners.push({ event: event, callback: callback });
                },
                dispatchEvent: function dispatchEvent(event) {
                    var _this = this;

                    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                    if (this._listeners == null) return;

                    this._listeners.filter(function(v) {
                        return v.event == event;
                    }).forEach(function(v) {
                        return v.callback.call(_this, (0, _lodash.assign)({
                            target: _this,
                            currentTarget: _this
                        }, data));
                    });
                },
                removeEventListener: function removeEventListener(event, callback) {
                    if (this._listeners == null) return;

                    this._listeners = this._listeners.filter(function(v) {
                        return v.event != event || v.callback != callback;
                    });
                }
            };
        };

        /***/
    }),
    /* 11 */
    /***/
    (function(module, exports) {

        module.exports = "precision mediump float;\n\n/*\nMESSY CODE AHEAD\n(sorry, experimenting)\n*/\n\nuniform float u_time;\nvarying vec2 v_position;\nuniform sampler2D u_image;\nuniform sampler2D u_maps;\nuniform vec2 u_mouse;\nuniform float u_dpi;\nuniform vec2 u_resolution;\n\nvec2 pos(){\n  return vec2(0.0,0.0);\n}\n\nvec4 blend(vec4 bg,vec4 fg){\n  vec3 bgm=bg.rgb*bg.a;\n  vec3 fgm=fg.rgb*fg.a;\n  float ia=1.0-fg.a;\n  float a=(fg.a + bg.a * ia);\n  vec3 rgb;\n  if(a!=0.0){\n    rgb=(fgm + bgm * ia) / a;\n  }else{\n    rgb=vec3(0.0,0.0,0.0);\n  }\n  return vec4(rgb,a);\n}\nvec2 pixel(){\n  return vec2(1.0*u_dpi)/u_resolution;\n}\nfloat wave(float x,float freq, float speed){\n  return sin(x*freq+((u_time*(3.1415/2.0))*speed));\n}\nvec2 waves(vec2 pos){\n  vec4 maps=texture2D(u_maps,pos);\n  float mask=maps.r;\n  float y=maps.g;\n  float y2=pow(y,2.0);\n\n  vec2 intensity=vec2(\n    0.5-(y2*0.5),\n    0.2+(y2*1.8)\n  )*pixel();\n\n  vec2 waves=vec2(\n    wave(y,400.0-(y2*200.0),-0.03),\n     wave(y,400.0-(y2*400.0*0.05),-0.045)\n    +wave(y,900.0-(y2*900.0*0.05),-0.05)\n    +wave(pos.x,20.0+(y2*20.0*1.5),-0.01)\n  );\n  return pos+(waves*intensity*mask);\n}\nvec2 depth(vec2 pos){\n  vec2 intensity=vec2(0.01,0.01);\n  float d=0.05-pow(texture2D(u_maps,pos).b,1.0);\n  return pos+(intensity*u_mouse*d);\n}\nvoid main(){\n  vec2 pos=v_position.xy;\n\n  vec2 turbulence=depth(waves(pos));\n  vec2 noTurbulence=depth(pos);\n  vec4 c=texture2D(u_image,turbulence);\n\n\n  gl_FragColor=vec4(c.rgb,1.0);\n\n}\n"

        /***/
    }),
    /* 12 */
    /***/
    (function(module, exports, __webpack_require__) {

        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__; /* WEBPACK VAR INJECTION */
        (function(global) {
            /*!
             * VERSION: 1.20.2
             * DATE: 2017-06-30
             * UPDATES AND DOCS AT: http://greensock.com
             * 
             * Includes all of the following: TweenLite, TweenMax, TimelineLite, TimelineMax, EasePack, CSSPlugin, RoundPropsPlugin, BezierPlugin, AttrPlugin, DirectionalRotationPlugin
             *
             * @license Copyright (c) 2008-2017, GreenSock. All rights reserved.
             * This work is subject to the terms at http://greensock.com/standard-license or for
             * Club GreenSock members, the software agreement that was issued with your membership.
             * 
             * @author: Jack Doyle, jack@greensock.com
             **/
            var _gsScope = (typeof(module) !== "undefined" && module.exports && typeof(global) !== "undefined") ? global : this || window; //helps ensure compatibility with AMD/RequireJS and CommonJS/Node
            (_gsScope._gsQueue || (_gsScope._gsQueue = [])).push(function() {

                "use strict";

                _gsScope._gsDefine("TweenMax", ["core.Animation", "core.SimpleTimeline", "TweenLite"], function(Animation, SimpleTimeline, TweenLite) {

                    var _slice = function(a) { //don't use [].slice because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()
                            var b = [],
                                l = a.length,
                                i;
                            for (i = 0; i !== l; b.push(a[i++]));
                            return b;
                        },
                        _applyCycle = function(vars, targets, i) {
                            var alt = vars.cycle,
                                p, val;
                            for (p in alt) {
                                val = alt[p];
                                vars[p] = (typeof(val) === "function") ? val(i, targets[i]) : val[i % val.length];
                            }
                            delete vars.cycle;
                        },
                        TweenMax = function(target, duration, vars) {
                            TweenLite.call(this, target, duration, vars);
                            this._cycle = 0;
                            this._yoyo = (this.vars.yoyo === true || !!this.vars.yoyoEase);
                            this._repeat = this.vars.repeat || 0;
                            this._repeatDelay = this.vars.repeatDelay || 0;
                            this._dirty = true; //ensures that if there is any repeat, the totalDuration will get recalculated to accurately report it.
                            this.render = TweenMax.prototype.render; //speed optimization (avoid prototype lookup on this "hot" method)
                        },
                        _tinyNum = 0.0000000001,
                        TweenLiteInternals = TweenLite._internals,
                        _isSelector = TweenLiteInternals.isSelector,
                        _isArray = TweenLiteInternals.isArray,
                        p = TweenMax.prototype = TweenLite.to({}, 0.1, {}),
                        _blankArray = [];

                    TweenMax.version = "1.20.2";
                    p.constructor = TweenMax;
                    p.kill()._gc = false;
                    TweenMax.killTweensOf = TweenMax.killDelayedCallsTo = TweenLite.killTweensOf;
                    TweenMax.getTweensOf = TweenLite.getTweensOf;
                    TweenMax.lagSmoothing = TweenLite.lagSmoothing;
                    TweenMax.ticker = TweenLite.ticker;
                    TweenMax.render = TweenLite.render;

                    p.invalidate = function() {
                        this._yoyo = (this.vars.yoyo === true || !!this.vars.yoyoEase);
                        this._repeat = this.vars.repeat || 0;
                        this._repeatDelay = this.vars.repeatDelay || 0;
                        this._yoyoEase = null;
                        this._uncache(true);
                        return TweenLite.prototype.invalidate.call(this);
                    };

                    p.updateTo = function(vars, resetDuration) {
                        var curRatio = this.ratio,
                            immediate = this.vars.immediateRender || vars.immediateRender,
                            p;
                        if (resetDuration && this._startTime < this._timeline._time) {
                            this._startTime = this._timeline._time;
                            this._uncache(false);
                            if (this._gc) {
                                this._enabled(true, false);
                            } else {
                                this._timeline.insert(this, this._startTime - this._delay); //ensures that any necessary re-sequencing of Animations in the timeline occurs to make sure the rendering order is correct.
                            }
                        }
                        for (p in vars) {
                            this.vars[p] = vars[p];
                        }
                        if (this._initted || immediate) {
                            if (resetDuration) {
                                this._initted = false;
                                if (immediate) {
                                    this.render(0, true, true);
                                }
                            } else {
                                if (this._gc) {
                                    this._enabled(true, false);
                                }
                                if (this._notifyPluginsOfEnabled && this._firstPT) {
                                    TweenLite._onPluginEvent("_onDisable", this); //in case a plugin like MotionBlur must perform some cleanup tasks
                                }
                                if (this._time / this._duration > 0.998) { //if the tween has finished (or come extremely close to finishing), we just need to rewind it to 0 and then render it again at the end which forces it to re-initialize (parsing the new vars). We allow tweens that are close to finishing (but haven't quite finished) to work this way too because otherwise, the values are so small when determining where to project the starting values that binary math issues creep in and can make the tween appear to render incorrectly when run backwards. 
                                    var prevTime = this._totalTime;
                                    this.render(0, true, false);
                                    this._initted = false;
                                    this.render(prevTime, true, false);
                                } else {
                                    this._initted = false;
                                    this._init();
                                    if (this._time > 0 || immediate) {
                                        var inv = 1 / (1 - curRatio),
                                            pt = this._firstPT,
                                            endValue;
                                        while (pt) {
                                            endValue = pt.s + pt.c;
                                            pt.c *= inv;
                                            pt.s = endValue - pt.c;
                                            pt = pt._next;
                                        }
                                    }
                                }
                            }
                        }
                        return this;
                    };

                    p.render = function(time, suppressEvents, force) {
                        if (!this._initted)
                            if (this._duration === 0 && this.vars.repeat) { //zero duration tweens that render immediately have render() called from TweenLite's constructor, before TweenMax's constructor has finished setting _repeat, _repeatDelay, and _yoyo which are critical in determining totalDuration() so we need to call invalidate() which is a low-kb way to get those set properly.
                                this.invalidate();
                            }
                        var totalDur = (!this._dirty) ? this._totalDuration : this.totalDuration(),
                            prevTime = this._time,
                            prevTotalTime = this._totalTime,
                            prevCycle = this._cycle,
                            duration = this._duration,
                            prevRawPrevTime = this._rawPrevTime,
                            isComplete, callback, pt, cycleDuration, r, type, pow, rawPrevTime, yoyoEase;
                        if (time >= totalDur - 0.0000001 && time >= 0) { //to work around occasional floating point math artifacts.
                            this._totalTime = totalDur;
                            this._cycle = this._repeat;
                            if (this._yoyo && (this._cycle & 1) !== 0) {
                                this._time = 0;
                                this.ratio = this._ease._calcEnd ? this._ease.getRatio(0) : 0;
                            } else {
                                this._time = duration;
                                this.ratio = this._ease._calcEnd ? this._ease.getRatio(1) : 1;
                            }
                            if (!this._reversed) {
                                isComplete = true;
                                callback = "onComplete";
                                force = (force || this._timeline.autoRemoveChildren); //otherwise, if the animation is unpaused/activated after it's already finished, it doesn't get removed from the parent timeline.
                            }
                            if (duration === 0)
                                if (this._initted || !this.vars.lazy || force) { //zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the "playhead" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's "playhead" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.
                                    if (this._startTime === this._timeline._duration) { //if a zero-duration tween is at the VERY end of a timeline and that timeline renders at its end, it will typically add a tiny bit of cushion to the render time to prevent rounding errors from getting in the way of tweens rendering their VERY end. If we then reverse() that timeline, the zero-duration tween will trigger its onReverseComplete even though technically the playhead didn't pass over it again. It's a very specific edge case we must accommodate.
                                        time = 0;
                                    }
                                    if (prevRawPrevTime < 0 || (time <= 0 && time >= -0.0000001) || (prevRawPrevTime === _tinyNum && this.data !== "isPause"))
                                        if (prevRawPrevTime !== time) { //note: when this.data is "isPause", it's a callback added by addPause() on a timeline that we should not be triggered when LEAVING its exact start time. In other words, tl.addPause(1).play(1) shouldn't pause.
                                            force = true;
                                            if (prevRawPrevTime > _tinyNum) {
                                                callback = "onReverseComplete";
                                            }
                                        }
                                    this._rawPrevTime = rawPrevTime = (!suppressEvents || time || prevRawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
                                }

                        } else if (time < 0.0000001) { //to work around occasional floating point math artifacts, round super small values to 0.
                            this._totalTime = this._time = this._cycle = 0;
                            this.ratio = this._ease._calcEnd ? this._ease.getRatio(0) : 0;
                            if (prevTotalTime !== 0 || (duration === 0 && prevRawPrevTime > 0)) {
                                callback = "onReverseComplete";
                                isComplete = this._reversed;
                            }
                            if (time < 0) {
                                this._active = false;
                                if (duration === 0)
                                    if (this._initted || !this.vars.lazy || force) { //zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the "playhead" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's "playhead" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.
                                        if (prevRawPrevTime >= 0) {
                                            force = true;
                                        }
                                        this._rawPrevTime = rawPrevTime = (!suppressEvents || time || prevRawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
                                    }
                            }
                            if (!this._initted) { //if we render the very beginning (time == 0) of a fromTo(), we must force the render (normal tweens wouldn't need to render at a time of 0 when the prevTime was also 0). This is also mandatory to make sure overwriting kicks in immediately.
                                force = true;
                            }
                        } else {
                            this._totalTime = this._time = time;
                            if (this._repeat !== 0) {
                                cycleDuration = duration + this._repeatDelay;
                                this._cycle = (this._totalTime / cycleDuration) >> 0; //originally _totalTime % cycleDuration but floating point errors caused problems, so I normalized it. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)
                                if (this._cycle !== 0)
                                    if (this._cycle === this._totalTime / cycleDuration && prevTotalTime <= time) {
                                        this._cycle--; //otherwise when rendered exactly at the end time, it will act as though it is repeating (at the beginning)
                                    }
                                this._time = this._totalTime - (this._cycle * cycleDuration);
                                if (this._yoyo)
                                    if ((this._cycle & 1) !== 0) {
                                        this._time = duration - this._time;
                                        yoyoEase = this._yoyoEase || this.vars.yoyoEase; //note: we don't set this._yoyoEase in _init() like we do other properties because it's TweenMax-specific and doing it here allows us to optimize performance (most tweens don't have a yoyoEase). Note that we also must skip the this.ratio calculation further down right after we _init() in this function, because we're doing it here.
                                        if (yoyoEase) {
                                            if (!this._yoyoEase) {
                                                if (yoyoEase === true && !this._initted) { //if it's not initted and yoyoEase is true, this._ease won't have been populated yet so we must discern it here.
                                                    yoyoEase = this.vars.ease;
                                                    this._yoyoEase = yoyoEase = !yoyoEase ? TweenLite.defaultEase : (yoyoEase instanceof Ease) ? yoyoEase : (typeof(yoyoEase) === "function") ? new Ease(yoyoEase, this.vars.easeParams) : Ease.map[yoyoEase] || TweenLite.defaultEase;
                                                } else {
                                                    this._yoyoEase = yoyoEase = (yoyoEase === true) ? this._ease : (yoyoEase instanceof Ease) ? yoyoEase : Ease.map[yoyoEase];
                                                }
                                            }
                                            this.ratio = yoyoEase ? 1 - yoyoEase.getRatio((duration - this._time) / duration) : 0;
                                        }
                                    }
                                if (this._time > duration) {
                                    this._time = duration;
                                } else if (this._time < 0) {
                                    this._time = 0;
                                }
                            }

                            if (this._easeType && !yoyoEase) {
                                r = this._time / duration;
                                type = this._easeType;
                                pow = this._easePower;
                                if (type === 1 || (type === 3 && r >= 0.5)) {
                                    r = 1 - r;
                                }
                                if (type === 3) {
                                    r *= 2;
                                }
                                if (pow === 1) {
                                    r *= r;
                                } else if (pow === 2) {
                                    r *= r * r;
                                } else if (pow === 3) {
                                    r *= r * r * r;
                                } else if (pow === 4) {
                                    r *= r * r * r * r;
                                }

                                if (type === 1) {
                                    this.ratio = 1 - r;
                                } else if (type === 2) {
                                    this.ratio = r;
                                } else if (this._time / duration < 0.5) {
                                    this.ratio = r / 2;
                                } else {
                                    this.ratio = 1 - (r / 2);
                                }

                            } else if (!yoyoEase) {
                                this.ratio = this._ease.getRatio(this._time / duration);
                            }

                        }

                        if (prevTime === this._time && !force && prevCycle === this._cycle) {
                            if (prevTotalTime !== this._totalTime)
                                if (this._onUpdate)
                                    if (!suppressEvents) { //so that onUpdate fires even during the repeatDelay - as long as the totalTime changed, we should trigger onUpdate.
                                        this._callback("onUpdate");
                                    }
                            return;
                        } else if (!this._initted) {
                            this._init();
                            if (!this._initted || this._gc) { //immediateRender tweens typically won't initialize until the playhead advances (_time is greater than 0) in order to ensure that overwriting occurs properly. Also, if all of the tweening properties have been overwritten (which would cause _gc to be true, as set in _init()), we shouldn't continue otherwise an onStart callback could be called for example.
                                return;
                            } else if (!force && this._firstPT && ((this.vars.lazy !== false && this._duration) || (this.vars.lazy && !this._duration))) { //we stick it in the queue for rendering at the very end of the tick - this is a performance optimization because browsers invalidate styles and force a recalculation if you read, write, and then read style data (so it's better to read/read/read/write/write/write than read/write/read/write/read/write). The down side, of course, is that usually you WANT things to render immediately because you may have code running right after that which depends on the change. Like imagine running TweenLite.set(...) and then immediately after that, creating a nother tween that animates the same property to another value; the starting values of that 2nd tween wouldn't be accurate if lazy is true.
                                this._time = prevTime;
                                this._totalTime = prevTotalTime;
                                this._rawPrevTime = prevRawPrevTime;
                                this._cycle = prevCycle;
                                TweenLiteInternals.lazyTweens.push(this);
                                this._lazy = [time, suppressEvents];
                                return;
                            }
                            //_ease is initially set to defaultEase, so now that init() has run, _ease is set properly and we need to recalculate the ratio. Overall this is faster than using conditional logic earlier in the method to avoid having to set ratio twice because we only init() once but renderTime() gets called VERY frequently.
                            if (this._time && !isComplete && !yoyoEase) {
                                this.ratio = this._ease.getRatio(this._time / duration);
                            } else if (isComplete && this._ease._calcEnd && !yoyoEase) {
                                this.ratio = this._ease.getRatio((this._time === 0) ? 0 : 1);
                            }
                        }
                        if (this._lazy !== false) {
                            this._lazy = false;
                        }

                        if (!this._active)
                            if (!this._paused && this._time !== prevTime && time >= 0) {
                                this._active = true; //so that if the user renders a tween (as opposed to the timeline rendering it), the timeline is forced to re-render and align it with the proper time/frame on the next rendering cycle. Maybe the tween already finished but the user manually re-renders it as halfway done.
                            }
                        if (prevTotalTime === 0) {
                            if (this._initted === 2 && time > 0) {
                                //this.invalidate();
                                this._init(); //will just apply overwriting since _initted of (2) means it was a from() tween that had immediateRender:true
                            }
                            if (this._startAt) {
                                if (time >= 0) {
                                    this._startAt.render(time, suppressEvents, force);
                                } else if (!callback) {
                                    callback = "_dummyGS"; //if no callback is defined, use a dummy value just so that the condition at the end evaluates as true because _startAt should render AFTER the normal render loop when the time is negative. We could handle this in a more intuitive way, of course, but the render loop is the MOST important thing to optimize, so this technique allows us to avoid adding extra conditional logic in a high-frequency area.
                                }
                            }
                            if (this.vars.onStart)
                                if (this._totalTime !== 0 || duration === 0)
                                    if (!suppressEvents) {
                                        this._callback("onStart");
                                    }
                        }

                        pt = this._firstPT;
                        while (pt) {
                            if (pt.f) {
                                pt.t[pt.p](pt.c * this.ratio + pt.s);
                            } else {
                                pt.t[pt.p] = pt.c * this.ratio + pt.s;
                            }
                            pt = pt._next;
                        }

                        if (this._onUpdate) {
                            if (time < 0)
                                if (this._startAt && this._startTime) { //if the tween is positioned at the VERY beginning (_startTime 0) of its parent timeline, it's illegal for the playhead to go back further, so we should not render the recorded startAt values.
                                    this._startAt.render(time, suppressEvents, force); //note: for performance reasons, we tuck this conditional logic inside less traveled areas (most tweens don't have an onUpdate). We'd just have it at the end before the onComplete, but the values should be updated before any onUpdate is called, so we ALSO put it here and then if it's not called, we do so later near the onComplete.
                                }
                            if (!suppressEvents)
                                if (this._totalTime !== prevTotalTime || callback) {
                                    this._callback("onUpdate");
                                }
                        }
                        if (this._cycle !== prevCycle)
                            if (!suppressEvents)
                                if (!this._gc)
                                    if (this.vars.onRepeat) {
                                        this._callback("onRepeat");
                                    }
                        if (callback)
                            if (!this._gc || force) { //check gc because there's a chance that kill() could be called in an onUpdate
                                if (time < 0 && this._startAt && !this._onUpdate && this._startTime) { //if the tween is positioned at the VERY beginning (_startTime 0) of its parent timeline, it's illegal for the playhead to go back further, so we should not render the recorded startAt values.
                                    this._startAt.render(time, suppressEvents, force);
                                }
                                if (isComplete) {
                                    if (this._timeline.autoRemoveChildren) {
                                        this._enabled(false, false);
                                    }
                                    this._active = false;
                                }
                                if (!suppressEvents && this.vars[callback]) {
                                    this._callback(callback);
                                }
                                if (duration === 0 && this._rawPrevTime === _tinyNum && rawPrevTime !== _tinyNum) { //the onComplete or onReverseComplete could trigger movement of the playhead and for zero-duration tweens (which must discern direction) that land directly back on their start time, we don't want to fire again on the next render. Think of several addPause()'s in a timeline that forces the playhead to a certain spot, but what if it's already paused and another tween is tweening the "time" of the timeline? Each time it moves [forward] past that spot, it would move back, and since suppressEvents is true, it'd reset _rawPrevTime to _tinyNum so that when it begins again, the callback would fire (so ultimately it could bounce back and forth during that tween). Again, this is a very uncommon scenario, but possible nonetheless.
                                    this._rawPrevTime = 0;
                                }
                            }
                    };

                    //---- STATIC FUNCTIONS -----------------------------------------------------------------------------------------------------------

                    TweenMax.to = function(target, duration, vars) {
                        return new TweenMax(target, duration, vars);
                    };

                    TweenMax.from = function(target, duration, vars) {
                        vars.runBackwards = true;
                        vars.immediateRender = (vars.immediateRender != false);
                        return new TweenMax(target, duration, vars);
                    };

                    TweenMax.fromTo = function(target, duration, fromVars, toVars) {
                        toVars.startAt = fromVars;
                        toVars.immediateRender = (toVars.immediateRender != false && fromVars.immediateRender != false);
                        return new TweenMax(target, duration, toVars);
                    };

                    TweenMax.staggerTo = TweenMax.allTo = function(targets, duration, vars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
                        stagger = stagger || 0;
                        var delay = 0,
                            a = [],
                            finalComplete = function() {
                                if (vars.onComplete) {
                                    vars.onComplete.apply(vars.onCompleteScope || this, arguments);
                                }
                                onCompleteAll.apply(onCompleteAllScope || vars.callbackScope || this, onCompleteAllParams || _blankArray);
                            },
                            cycle = vars.cycle,
                            fromCycle = (vars.startAt && vars.startAt.cycle),
                            l, copy, i, p;
                        if (!_isArray(targets)) {
                            if (typeof(targets) === "string") {
                                targets = TweenLite.selector(targets) || targets;
                            }
                            if (_isSelector(targets)) {
                                targets = _slice(targets);
                            }
                        }
                        targets = targets || [];
                        if (stagger < 0) {
                            targets = _slice(targets);
                            targets.reverse();
                            stagger *= -1;
                        }
                        l = targets.length - 1;
                        for (i = 0; i <= l; i++) {
                            copy = {};
                            for (p in vars) {
                                copy[p] = vars[p];
                            }
                            if (cycle) {
                                _applyCycle(copy, targets, i);
                                if (copy.duration != null) {
                                    duration = copy.duration;
                                    delete copy.duration;
                                }
                            }
                            if (fromCycle) {
                                fromCycle = copy.startAt = {};
                                for (p in vars.startAt) {
                                    fromCycle[p] = vars.startAt[p];
                                }
                                _applyCycle(copy.startAt, targets, i);
                            }
                            copy.delay = delay + (copy.delay || 0);
                            if (i === l && onCompleteAll) {
                                copy.onComplete = finalComplete;
                            }
                            a[i] = new TweenMax(targets[i], duration, copy);
                            delay += stagger;
                        }
                        return a;
                    };

                    TweenMax.staggerFrom = TweenMax.allFrom = function(targets, duration, vars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
                        vars.runBackwards = true;
                        vars.immediateRender = (vars.immediateRender != false);
                        return TweenMax.staggerTo(targets, duration, vars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope);
                    };

                    TweenMax.staggerFromTo = TweenMax.allFromTo = function(targets, duration, fromVars, toVars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
                        toVars.startAt = fromVars;
                        toVars.immediateRender = (toVars.immediateRender != false && fromVars.immediateRender != false);
                        return TweenMax.staggerTo(targets, duration, toVars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope);
                    };

                    TweenMax.delayedCall = function(delay, callback, params, scope, useFrames) {
                        return new TweenMax(callback, 0, { delay: delay, onComplete: callback, onCompleteParams: params, callbackScope: scope, onReverseComplete: callback, onReverseCompleteParams: params, immediateRender: false, useFrames: useFrames, overwrite: 0 });
                    };

                    TweenMax.set = function(target, vars) {
                        return new TweenMax(target, 0, vars);
                    };

                    TweenMax.isTweening = function(target) {
                        return (TweenLite.getTweensOf(target, true).length > 0);
                    };

                    var _getChildrenOf = function(timeline, includeTimelines) {
                            var a = [],
                                cnt = 0,
                                tween = timeline._first;
                            while (tween) {
                                if (tween instanceof TweenLite) {
                                    a[cnt++] = tween;
                                } else {
                                    if (includeTimelines) {
                                        a[cnt++] = tween;
                                    }
                                    a = a.concat(_getChildrenOf(tween, includeTimelines));
                                    cnt = a.length;
                                }
                                tween = tween._next;
                            }
                            return a;
                        },
                        getAllTweens = TweenMax.getAllTweens = function(includeTimelines) {
                            return _getChildrenOf(Animation._rootTimeline, includeTimelines).concat(_getChildrenOf(Animation._rootFramesTimeline, includeTimelines));
                        };

                    TweenMax.killAll = function(complete, tweens, delayedCalls, timelines) {
                        if (tweens == null) {
                            tweens = true;
                        }
                        if (delayedCalls == null) {
                            delayedCalls = true;
                        }
                        var a = getAllTweens((timelines != false)),
                            l = a.length,
                            allTrue = (tweens && delayedCalls && timelines),
                            isDC, tween, i;
                        for (i = 0; i < l; i++) {
                            tween = a[i];
                            if (allTrue || (tween instanceof SimpleTimeline) || ((isDC = (tween.target === tween.vars.onComplete)) && delayedCalls) || (tweens && !isDC)) {
                                if (complete) {
                                    tween.totalTime(tween._reversed ? 0 : tween.totalDuration());
                                } else {
                                    tween._enabled(false, false);
                                }
                            }
                        }
                    };

                    TweenMax.killChildTweensOf = function(parent, complete) {
                        if (parent == null) {
                            return;
                        }
                        var tl = TweenLiteInternals.tweenLookup,
                            a, curParent, p, i, l;
                        if (typeof(parent) === "string") {
                            parent = TweenLite.selector(parent) || parent;
                        }
                        if (_isSelector(parent)) {
                            parent = _slice(parent);
                        }
                        if (_isArray(parent)) {
                            i = parent.length;
                            while (--i > -1) {
                                TweenMax.killChildTweensOf(parent[i], complete);
                            }
                            return;
                        }
                        a = [];
                        for (p in tl) {
                            curParent = tl[p].target.parentNode;
                            while (curParent) {
                                if (curParent === parent) {
                                    a = a.concat(tl[p].tweens);
                                }
                                curParent = curParent.parentNode;
                            }
                        }
                        l = a.length;
                        for (i = 0; i < l; i++) {
                            if (complete) {
                                a[i].totalTime(a[i].totalDuration());
                            }
                            a[i]._enabled(false, false);
                        }
                    };

                    var _changePause = function(pause, tweens, delayedCalls, timelines) {
                        tweens = (tweens !== false);
                        delayedCalls = (delayedCalls !== false);
                        timelines = (timelines !== false);
                        var a = getAllTweens(timelines),
                            allTrue = (tweens && delayedCalls && timelines),
                            i = a.length,
                            isDC, tween;
                        while (--i > -1) {
                            tween = a[i];
                            if (allTrue || (tween instanceof SimpleTimeline) || ((isDC = (tween.target === tween.vars.onComplete)) && delayedCalls) || (tweens && !isDC)) {
                                tween.paused(pause);
                            }
                        }
                    };

                    TweenMax.pauseAll = function(tweens, delayedCalls, timelines) {
                        _changePause(true, tweens, delayedCalls, timelines);
                    };

                    TweenMax.resumeAll = function(tweens, delayedCalls, timelines) {
                        _changePause(false, tweens, delayedCalls, timelines);
                    };

                    TweenMax.globalTimeScale = function(value) {
                        var tl = Animation._rootTimeline,
                            t = TweenLite.ticker.time;
                        if (!arguments.length) {
                            return tl._timeScale;
                        }
                        value = value || _tinyNum; //can't allow zero because it'll throw the math off
                        tl._startTime = t - ((t - tl._startTime) * tl._timeScale / value);
                        tl = Animation._rootFramesTimeline;
                        t = TweenLite.ticker.frame;
                        tl._startTime = t - ((t - tl._startTime) * tl._timeScale / value);
                        tl._timeScale = Animation._rootTimeline._timeScale = value;
                        return value;
                    };


                    //---- GETTERS / SETTERS ----------------------------------------------------------------------------------------------------------

                    p.progress = function(value, suppressEvents) {
                        return (!arguments.length) ? this._time / this.duration() : this.totalTime(this.duration() * ((this._yoyo && (this._cycle & 1) !== 0) ? 1 - value : value) + (this._cycle * (this._duration + this._repeatDelay)), suppressEvents);
                    };

                    p.totalProgress = function(value, suppressEvents) {
                        return (!arguments.length) ? this._totalTime / this.totalDuration() : this.totalTime(this.totalDuration() * value, suppressEvents);
                    };

                    p.time = function(value, suppressEvents) {
                        if (!arguments.length) {
                            return this._time;
                        }
                        if (this._dirty) {
                            this.totalDuration();
                        }
                        if (value > this._duration) {
                            value = this._duration;
                        }
                        if (this._yoyo && (this._cycle & 1) !== 0) {
                            value = (this._duration - value) + (this._cycle * (this._duration + this._repeatDelay));
                        } else if (this._repeat !== 0) {
                            value += this._cycle * (this._duration + this._repeatDelay);
                        }
                        return this.totalTime(value, suppressEvents);
                    };

                    p.duration = function(value) {
                        if (!arguments.length) {
                            return this._duration; //don't set _dirty = false because there could be repeats that haven't been factored into the _totalDuration yet. Otherwise, if you create a repeated TweenMax and then immediately check its duration(), it would cache the value and the totalDuration would not be correct, thus repeats wouldn't take effect.
                        }
                        return Animation.prototype.duration.call(this, value);
                    };

                    p.totalDuration = function(value) {
                        if (!arguments.length) {
                            if (this._dirty) {
                                //instead of Infinity, we use 999999999999 so that we can accommodate reverses
                                this._totalDuration = (this._repeat === -1) ? 999999999999 : this._duration * (this._repeat + 1) + (this._repeatDelay * this._repeat);
                                this._dirty = false;
                            }
                            return this._totalDuration;
                        }
                        return (this._repeat === -1) ? this : this.duration((value - (this._repeat * this._repeatDelay)) / (this._repeat + 1));
                    };

                    p.repeat = function(value) {
                        if (!arguments.length) {
                            return this._repeat;
                        }
                        this._repeat = value;
                        return this._uncache(true);
                    };

                    p.repeatDelay = function(value) {
                        if (!arguments.length) {
                            return this._repeatDelay;
                        }
                        this._repeatDelay = value;
                        return this._uncache(true);
                    };

                    p.yoyo = function(value) {
                        if (!arguments.length) {
                            return this._yoyo;
                        }
                        this._yoyo = value;
                        return this;
                    };


                    return TweenMax;

                }, true);








                /*
                 * ----------------------------------------------------------------
                 * TimelineLite
                 * ----------------------------------------------------------------
                 */
                _gsScope._gsDefine("TimelineLite", ["core.Animation", "core.SimpleTimeline", "TweenLite"], function(Animation, SimpleTimeline, TweenLite) {

                    var TimelineLite = function(vars) {
                            SimpleTimeline.call(this, vars);
                            this._labels = {};
                            this.autoRemoveChildren = (this.vars.autoRemoveChildren === true);
                            this.smoothChildTiming = (this.vars.smoothChildTiming === true);
                            this._sortChildren = true;
                            this._onUpdate = this.vars.onUpdate;
                            var v = this.vars,
                                val, p;
                            for (p in v) {
                                val = v[p];
                                if (_isArray(val))
                                    if (val.join("").indexOf("{self}") !== -1) {
                                        v[p] = this._swapSelfInParams(val);
                                    }
                            }
                            if (_isArray(v.tweens)) {
                                this.add(v.tweens, 0, v.align, v.stagger);
                            }
                        },
                        _tinyNum = 0.0000000001,
                        TweenLiteInternals = TweenLite._internals,
                        _internals = TimelineLite._internals = {},
                        _isSelector = TweenLiteInternals.isSelector,
                        _isArray = TweenLiteInternals.isArray,
                        _lazyTweens = TweenLiteInternals.lazyTweens,
                        _lazyRender = TweenLiteInternals.lazyRender,
                        _globals = _gsScope._gsDefine.globals,
                        _copy = function(vars) {
                            var copy = {},
                                p;
                            for (p in vars) {
                                copy[p] = vars[p];
                            }
                            return copy;
                        },
                        _applyCycle = function(vars, targets, i) {
                            var alt = vars.cycle,
                                p, val;
                            for (p in alt) {
                                val = alt[p];
                                vars[p] = (typeof(val) === "function") ? val(i, targets[i]) : val[i % val.length];
                            }
                            delete vars.cycle;
                        },
                        _pauseCallback = _internals.pauseCallback = function() {},
                        _slice = function(a) { //don't use [].slice because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()
                            var b = [],
                                l = a.length,
                                i;
                            for (i = 0; i !== l; b.push(a[i++]));
                            return b;
                        },
                        p = TimelineLite.prototype = new SimpleTimeline();

                    TimelineLite.version = "1.20.2";
                    p.constructor = TimelineLite;
                    p.kill()._gc = p._forcingPlayhead = p._hasPause = false;

                    /* might use later...
			//translates a local time inside an animation to the corresponding time on the root/global timeline, factoring in all nesting and timeScales.
			function localToGlobal(time, animation) {
				while (animation) {
					time = (time / animation._timeScale) + animation._startTime;
					animation = animation.timeline;
				}
				return time;
			}
	
			//translates the supplied time on the root/global timeline into the corresponding local time inside a particular animation, factoring in all nesting and timeScales
			function globalToLocal(time, animation) {
				var scale = 1;
				time -= localToGlobal(0, animation);
				while (animation) {
					scale *= animation._timeScale;
					animation = animation.timeline;
				}
				return time * scale;
			}
			*/

                    p.to = function(target, duration, vars, position) {
                        var Engine = (vars.repeat && _globals.TweenMax) || TweenLite;
                        return duration ? this.add(new Engine(target, duration, vars), position) : this.set(target, vars, position);
                    };

                    p.from = function(target, duration, vars, position) {
                        return this.add(((vars.repeat && _globals.TweenMax) || TweenLite).from(target, duration, vars), position);
                    };

                    p.fromTo = function(target, duration, fromVars, toVars, position) {
                        var Engine = (toVars.repeat && _globals.TweenMax) || TweenLite;
                        return duration ? this.add(Engine.fromTo(target, duration, fromVars, toVars), position) : this.set(target, toVars, position);
                    };

                    p.staggerTo = function(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
                        var tl = new TimelineLite({ onComplete: onCompleteAll, onCompleteParams: onCompleteAllParams, callbackScope: onCompleteAllScope, smoothChildTiming: this.smoothChildTiming }),
                            cycle = vars.cycle,
                            copy, i;
                        if (typeof(targets) === "string") {
                            targets = TweenLite.selector(targets) || targets;
                        }
                        targets = targets || [];
                        if (_isSelector(targets)) { //senses if the targets object is a selector. If it is, we should translate it into an array.
                            targets = _slice(targets);
                        }
                        stagger = stagger || 0;
                        if (stagger < 0) {
                            targets = _slice(targets);
                            targets.reverse();
                            stagger *= -1;
                        }
                        for (i = 0; i < targets.length; i++) {
                            copy = _copy(vars);
                            if (copy.startAt) {
                                copy.startAt = _copy(copy.startAt);
                                if (copy.startAt.cycle) {
                                    _applyCycle(copy.startAt, targets, i);
                                }
                            }
                            if (cycle) {
                                _applyCycle(copy, targets, i);
                                if (copy.duration != null) {
                                    duration = copy.duration;
                                    delete copy.duration;
                                }
                            }
                            tl.to(targets[i], duration, copy, i * stagger);
                        }
                        return this.add(tl, position);
                    };

                    p.staggerFrom = function(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
                        vars.immediateRender = (vars.immediateRender != false);
                        vars.runBackwards = true;
                        return this.staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope);
                    };

                    p.staggerFromTo = function(targets, duration, fromVars, toVars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
                        toVars.startAt = fromVars;
                        toVars.immediateRender = (toVars.immediateRender != false && fromVars.immediateRender != false);
                        return this.staggerTo(targets, duration, toVars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope);
                    };

                    p.call = function(callback, params, scope, position) {
                        return this.add(TweenLite.delayedCall(0, callback, params, scope), position);
                    };

                    p.set = function(target, vars, position) {
                        position = this._parseTimeOrLabel(position, 0, true);
                        if (vars.immediateRender == null) {
                            vars.immediateRender = (position === this._time && !this._paused);
                        }
                        return this.add(new TweenLite(target, 0, vars), position);
                    };

                    TimelineLite.exportRoot = function(vars, ignoreDelayedCalls) {
                        vars = vars || {};
                        if (vars.smoothChildTiming == null) {
                            vars.smoothChildTiming = true;
                        }
                        var tl = new TimelineLite(vars),
                            root = tl._timeline,
                            tween, next;
                        if (ignoreDelayedCalls == null) {
                            ignoreDelayedCalls = true;
                        }
                        root._remove(tl, true);
                        tl._startTime = 0;
                        tl._rawPrevTime = tl._time = tl._totalTime = root._time;
                        tween = root._first;
                        while (tween) {
                            next = tween._next;
                            if (!ignoreDelayedCalls || !(tween instanceof TweenLite && tween.target === tween.vars.onComplete)) {
                                tl.add(tween, tween._startTime - tween._delay);
                            }
                            tween = next;
                        }
                        root.add(tl, 0);
                        return tl;
                    };

                    p.add = function(value, position, align, stagger) {
                        var curTime, l, i, child, tl, beforeRawTime;
                        if (typeof(position) !== "number") {
                            position = this._parseTimeOrLabel(position, 0, true, value);
                        }
                        if (!(value instanceof Animation)) {
                            if ((value instanceof Array) || (value && value.push && _isArray(value))) {
                                align = align || "normal";
                                stagger = stagger || 0;
                                curTime = position;
                                l = value.length;
                                for (i = 0; i < l; i++) {
                                    if (_isArray(child = value[i])) {
                                        child = new TimelineLite({ tweens: child });
                                    }
                                    this.add(child, curTime);
                                    if (typeof(child) !== "string" && typeof(child) !== "function") {
                                        if (align === "sequence") {
                                            curTime = child._startTime + (child.totalDuration() / child._timeScale);
                                        } else if (align === "start") {
                                            child._startTime -= child.delay();
                                        }
                                    }
                                    curTime += stagger;
                                }
                                return this._uncache(true);
                            } else if (typeof(value) === "string") {
                                return this.addLabel(value, position);
                            } else if (typeof(value) === "function") {
                                value = TweenLite.delayedCall(0, value);
                            } else {
                                throw ("Cannot add " + value + " into the timeline; it is not a tween, timeline, function, or string.");
                            }
                        }

                        SimpleTimeline.prototype.add.call(this, value, position);

                        if (value._time) { //in case, for example, the _startTime is moved on a tween that has already rendered. Imagine it's at its end state, then the startTime is moved WAY later (after the end of this timeline), it should render at its beginning.
                            value.render((this.rawTime() - value._startTime) * value._timeScale, false, false);
                        }

                        //if the timeline has already ended but the inserted tween/timeline extends the duration, we should enable this timeline again so that it renders properly. We should also align the playhead with the parent timeline's when appropriate.
                        if (this._gc || this._time === this._duration)
                            if (!this._paused)
                                if (this._duration < this.duration()) {
                                    //in case any of the ancestors had completed but should now be enabled...
                                    tl = this;
                                    beforeRawTime = (tl.rawTime() > value._startTime); //if the tween is placed on the timeline so that it starts BEFORE the current rawTime, we should align the playhead (move the timeline). This is because sometimes users will create a timeline, let it finish, and much later append a tween and expect it to run instead of jumping to its end state. While technically one could argue that it should jump to its end state, that's not what users intuitively expect.
                                    while (tl._timeline) {
                                        if (beforeRawTime && tl._timeline.smoothChildTiming) {
                                            tl.totalTime(tl._totalTime, true); //moves the timeline (shifts its startTime) if necessary, and also enables it.
                                        } else if (tl._gc) {
                                            tl._enabled(true, false);
                                        }
                                        tl = tl._timeline;
                                    }
                                }

                        return this;
                    };

                    p.remove = function(value) {
                        if (value instanceof Animation) {
                            this._remove(value, false);
                            var tl = value._timeline = value.vars.useFrames ? Animation._rootFramesTimeline : Animation._rootTimeline; //now that it's removed, default it to the root timeline so that if it gets played again, it doesn't jump back into this timeline.
                            value._startTime = (value._paused ? value._pauseTime : tl._time) - ((!value._reversed ? value._totalTime : value.totalDuration() - value._totalTime) / value._timeScale); //ensure that if it gets played again, the timing is correct.
                            return this;
                        } else if (value instanceof Array || (value && value.push && _isArray(value))) {
                            var i = value.length;
                            while (--i > -1) {
                                this.remove(value[i]);
                            }
                            return this;
                        } else if (typeof(value) === "string") {
                            return this.removeLabel(value);
                        }
                        return this.kill(null, value);
                    };

                    p._remove = function(tween, skipDisable) {
                        SimpleTimeline.prototype._remove.call(this, tween, skipDisable);
                        var last = this._last;
                        if (!last) {
                            this._time = this._totalTime = this._duration = this._totalDuration = 0;
                        } else if (this._time > this.duration()) {
                            this._time = this._duration;
                            this._totalTime = this._totalDuration;
                        }
                        return this;
                    };

                    p.append = function(value, offsetOrLabel) {
                        return this.add(value, this._parseTimeOrLabel(null, offsetOrLabel, true, value));
                    };

                    p.insert = p.insertMultiple = function(value, position, align, stagger) {
                        return this.add(value, position || 0, align, stagger);
                    };

                    p.appendMultiple = function(tweens, offsetOrLabel, align, stagger) {
                        return this.add(tweens, this._parseTimeOrLabel(null, offsetOrLabel, true, tweens), align, stagger);
                    };

                    p.addLabel = function(label, position) {
                        this._labels[label] = this._parseTimeOrLabel(position);
                        return this;
                    };

                    p.addPause = function(position, callback, params, scope) {
                        var t = TweenLite.delayedCall(0, _pauseCallback, params, scope || this);
                        t.vars.onComplete = t.vars.onReverseComplete = callback;
                        t.data = "isPause";
                        this._hasPause = true;
                        return this.add(t, position);
                    };

                    p.removeLabel = function(label) {
                        delete this._labels[label];
                        return this;
                    };

                    p.getLabelTime = function(label) {
                        return (this._labels[label] != null) ? this._labels[label] : -1;
                    };

                    p._parseTimeOrLabel = function(timeOrLabel, offsetOrLabel, appendIfAbsent, ignore) {
                        var clippedDuration, i;
                        //if we're about to add a tween/timeline (or an array of them) that's already a child of this timeline, we should remove it first so that it doesn't contaminate the duration().
                        if (ignore instanceof Animation && ignore.timeline === this) {
                            this.remove(ignore);
                        } else if (ignore && ((ignore instanceof Array) || (ignore.push && _isArray(ignore)))) {
                            i = ignore.length;
                            while (--i > -1) {
                                if (ignore[i] instanceof Animation && ignore[i].timeline === this) {
                                    this.remove(ignore[i]);
                                }
                            }
                        }
                        clippedDuration = (this.duration() > 99999999999) ? this.recent().endTime(false) : this._duration; //in case there's a child that infinitely repeats, users almost never intend for the insertion point of a new child to be based on a SUPER long value like that so we clip it and assume the most recently-added child's endTime should be used instead.
                        if (typeof(offsetOrLabel) === "string") {
                            return this._parseTimeOrLabel(offsetOrLabel, (appendIfAbsent && typeof(timeOrLabel) === "number" && this._labels[offsetOrLabel] == null) ? timeOrLabel - clippedDuration : 0, appendIfAbsent);
                        }
                        offsetOrLabel = offsetOrLabel || 0;
                        if (typeof(timeOrLabel) === "string" && (isNaN(timeOrLabel) || this._labels[timeOrLabel] != null)) { //if the string is a number like "1", check to see if there's a label with that name, otherwise interpret it as a number (absolute value).
                            i = timeOrLabel.indexOf("=");
                            if (i === -1) {
                                if (this._labels[timeOrLabel] == null) {
                                    return appendIfAbsent ? (this._labels[timeOrLabel] = clippedDuration + offsetOrLabel) : offsetOrLabel;
                                }
                                return this._labels[timeOrLabel] + offsetOrLabel;
                            }
                            offsetOrLabel = parseInt(timeOrLabel.charAt(i - 1) + "1", 10) * Number(timeOrLabel.substr(i + 1));
                            timeOrLabel = (i > 1) ? this._parseTimeOrLabel(timeOrLabel.substr(0, i - 1), 0, appendIfAbsent) : clippedDuration;
                        } else if (timeOrLabel == null) {
                            timeOrLabel = clippedDuration;
                        }
                        return Number(timeOrLabel) + offsetOrLabel;
                    };

                    p.seek = function(position, suppressEvents) {
                        return this.totalTime((typeof(position) === "number") ? position : this._parseTimeOrLabel(position), (suppressEvents !== false));
                    };

                    p.stop = function() {
                        return this.paused(true);
                    };

                    p.gotoAndPlay = function(position, suppressEvents) {
                        return this.play(position, suppressEvents);
                    };

                    p.gotoAndStop = function(position, suppressEvents) {
                        return this.pause(position, suppressEvents);
                    };

                    p.render = function(time, suppressEvents, force) {
                        if (this._gc) {
                            this._enabled(true, false);
                        }
                        var totalDur = (!this._dirty) ? this._totalDuration : this.totalDuration(),
                            prevTime = this._time,
                            prevStart = this._startTime,
                            prevTimeScale = this._timeScale,
                            prevPaused = this._paused,
                            tween, isComplete, next, callback, internalForce, pauseTween, curTime;
                        if (time >= totalDur - 0.0000001 && time >= 0) { //to work around occasional floating point math artifacts.
                            this._totalTime = this._time = totalDur;
                            if (!this._reversed)
                                if (!this._hasPausedChild()) {
                                    isComplete = true;
                                    callback = "onComplete";
                                    internalForce = !!this._timeline.autoRemoveChildren; //otherwise, if the animation is unpaused/activated after it's already finished, it doesn't get removed from the parent timeline.
                                    if (this._duration === 0)
                                        if ((time <= 0 && time >= -0.0000001) || this._rawPrevTime < 0 || this._rawPrevTime === _tinyNum)
                                            if (this._rawPrevTime !== time && this._first) {
                                                internalForce = true;
                                                if (this._rawPrevTime > _tinyNum) {
                                                    callback = "onReverseComplete";
                                                }
                                            }
                                }
                            this._rawPrevTime = (this._duration || !suppressEvents || time || this._rawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline or tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
                            time = totalDur + 0.0001; //to avoid occasional floating point rounding errors - sometimes child tweens/timelines were not being fully completed (their progress might be 0.999999999999998 instead of 1 because when _time - tween._startTime is performed, floating point errors would return a value that was SLIGHTLY off). Try (999999999999.7 - 999999999999) * 1 = 0.699951171875 instead of 0.7.

                        } else if (time < 0.0000001) { //to work around occasional floating point math artifacts, round super small values to 0.
                            this._totalTime = this._time = 0;
                            if (prevTime !== 0 || (this._duration === 0 && this._rawPrevTime !== _tinyNum && (this._rawPrevTime > 0 || (time < 0 && this._rawPrevTime >= 0)))) {
                                callback = "onReverseComplete";
                                isComplete = this._reversed;
                            }
                            if (time < 0) {
                                this._active = false;
                                if (this._timeline.autoRemoveChildren && this._reversed) { //ensures proper GC if a timeline is resumed after it's finished reversing.
                                    internalForce = isComplete = true;
                                    callback = "onReverseComplete";
                                } else if (this._rawPrevTime >= 0 && this._first) { //when going back beyond the start, force a render so that zero-duration tweens that sit at the very beginning render their start values properly. Otherwise, if the parent timeline's playhead lands exactly at this timeline's startTime, and then moves backwards, the zero-duration tweens at the beginning would still be at their end state.
                                    internalForce = true;
                                }
                                this._rawPrevTime = time;
                            } else {
                                this._rawPrevTime = (this._duration || !suppressEvents || time || this._rawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline or tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
                                if (time === 0 && isComplete) { //if there's a zero-duration tween at the very beginning of a timeline and the playhead lands EXACTLY at time 0, that tween will correctly render its end values, but we need to keep the timeline alive for one more render so that the beginning values render properly as the parent's playhead keeps moving beyond the begining. Imagine obj.x starts at 0 and then we do tl.set(obj, {x:100}).to(obj, 1, {x:200}) and then later we tl.reverse()...the goal is to have obj.x revert to 0. If the playhead happens to land on exactly 0, without this chunk of code, it'd complete the timeline and remove it from the rendering queue (not good).
                                    tween = this._first;
                                    while (tween && tween._startTime === 0) {
                                        if (!tween._duration) {
                                            isComplete = false;
                                        }
                                        tween = tween._next;
                                    }
                                }
                                time = 0; //to avoid occasional floating point rounding errors (could cause problems especially with zero-duration tweens at the very beginning of the timeline)
                                if (!this._initted) {
                                    internalForce = true;
                                }
                            }

                        } else {

                            if (this._hasPause && !this._forcingPlayhead && !suppressEvents) {
                                if (time >= prevTime) {
                                    tween = this._first;
                                    while (tween && tween._startTime <= time && !pauseTween) {
                                        if (!tween._duration)
                                            if (tween.data === "isPause" && !tween.ratio && !(tween._startTime === 0 && this._rawPrevTime === 0)) {
                                                pauseTween = tween;
                                            }
                                        tween = tween._next;
                                    }
                                } else {
                                    tween = this._last;
                                    while (tween && tween._startTime >= time && !pauseTween) {
                                        if (!tween._duration)
                                            if (tween.data === "isPause" && tween._rawPrevTime > 0) {
                                                pauseTween = tween;
                                            }
                                        tween = tween._prev;
                                    }
                                }
                                if (pauseTween) {
                                    this._time = time = pauseTween._startTime;
                                    this._totalTime = time + (this._cycle * (this._totalDuration + this._repeatDelay));
                                }
                            }

                            this._totalTime = this._time = this._rawPrevTime = time;
                        }
                        if ((this._time === prevTime || !this._first) && !force && !internalForce && !pauseTween) {
                            return;
                        } else if (!this._initted) {
                            this._initted = true;
                        }

                        if (!this._active)
                            if (!this._paused && this._time !== prevTime && time > 0) {
                                this._active = true; //so that if the user renders the timeline (as opposed to the parent timeline rendering it), it is forced to re-render and align it with the proper time/frame on the next rendering cycle. Maybe the timeline already finished but the user manually re-renders it as halfway done, for example.
                            }

                        if (prevTime === 0)
                            if (this.vars.onStart)
                                if (this._time !== 0 || !this._duration)
                                    if (!suppressEvents) {
                                        this._callback("onStart");
                                    }

                        curTime = this._time;
                        if (curTime >= prevTime) {
                            tween = this._first;
                            while (tween) {
                                next = tween._next; //record it here because the value could change after rendering...
                                if (curTime !== this._time || (this._paused && !prevPaused)) { //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
                                    break;
                                } else if (tween._active || (tween._startTime <= curTime && !tween._paused && !tween._gc)) {
                                    if (pauseTween === tween) {
                                        this.pause();
                                    }
                                    if (!tween._reversed) {
                                        tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);
                                    } else {
                                        tween.render(((!tween._dirty) ? tween._totalDuration : tween.totalDuration()) - ((time - tween._startTime) * tween._timeScale), suppressEvents, force);
                                    }
                                }
                                tween = next;
                            }
                        } else {
                            tween = this._last;
                            while (tween) {
                                next = tween._prev; //record it here because the value could change after rendering...
                                if (curTime !== this._time || (this._paused && !prevPaused)) { //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
                                    break;
                                } else if (tween._active || (tween._startTime <= prevTime && !tween._paused && !tween._gc)) {
                                    if (pauseTween === tween) {
                                        pauseTween = tween._prev; //the linked list is organized by _startTime, thus it's possible that a tween could start BEFORE the pause and end after it, in which case it would be positioned before the pause tween in the linked list, but we should render it before we pause() the timeline and cease rendering. This is only a concern when going in reverse.
                                        while (pauseTween && pauseTween.endTime() > this._time) {
                                            pauseTween.render((pauseTween._reversed ? pauseTween.totalDuration() - ((time - pauseTween._startTime) * pauseTween._timeScale) : (time - pauseTween._startTime) * pauseTween._timeScale), suppressEvents, force);
                                            pauseTween = pauseTween._prev;
                                        }
                                        pauseTween = null;
                                        this.pause();
                                    }
                                    if (!tween._reversed) {
                                        tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);
                                    } else {
                                        tween.render(((!tween._dirty) ? tween._totalDuration : tween.totalDuration()) - ((time - tween._startTime) * tween._timeScale), suppressEvents, force);
                                    }
                                }
                                tween = next;
                            }
                        }

                        if (this._onUpdate)
                            if (!suppressEvents) {
                                if (_lazyTweens.length) { //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onUpdate on a timeline that reports/checks tweened values.
                                    _lazyRender();
                                }
                                this._callback("onUpdate");
                            }

                        if (callback)
                            if (!this._gc)
                                if (prevStart === this._startTime || prevTimeScale !== this._timeScale)
                                    if (this._time === 0 || totalDur >= this.totalDuration()) { //if one of the tweens that was rendered altered this timeline's startTime (like if an onComplete reversed the timeline), it probably isn't complete. If it is, don't worry, because whatever call altered the startTime would complete if it was necessary at the new time. The only exception is the timeScale property. Also check _gc because there's a chance that kill() could be called in an onUpdate
                                        if (isComplete) {
                                            if (_lazyTweens.length) { //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onComplete on a timeline that reports/checks tweened values.
                                                _lazyRender();
                                            }
                                            if (this._timeline.autoRemoveChildren) {
                                                this._enabled(false, false);
                                            }
                                            this._active = false;
                                        }
                                        if (!suppressEvents && this.vars[callback]) {
                                            this._callback(callback);
                                        }
                                    }
                    };

                    p._hasPausedChild = function() {
                        var tween = this._first;
                        while (tween) {
                            if (tween._paused || ((tween instanceof TimelineLite) && tween._hasPausedChild())) {
                                return true;
                            }
                            tween = tween._next;
                        }
                        return false;
                    };

                    p.getChildren = function(nested, tweens, timelines, ignoreBeforeTime) {
                        ignoreBeforeTime = ignoreBeforeTime || -9999999999;
                        var a = [],
                            tween = this._first,
                            cnt = 0;
                        while (tween) {
                            if (tween._startTime < ignoreBeforeTime) {
                                //do nothing
                            } else if (tween instanceof TweenLite) {
                                if (tweens !== false) {
                                    a[cnt++] = tween;
                                }
                            } else {
                                if (timelines !== false) {
                                    a[cnt++] = tween;
                                }
                                if (nested !== false) {
                                    a = a.concat(tween.getChildren(true, tweens, timelines));
                                    cnt = a.length;
                                }
                            }
                            tween = tween._next;
                        }
                        return a;
                    };

                    p.getTweensOf = function(target, nested) {
                        var disabled = this._gc,
                            a = [],
                            cnt = 0,
                            tweens, i;
                        if (disabled) {
                            this._enabled(true, true); //getTweensOf() filters out disabled tweens, and we have to mark them as _gc = true when the timeline completes in order to allow clean garbage collection, so temporarily re-enable the timeline here.
                        }
                        tweens = TweenLite.getTweensOf(target);
                        i = tweens.length;
                        while (--i > -1) {
                            if (tweens[i].timeline === this || (nested && this._contains(tweens[i]))) {
                                a[cnt++] = tweens[i];
                            }
                        }
                        if (disabled) {
                            this._enabled(false, true);
                        }
                        return a;
                    };

                    p.recent = function() {
                        return this._recent;
                    };

                    p._contains = function(tween) {
                        var tl = tween.timeline;
                        while (tl) {
                            if (tl === this) {
                                return true;
                            }
                            tl = tl.timeline;
                        }
                        return false;
                    };

                    p.shiftChildren = function(amount, adjustLabels, ignoreBeforeTime) {
                        ignoreBeforeTime = ignoreBeforeTime || 0;
                        var tween = this._first,
                            labels = this._labels,
                            p;
                        while (tween) {
                            if (tween._startTime >= ignoreBeforeTime) {
                                tween._startTime += amount;
                            }
                            tween = tween._next;
                        }
                        if (adjustLabels) {
                            for (p in labels) {
                                if (labels[p] >= ignoreBeforeTime) {
                                    labels[p] += amount;
                                }
                            }
                        }
                        return this._uncache(true);
                    };

                    p._kill = function(vars, target) {
                        if (!vars && !target) {
                            return this._enabled(false, false);
                        }
                        var tweens = (!target) ? this.getChildren(true, true, false) : this.getTweensOf(target),
                            i = tweens.length,
                            changed = false;
                        while (--i > -1) {
                            if (tweens[i]._kill(vars, target)) {
                                changed = true;
                            }
                        }
                        return changed;
                    };

                    p.clear = function(labels) {
                        var tweens = this.getChildren(false, true, true),
                            i = tweens.length;
                        this._time = this._totalTime = 0;
                        while (--i > -1) {
                            tweens[i]._enabled(false, false);
                        }
                        if (labels !== false) {
                            this._labels = {};
                        }
                        return this._uncache(true);
                    };

                    p.invalidate = function() {
                        var tween = this._first;
                        while (tween) {
                            tween.invalidate();
                            tween = tween._next;
                        }
                        return Animation.prototype.invalidate.call(this);;
                    };

                    p._enabled = function(enabled, ignoreTimeline) {
                        if (enabled === this._gc) {
                            var tween = this._first;
                            while (tween) {
                                tween._enabled(enabled, true);
                                tween = tween._next;
                            }
                        }
                        return SimpleTimeline.prototype._enabled.call(this, enabled, ignoreTimeline);
                    };

                    p.totalTime = function(time, suppressEvents, uncapped) {
                        this._forcingPlayhead = true;
                        var val = Animation.prototype.totalTime.apply(this, arguments);
                        this._forcingPlayhead = false;
                        return val;
                    };

                    p.duration = function(value) {
                        if (!arguments.length) {
                            if (this._dirty) {
                                this.totalDuration(); //just triggers recalculation
                            }
                            return this._duration;
                        }
                        if (this.duration() !== 0 && value !== 0) {
                            this.timeScale(this._duration / value);
                        }
                        return this;
                    };

                    p.totalDuration = function(value) {
                        if (!arguments.length) {
                            if (this._dirty) {
                                var max = 0,
                                    tween = this._last,
                                    prevStart = 999999999999,
                                    prev, end;
                                while (tween) {
                                    prev = tween._prev; //record it here in case the tween changes position in the sequence...
                                    if (tween._dirty) {
                                        tween.totalDuration(); //could change the tween._startTime, so make sure the tween's cache is clean before analyzing it.
                                    }
                                    if (tween._startTime > prevStart && this._sortChildren && !tween._paused) { //in case one of the tweens shifted out of order, it needs to be re-inserted into the correct position in the sequence
                                        this.add(tween, tween._startTime - tween._delay);
                                    } else {
                                        prevStart = tween._startTime;
                                    }
                                    if (tween._startTime < 0 && !tween._paused) { //children aren't allowed to have negative startTimes unless smoothChildTiming is true, so adjust here if one is found.
                                        max -= tween._startTime;
                                        if (this._timeline.smoothChildTiming) {
                                            this._startTime += tween._startTime / this._timeScale;
                                        }
                                        this.shiftChildren(-tween._startTime, false, -9999999999);
                                        prevStart = 0;
                                    }
                                    end = tween._startTime + (tween._totalDuration / tween._timeScale);
                                    if (end > max) {
                                        max = end;
                                    }
                                    tween = prev;
                                }
                                this._duration = this._totalDuration = max;
                                this._dirty = false;
                            }
                            return this._totalDuration;
                        }
                        return (value && this.totalDuration()) ? this.timeScale(this._totalDuration / value) : this;
                    };

                    p.paused = function(value) {
                        if (!value) { //if there's a pause directly at the spot from where we're unpausing, skip it.
                            var tween = this._first,
                                time = this._time;
                            while (tween) {
                                if (tween._startTime === time && tween.data === "isPause") {
                                    tween._rawPrevTime = 0; //remember, _rawPrevTime is how zero-duration tweens/callbacks sense directionality and determine whether or not to fire. If _rawPrevTime is the same as _startTime on the next render, it won't fire.
                                }
                                tween = tween._next;
                            }
                        }
                        return Animation.prototype.paused.apply(this, arguments);
                    };

                    p.usesFrames = function() {
                        var tl = this._timeline;
                        while (tl._timeline) {
                            tl = tl._timeline;
                        }
                        return (tl === Animation._rootFramesTimeline);
                    };

                    p.rawTime = function(wrapRepeats) {
                        return (wrapRepeats && (this._paused || (this._repeat && this.time() > 0 && this.totalProgress() < 1))) ? this._totalTime % (this._duration + this._repeatDelay) : this._paused ? this._totalTime : (this._timeline.rawTime(wrapRepeats) - this._startTime) * this._timeScale;
                    };

                    return TimelineLite;

                }, true);













                /*
                 * ----------------------------------------------------------------
                 * TimelineMax
                 * ----------------------------------------------------------------
                 */
                _gsScope._gsDefine("TimelineMax", ["TimelineLite", "TweenLite", "easing.Ease"], function(TimelineLite, TweenLite, Ease) {

                    var TimelineMax = function(vars) {
                            TimelineLite.call(this, vars);
                            this._repeat = this.vars.repeat || 0;
                            this._repeatDelay = this.vars.repeatDelay || 0;
                            this._cycle = 0;
                            this._yoyo = (this.vars.yoyo === true);
                            this._dirty = true;
                        },
                        _tinyNum = 0.0000000001,
                        TweenLiteInternals = TweenLite._internals,
                        _lazyTweens = TweenLiteInternals.lazyTweens,
                        _lazyRender = TweenLiteInternals.lazyRender,
                        _globals = _gsScope._gsDefine.globals,
                        _easeNone = new Ease(null, null, 1, 0),
                        p = TimelineMax.prototype = new TimelineLite();

                    p.constructor = TimelineMax;
                    p.kill()._gc = false;
                    TimelineMax.version = "1.20.2";

                    p.invalidate = function() {
                        this._yoyo = (this.vars.yoyo === true);
                        this._repeat = this.vars.repeat || 0;
                        this._repeatDelay = this.vars.repeatDelay || 0;
                        this._uncache(true);
                        return TimelineLite.prototype.invalidate.call(this);
                    };

                    p.addCallback = function(callback, position, params, scope) {
                        return this.add(TweenLite.delayedCall(0, callback, params, scope), position);
                    };

                    p.removeCallback = function(callback, position) {
                        if (callback) {
                            if (position == null) {
                                this._kill(null, callback);
                            } else {
                                var a = this.getTweensOf(callback, false),
                                    i = a.length,
                                    time = this._parseTimeOrLabel(position);
                                while (--i > -1) {
                                    if (a[i]._startTime === time) {
                                        a[i]._enabled(false, false);
                                    }
                                }
                            }
                        }
                        return this;
                    };

                    p.removePause = function(position) {
                        return this.removeCallback(TimelineLite._internals.pauseCallback, position);
                    };

                    p.tweenTo = function(position, vars) {
                        vars = vars || {};
                        var copy = { ease: _easeNone, useFrames: this.usesFrames(), immediateRender: false },
                            Engine = (vars.repeat && _globals.TweenMax) || TweenLite,
                            duration, p, t;
                        for (p in vars) {
                            copy[p] = vars[p];
                        }
                        copy.time = this._parseTimeOrLabel(position);
                        duration = (Math.abs(Number(copy.time) - this._time) / this._timeScale) || 0.001;
                        t = new Engine(this, duration, copy);
                        copy.onStart = function() {
                            t.target.paused(true);
                            if (t.vars.time !== t.target.time() && duration === t.duration()) { //don't make the duration zero - if it's supposed to be zero, don't worry because it's already initting the tween and will complete immediately, effectively making the duration zero anyway. If we make duration zero, the tween won't run at all.
                                t.duration(Math.abs(t.vars.time - t.target.time()) / t.target._timeScale);
                            }
                            if (vars.onStart) { //in case the user had an onStart in the vars - we don't want to overwrite it.
                                vars.onStart.apply(vars.onStartScope || vars.callbackScope || t, vars.onStartParams || []); //don't use t._callback("onStart") or it'll point to the copy.onStart and we'll get a recursion error.
                            }
                        };
                        return t;
                    };

                    p.tweenFromTo = function(fromPosition, toPosition, vars) {
                        vars = vars || {};
                        fromPosition = this._parseTimeOrLabel(fromPosition);
                        vars.startAt = { onComplete: this.seek, onCompleteParams: [fromPosition], callbackScope: this };
                        vars.immediateRender = (vars.immediateRender !== false);
                        var t = this.tweenTo(toPosition, vars);
                        return t.duration((Math.abs(t.vars.time - fromPosition) / this._timeScale) || 0.001);
                    };

                    p.render = function(time, suppressEvents, force) {
                        if (this._gc) {
                            this._enabled(true, false);
                        }
                        var totalDur = (!this._dirty) ? this._totalDuration : this.totalDuration(),
                            dur = this._duration,
                            prevTime = this._time,
                            prevTotalTime = this._totalTime,
                            prevStart = this._startTime,
                            prevTimeScale = this._timeScale,
                            prevRawPrevTime = this._rawPrevTime,
                            prevPaused = this._paused,
                            prevCycle = this._cycle,
                            tween, isComplete, next, callback, internalForce, cycleDuration, pauseTween, curTime;
                        if (time >= totalDur - 0.0000001 && time >= 0) { //to work around occasional floating point math artifacts.
                            if (!this._locked) {
                                this._totalTime = totalDur;
                                this._cycle = this._repeat;
                            }
                            if (!this._reversed)
                                if (!this._hasPausedChild()) {
                                    isComplete = true;
                                    callback = "onComplete";
                                    internalForce = !!this._timeline.autoRemoveChildren; //otherwise, if the animation is unpaused/activated after it's already finished, it doesn't get removed from the parent timeline.
                                    if (this._duration === 0)
                                        if ((time <= 0 && time >= -0.0000001) || prevRawPrevTime < 0 || prevRawPrevTime === _tinyNum)
                                            if (prevRawPrevTime !== time && this._first) {
                                                internalForce = true;
                                                if (prevRawPrevTime > _tinyNum) {
                                                    callback = "onReverseComplete";
                                                }
                                            }
                                }
                            this._rawPrevTime = (this._duration || !suppressEvents || time || this._rawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline or tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
                            if (this._yoyo && (this._cycle & 1) !== 0) {
                                this._time = time = 0;
                            } else {
                                this._time = dur;
                                time = dur + 0.0001; //to avoid occasional floating point rounding errors - sometimes child tweens/timelines were not being fully completed (their progress might be 0.999999999999998 instead of 1 because when _time - tween._startTime is performed, floating point errors would return a value that was SLIGHTLY off). Try (999999999999.7 - 999999999999) * 1 = 0.699951171875 instead of 0.7. We cannot do less then 0.0001 because the same issue can occur when the duration is extremely large like 999999999999 in which case adding 0.00000001, for example, causes it to act like nothing was added.
                            }

                        } else if (time < 0.0000001) { //to work around occasional floating point math artifacts, round super small values to 0.
                            if (!this._locked) {
                                this._totalTime = this._cycle = 0;
                            }
                            this._time = 0;
                            if (prevTime !== 0 || (dur === 0 && prevRawPrevTime !== _tinyNum && (prevRawPrevTime > 0 || (time < 0 && prevRawPrevTime >= 0)) && !this._locked)) { //edge case for checking time < 0 && prevRawPrevTime >= 0: a zero-duration fromTo() tween inside a zero-duration timeline (yeah, very rare)
                                callback = "onReverseComplete";
                                isComplete = this._reversed;
                            }
                            if (time < 0) {
                                this._active = false;
                                if (this._timeline.autoRemoveChildren && this._reversed) {
                                    internalForce = isComplete = true;
                                    callback = "onReverseComplete";
                                } else if (prevRawPrevTime >= 0 && this._first) { //when going back beyond the start, force a render so that zero-duration tweens that sit at the very beginning render their start values properly. Otherwise, if the parent timeline's playhead lands exactly at this timeline's startTime, and then moves backwards, the zero-duration tweens at the beginning would still be at their end state.
                                    internalForce = true;
                                }
                                this._rawPrevTime = time;
                            } else {
                                this._rawPrevTime = (dur || !suppressEvents || time || this._rawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline or tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
                                if (time === 0 && isComplete) { //if there's a zero-duration tween at the very beginning of a timeline and the playhead lands EXACTLY at time 0, that tween will correctly render its end values, but we need to keep the timeline alive for one more render so that the beginning values render properly as the parent's playhead keeps moving beyond the begining. Imagine obj.x starts at 0 and then we do tl.set(obj, {x:100}).to(obj, 1, {x:200}) and then later we tl.reverse()...the goal is to have obj.x revert to 0. If the playhead happens to land on exactly 0, without this chunk of code, it'd complete the timeline and remove it from the rendering queue (not good).
                                    tween = this._first;
                                    while (tween && tween._startTime === 0) {
                                        if (!tween._duration) {
                                            isComplete = false;
                                        }
                                        tween = tween._next;
                                    }
                                }
                                time = 0; //to avoid occasional floating point rounding errors (could cause problems especially with zero-duration tweens at the very beginning of the timeline)
                                if (!this._initted) {
                                    internalForce = true;
                                }
                            }

                        } else {
                            if (dur === 0 && prevRawPrevTime < 0) { //without this, zero-duration repeating timelines (like with a simple callback nested at the very beginning and a repeatDelay) wouldn't render the first time through.
                                internalForce = true;
                            }
                            this._time = this._rawPrevTime = time;
                            if (!this._locked) {
                                this._totalTime = time;
                                if (this._repeat !== 0) {
                                    cycleDuration = dur + this._repeatDelay;
                                    this._cycle = (this._totalTime / cycleDuration) >> 0; //originally _totalTime % cycleDuration but floating point errors caused problems, so I normalized it. (4 % 0.8 should be 0 but it gets reported as 0.79999999!)
                                    if (this._cycle !== 0)
                                        if (this._cycle === this._totalTime / cycleDuration && prevTotalTime <= time) {
                                            this._cycle--; //otherwise when rendered exactly at the end time, it will act as though it is repeating (at the beginning)
                                        }
                                    this._time = this._totalTime - (this._cycle * cycleDuration);
                                    if (this._yoyo)
                                        if ((this._cycle & 1) !== 0) {
                                            this._time = dur - this._time;
                                        }
                                    if (this._time > dur) {
                                        this._time = dur;
                                        time = dur + 0.0001; //to avoid occasional floating point rounding error
                                    } else if (this._time < 0) {
                                        this._time = time = 0;
                                    } else {
                                        time = this._time;
                                    }
                                }
                            }

                            if (this._hasPause && !this._forcingPlayhead && !suppressEvents) {
                                time = this._time;
                                if (time >= prevTime || (this._repeat && prevCycle !== this._cycle)) {
                                    tween = this._first;
                                    while (tween && tween._startTime <= time && !pauseTween) {
                                        if (!tween._duration)
                                            if (tween.data === "isPause" && !tween.ratio && !(tween._startTime === 0 && this._rawPrevTime === 0)) {
                                                pauseTween = tween;
                                            }
                                        tween = tween._next;
                                    }
                                } else {
                                    tween = this._last;
                                    while (tween && tween._startTime >= time && !pauseTween) {
                                        if (!tween._duration)
                                            if (tween.data === "isPause" && tween._rawPrevTime > 0) {
                                                pauseTween = tween;
                                            }
                                        tween = tween._prev;
                                    }
                                }
                                if (pauseTween && pauseTween._startTime < dur) {
                                    this._time = time = pauseTween._startTime;
                                    this._totalTime = time + (this._cycle * (this._totalDuration + this._repeatDelay));
                                }
                            }

                        }

                        if (this._cycle !== prevCycle)
                            if (!this._locked) {
                                /*
                                make sure children at the end/beginning of the timeline are rendered properly. If, for example,
                                a 3-second long timeline rendered at 2.9 seconds previously, and now renders at 3.2 seconds (which
                                would get transated to 2.8 seconds if the timeline yoyos or 0.2 seconds if it just repeats), there
                                could be a callback or a short tween that's at 2.95 or 3 seconds in which wouldn't render. So
                                we need to push the timeline to the end (and/or beginning depending on its yoyo value). Also we must
                                ensure that zero-duration tweens at the very beginning or end of the TimelineMax work.
                                */
                                var backwards = (this._yoyo && (prevCycle & 1) !== 0),
                                    wrap = (backwards === (this._yoyo && (this._cycle & 1) !== 0)),
                                    recTotalTime = this._totalTime,
                                    recCycle = this._cycle,
                                    recRawPrevTime = this._rawPrevTime,
                                    recTime = this._time;

                                this._totalTime = prevCycle * dur;
                                if (this._cycle < prevCycle) {
                                    backwards = !backwards;
                                } else {
                                    this._totalTime += dur;
                                }
                                this._time = prevTime; //temporarily revert _time so that render() renders the children in the correct order. Without this, tweens won't rewind correctly. We could arhictect things in a "cleaner" way by splitting out the rendering queue into a separate method but for performance reasons, we kept it all inside this method.

                                this._rawPrevTime = (dur === 0) ? prevRawPrevTime - 0.0001 : prevRawPrevTime;
                                this._cycle = prevCycle;
                                this._locked = true; //prevents changes to totalTime and skips repeat/yoyo behavior when we recursively call render()
                                prevTime = (backwards) ? 0 : dur;
                                this.render(prevTime, suppressEvents, (dur === 0));
                                if (!suppressEvents)
                                    if (!this._gc) {
                                        if (this.vars.onRepeat) {
                                            this._cycle = recCycle; //in case the onRepeat alters the playhead or invalidates(), we shouldn't stay locked or use the previous cycle.
                                            this._locked = false;
                                            this._callback("onRepeat");
                                        }
                                    }
                                if (prevTime !== this._time) { //in case there's a callback like onComplete in a nested tween/timeline that changes the playhead position, like via seek(), we should just abort.
                                    return;
                                }
                                if (wrap) {
                                    this._cycle = prevCycle; //if there's an onRepeat, we reverted this above, so make sure it's set properly again. We also unlocked in that scenario, so reset that too.
                                    this._locked = true;
                                    prevTime = (backwards) ? dur + 0.0001 : -0.0001;
                                    this.render(prevTime, true, false);
                                }
                                this._locked = false;
                                if (this._paused && !prevPaused) { //if the render() triggered callback that paused this timeline, we should abort (very rare, but possible)
                                    return;
                                }
                                this._time = recTime;
                                this._totalTime = recTotalTime;
                                this._cycle = recCycle;
                                this._rawPrevTime = recRawPrevTime;
                            }

                        if ((this._time === prevTime || !this._first) && !force && !internalForce && !pauseTween) {
                            if (prevTotalTime !== this._totalTime)
                                if (this._onUpdate)
                                    if (!suppressEvents) { //so that onUpdate fires even during the repeatDelay - as long as the totalTime changed, we should trigger onUpdate.
                                        this._callback("onUpdate");
                                    }
                            return;
                        } else if (!this._initted) {
                            this._initted = true;
                        }

                        if (!this._active)
                            if (!this._paused && this._totalTime !== prevTotalTime && time > 0) {
                                this._active = true; //so that if the user renders the timeline (as opposed to the parent timeline rendering it), it is forced to re-render and align it with the proper time/frame on the next rendering cycle. Maybe the timeline already finished but the user manually re-renders it as halfway done, for example.
                            }

                        if (prevTotalTime === 0)
                            if (this.vars.onStart)
                                if (this._totalTime !== 0 || !this._totalDuration)
                                    if (!suppressEvents) {
                                        this._callback("onStart");
                                    }

                        curTime = this._time;
                        if (curTime >= prevTime) {
                            tween = this._first;
                            while (tween) {
                                next = tween._next; //record it here because the value could change after rendering...
                                if (curTime !== this._time || (this._paused && !prevPaused)) { //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
                                    break;
                                } else if (tween._active || (tween._startTime <= this._time && !tween._paused && !tween._gc)) {
                                    if (pauseTween === tween) {
                                        this.pause();
                                    }
                                    if (!tween._reversed) {
                                        tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);
                                    } else {
                                        tween.render(((!tween._dirty) ? tween._totalDuration : tween.totalDuration()) - ((time - tween._startTime) * tween._timeScale), suppressEvents, force);
                                    }
                                }
                                tween = next;
                            }
                        } else {
                            tween = this._last;
                            while (tween) {
                                next = tween._prev; //record it here because the value could change after rendering...
                                if (curTime !== this._time || (this._paused && !prevPaused)) { //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
                                    break;
                                } else if (tween._active || (tween._startTime <= prevTime && !tween._paused && !tween._gc)) {
                                    if (pauseTween === tween) {
                                        pauseTween = tween._prev; //the linked list is organized by _startTime, thus it's possible that a tween could start BEFORE the pause and end after it, in which case it would be positioned before the pause tween in the linked list, but we should render it before we pause() the timeline and cease rendering. This is only a concern when going in reverse.
                                        while (pauseTween && pauseTween.endTime() > this._time) {
                                            pauseTween.render((pauseTween._reversed ? pauseTween.totalDuration() - ((time - pauseTween._startTime) * pauseTween._timeScale) : (time - pauseTween._startTime) * pauseTween._timeScale), suppressEvents, force);
                                            pauseTween = pauseTween._prev;
                                        }
                                        pauseTween = null;
                                        this.pause();
                                    }
                                    if (!tween._reversed) {
                                        tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);
                                    } else {
                                        tween.render(((!tween._dirty) ? tween._totalDuration : tween.totalDuration()) - ((time - tween._startTime) * tween._timeScale), suppressEvents, force);
                                    }
                                }
                                tween = next;
                            }
                        }

                        if (this._onUpdate)
                            if (!suppressEvents) {
                                if (_lazyTweens.length) { //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onUpdate on a timeline that reports/checks tweened values.
                                    _lazyRender();
                                }
                                this._callback("onUpdate");
                            }
                        if (callback)
                            if (!this._locked)
                                if (!this._gc)
                                    if (prevStart === this._startTime || prevTimeScale !== this._timeScale)
                                        if (this._time === 0 || totalDur >= this.totalDuration()) { //if one of the tweens that was rendered altered this timeline's startTime (like if an onComplete reversed the timeline), it probably isn't complete. If it is, don't worry, because whatever call altered the startTime would complete if it was necessary at the new time. The only exception is the timeScale property. Also check _gc because there's a chance that kill() could be called in an onUpdate
                                            if (isComplete) {
                                                if (_lazyTweens.length) { //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onComplete on a timeline that reports/checks tweened values.
                                                    _lazyRender();
                                                }
                                                if (this._timeline.autoRemoveChildren) {
                                                    this._enabled(false, false);
                                                }
                                                this._active = false;
                                            }
                                            if (!suppressEvents && this.vars[callback]) {
                                                this._callback(callback);
                                            }
                                        }
                    };

                    p.getActive = function(nested, tweens, timelines) {
                        if (nested == null) {
                            nested = true;
                        }
                        if (tweens == null) {
                            tweens = true;
                        }
                        if (timelines == null) {
                            timelines = false;
                        }
                        var a = [],
                            all = this.getChildren(nested, tweens, timelines),
                            cnt = 0,
                            l = all.length,
                            i, tween;
                        for (i = 0; i < l; i++) {
                            tween = all[i];
                            if (tween.isActive()) {
                                a[cnt++] = tween;
                            }
                        }
                        return a;
                    };


                    p.getLabelAfter = function(time) {
                        if (!time)
                            if (time !== 0) { //faster than isNan()
                                time = this._time;
                            }
                        var labels = this.getLabelsArray(),
                            l = labels.length,
                            i;
                        for (i = 0; i < l; i++) {
                            if (labels[i].time > time) {
                                return labels[i].name;
                            }
                        }
                        return null;
                    };

                    p.getLabelBefore = function(time) {
                        if (time == null) {
                            time = this._time;
                        }
                        var labels = this.getLabelsArray(),
                            i = labels.length;
                        while (--i > -1) {
                            if (labels[i].time < time) {
                                return labels[i].name;
                            }
                        }
                        return null;
                    };

                    p.getLabelsArray = function() {
                        var a = [],
                            cnt = 0,
                            p;
                        for (p in this._labels) {
                            a[cnt++] = { time: this._labels[p], name: p };
                        }
                        a.sort(function(a, b) {
                            return a.time - b.time;
                        });
                        return a;
                    };

                    p.invalidate = function() {
                        this._locked = false; //unlock and set cycle in case invalidate() is called from inside an onRepeat
                        return TimelineLite.prototype.invalidate.call(this);
                    };


                    //---- GETTERS / SETTERS -------------------------------------------------------------------------------------------------------

                    p.progress = function(value, suppressEvents) {
                        return (!arguments.length) ? (this._time / this.duration()) || 0 : this.totalTime(this.duration() * ((this._yoyo && (this._cycle & 1) !== 0) ? 1 - value : value) + (this._cycle * (this._duration + this._repeatDelay)), suppressEvents);
                    };

                    p.totalProgress = function(value, suppressEvents) {
                        return (!arguments.length) ? (this._totalTime / this.totalDuration()) || 0 : this.totalTime(this.totalDuration() * value, suppressEvents);
                    };

                    p.totalDuration = function(value) {
                        if (!arguments.length) {
                            if (this._dirty) {
                                TimelineLite.prototype.totalDuration.call(this); //just forces refresh
                                //Instead of Infinity, we use 999999999999 so that we can accommodate reverses.
                                this._totalDuration = (this._repeat === -1) ? 999999999999 : this._duration * (this._repeat + 1) + (this._repeatDelay * this._repeat);
                            }
                            return this._totalDuration;
                        }
                        return (this._repeat === -1 || !value) ? this : this.timeScale(this.totalDuration() / value);
                    };

                    p.time = function(value, suppressEvents) {
                        if (!arguments.length) {
                            return this._time;
                        }
                        if (this._dirty) {
                            this.totalDuration();
                        }
                        if (value > this._duration) {
                            value = this._duration;
                        }
                        if (this._yoyo && (this._cycle & 1) !== 0) {
                            value = (this._duration - value) + (this._cycle * (this._duration + this._repeatDelay));
                        } else if (this._repeat !== 0) {
                            value += this._cycle * (this._duration + this._repeatDelay);
                        }
                        return this.totalTime(value, suppressEvents);
                    };

                    p.repeat = function(value) {
                        if (!arguments.length) {
                            return this._repeat;
                        }
                        this._repeat = value;
                        return this._uncache(true);
                    };

                    p.repeatDelay = function(value) {
                        if (!arguments.length) {
                            return this._repeatDelay;
                        }
                        this._repeatDelay = value;
                        return this._uncache(true);
                    };

                    p.yoyo = function(value) {
                        if (!arguments.length) {
                            return this._yoyo;
                        }
                        this._yoyo = value;
                        return this;
                    };

                    p.currentLabel = function(value) {
                        if (!arguments.length) {
                            return this.getLabelBefore(this._time + 0.00000001);
                        }
                        return this.seek(value, true);
                    };

                    return TimelineMax;

                }, true);












                /*
                 * ----------------------------------------------------------------
                 * BezierPlugin
                 * ----------------------------------------------------------------
                 */
                (function() {

                    var _RAD2DEG = 180 / Math.PI,
                        _r1 = [],
                        _r2 = [],
                        _r3 = [],
                        _corProps = {},
                        _globals = _gsScope._gsDefine.globals,
                        Segment = function(a, b, c, d) {
                            if (c === d) { //if c and d match, the final autoRotate value could lock at -90 degrees, so differentiate them slightly.
                                c = d - (d - b) / 1000000;
                            }
                            if (a === b) { //if a and b match, the starting autoRotate value could lock at -90 degrees, so differentiate them slightly.
                                b = a + (c - a) / 1000000;
                            }
                            this.a = a;
                            this.b = b;
                            this.c = c;
                            this.d = d;
                            this.da = d - a;
                            this.ca = c - a;
                            this.ba = b - a;
                        },
                        _correlate = ",x,y,z,left,top,right,bottom,marginTop,marginLeft,marginRight,marginBottom,paddingLeft,paddingTop,paddingRight,paddingBottom,backgroundPosition,backgroundPosition_y,",
                        cubicToQuadratic = function(a, b, c, d) {
                            var q1 = { a: a },
                                q2 = {},
                                q3 = {},
                                q4 = { c: d },
                                mab = (a + b) / 2,
                                mbc = (b + c) / 2,
                                mcd = (c + d) / 2,
                                mabc = (mab + mbc) / 2,
                                mbcd = (mbc + mcd) / 2,
                                m8 = (mbcd - mabc) / 8;
                            q1.b = mab + (a - mab) / 4;
                            q2.b = mabc + m8;
                            q1.c = q2.a = (q1.b + q2.b) / 2;
                            q2.c = q3.a = (mabc + mbcd) / 2;
                            q3.b = mbcd - m8;
                            q4.b = mcd + (d - mcd) / 4;
                            q3.c = q4.a = (q3.b + q4.b) / 2;
                            return [q1, q2, q3, q4];
                        },
                        _calculateControlPoints = function(a, curviness, quad, basic, correlate) {
                            var l = a.length - 1,
                                ii = 0,
                                cp1 = a[0].a,
                                i, p1, p2, p3, seg, m1, m2, mm, cp2, qb, r1, r2, tl;
                            for (i = 0; i < l; i++) {
                                seg = a[ii];
                                p1 = seg.a;
                                p2 = seg.d;
                                p3 = a[ii + 1].d;

                                if (correlate) {
                                    r1 = _r1[i];
                                    r2 = _r2[i];
                                    tl = ((r2 + r1) * curviness * 0.25) / (basic ? 0.5 : _r3[i] || 0.5);
                                    m1 = p2 - (p2 - p1) * (basic ? curviness * 0.5 : (r1 !== 0 ? tl / r1 : 0));
                                    m2 = p2 + (p3 - p2) * (basic ? curviness * 0.5 : (r2 !== 0 ? tl / r2 : 0));
                                    mm = p2 - (m1 + (((m2 - m1) * ((r1 * 3 / (r1 + r2)) + 0.5) / 4) || 0));
                                } else {
                                    m1 = p2 - (p2 - p1) * curviness * 0.5;
                                    m2 = p2 + (p3 - p2) * curviness * 0.5;
                                    mm = p2 - (m1 + m2) / 2;
                                }
                                m1 += mm;
                                m2 += mm;

                                seg.c = cp2 = m1;
                                if (i !== 0) {
                                    seg.b = cp1;
                                } else {
                                    seg.b = cp1 = seg.a + (seg.c - seg.a) * 0.6; //instead of placing b on a exactly, we move it inline with c so that if the user specifies an ease like Back.easeIn or Elastic.easeIn which goes BEYOND the beginning, it will do so smoothly.
                                }

                                seg.da = p2 - p1;
                                seg.ca = cp2 - p1;
                                seg.ba = cp1 - p1;

                                if (quad) {
                                    qb = cubicToQuadratic(p1, cp1, cp2, p2);
                                    a.splice(ii, 1, qb[0], qb[1], qb[2], qb[3]);
                                    ii += 4;
                                } else {
                                    ii++;
                                }

                                cp1 = m2;
                            }
                            seg = a[ii];
                            seg.b = cp1;
                            seg.c = cp1 + (seg.d - cp1) * 0.4; //instead of placing c on d exactly, we move it inline with b so that if the user specifies an ease like Back.easeOut or Elastic.easeOut which goes BEYOND the end, it will do so smoothly.
                            seg.da = seg.d - seg.a;
                            seg.ca = seg.c - seg.a;
                            seg.ba = cp1 - seg.a;
                            if (quad) {
                                qb = cubicToQuadratic(seg.a, cp1, seg.c, seg.d);
                                a.splice(ii, 1, qb[0], qb[1], qb[2], qb[3]);
                            }
                        },
                        _parseAnchors = function(values, p, correlate, prepend) {
                            var a = [],
                                l, i, p1, p2, p3, tmp;
                            if (prepend) {
                                values = [prepend].concat(values);
                                i = values.length;
                                while (--i > -1) {
                                    if (typeof((tmp = values[i][p])) === "string")
                                        if (tmp.charAt(1) === "=") {
                                            values[i][p] = prepend[p] + Number(tmp.charAt(0) + tmp.substr(2)); //accommodate relative values. Do it inline instead of breaking it out into a function for speed reasons
                                        }
                                }
                            }
                            l = values.length - 2;
                            if (l < 0) {
                                a[0] = new Segment(values[0][p], 0, 0, values[0][p]);
                                return a;
                            }
                            for (i = 0; i < l; i++) {
                                p1 = values[i][p];
                                p2 = values[i + 1][p];
                                a[i] = new Segment(p1, 0, 0, p2);
                                if (correlate) {
                                    p3 = values[i + 2][p];
                                    _r1[i] = (_r1[i] || 0) + (p2 - p1) * (p2 - p1);
                                    _r2[i] = (_r2[i] || 0) + (p3 - p2) * (p3 - p2);
                                }
                            }
                            a[i] = new Segment(values[i][p], 0, 0, values[i + 1][p]);
                            return a;
                        },
                        bezierThrough = function(values, curviness, quadratic, basic, correlate, prepend) {
                            var obj = {},
                                props = [],
                                first = prepend || values[0],
                                i, p, a, j, r, l, seamless, last;
                            correlate = (typeof(correlate) === "string") ? "," + correlate + "," : _correlate;
                            if (curviness == null) {
                                curviness = 1;
                            }
                            for (p in values[0]) {
                                props.push(p);
                            }
                            //check to see if the last and first values are identical (well, within 0.05). If so, make seamless by appending the second element to the very end of the values array and the 2nd-to-last element to the very beginning (we'll remove those segments later)
                            if (values.length > 1) {
                                last = values[values.length - 1];
                                seamless = true;
                                i = props.length;
                                while (--i > -1) {
                                    p = props[i];
                                    if (Math.abs(first[p] - last[p]) > 0.05) { //build in a tolerance of +/-0.05 to accommodate rounding errors.
                                        seamless = false;
                                        break;
                                    }
                                }
                                if (seamless) {
                                    values = values.concat(); //duplicate the array to avoid contaminating the original which the user may be reusing for other tweens
                                    if (prepend) {
                                        values.unshift(prepend);
                                    }
                                    values.push(values[1]);
                                    prepend = values[values.length - 3];
                                }
                            }
                            _r1.length = _r2.length = _r3.length = 0;
                            i = props.length;
                            while (--i > -1) {
                                p = props[i];
                                _corProps[p] = (correlate.indexOf("," + p + ",") !== -1);
                                obj[p] = _parseAnchors(values, p, _corProps[p], prepend);
                            }
                            i = _r1.length;
                            while (--i > -1) {
                                _r1[i] = Math.sqrt(_r1[i]);
                                _r2[i] = Math.sqrt(_r2[i]);
                            }
                            if (!basic) {
                                i = props.length;
                                while (--i > -1) {
                                    if (_corProps[p]) {
                                        a = obj[props[i]];
                                        l = a.length - 1;
                                        for (j = 0; j < l; j++) {
                                            r = (a[j + 1].da / _r2[j] + a[j].da / _r1[j]) || 0;
                                            _r3[j] = (_r3[j] || 0) + r * r;
                                        }
                                    }
                                }
                                i = _r3.length;
                                while (--i > -1) {
                                    _r3[i] = Math.sqrt(_r3[i]);
                                }
                            }
                            i = props.length;
                            j = quadratic ? 4 : 1;
                            while (--i > -1) {
                                p = props[i];
                                a = obj[p];
                                _calculateControlPoints(a, curviness, quadratic, basic, _corProps[p]); //this method requires that _parseAnchors() and _setSegmentRatios() ran first so that _r1, _r2, and _r3 values are populated for all properties
                                if (seamless) {
                                    a.splice(0, j);
                                    a.splice(a.length - j, j);
                                }
                            }
                            return obj;
                        },
                        _parseBezierData = function(values, type, prepend) {
                            type = type || "soft";
                            var obj = {},
                                inc = (type === "cubic") ? 3 : 2,
                                soft = (type === "soft"),
                                props = [],
                                a, b, c, d, cur, i, j, l, p, cnt, tmp;
                            if (soft && prepend) {
                                values = [prepend].concat(values);
                            }
                            if (values == null || values.length < inc + 1) { throw "invalid Bezier data"; }
                            for (p in values[0]) {
                                props.push(p);
                            }
                            i = props.length;
                            while (--i > -1) {
                                p = props[i];
                                obj[p] = cur = [];
                                cnt = 0;
                                l = values.length;
                                for (j = 0; j < l; j++) {
                                    a = (prepend == null) ? values[j][p] : (typeof((tmp = values[j][p])) === "string" && tmp.charAt(1) === "=") ? prepend[p] + Number(tmp.charAt(0) + tmp.substr(2)) : Number(tmp);
                                    if (soft)
                                        if (j > 1)
                                            if (j < l - 1) {
                                                cur[cnt++] = (a + cur[cnt - 2]) / 2;
                                            }
                                    cur[cnt++] = a;
                                }
                                l = cnt - inc + 1;
                                cnt = 0;
                                for (j = 0; j < l; j += inc) {
                                    a = cur[j];
                                    b = cur[j + 1];
                                    c = cur[j + 2];
                                    d = (inc === 2) ? 0 : cur[j + 3];
                                    cur[cnt++] = tmp = (inc === 3) ? new Segment(a, b, c, d) : new Segment(a, (2 * b + a) / 3, (2 * b + c) / 3, c);
                                }
                                cur.length = cnt;
                            }
                            return obj;
                        },
                        _addCubicLengths = function(a, steps, resolution) {
                            var inc = 1 / resolution,
                                j = a.length,
                                d, d1, s, da, ca, ba, p, i, inv, bez, index;
                            while (--j > -1) {
                                bez = a[j];
                                s = bez.a;
                                da = bez.d - s;
                                ca = bez.c - s;
                                ba = bez.b - s;
                                d = d1 = 0;
                                for (i = 1; i <= resolution; i++) {
                                    p = inc * i;
                                    inv = 1 - p;
                                    d = d1 - (d1 = (p * p * da + 3 * inv * (p * ca + inv * ba)) * p);
                                    index = j * resolution + i - 1;
                                    steps[index] = (steps[index] || 0) + d * d;
                                }
                            }
                        },
                        _parseLengthData = function(obj, resolution) {
                            resolution = resolution >> 0 || 6;
                            var a = [],
                                lengths = [],
                                d = 0,
                                total = 0,
                                threshold = resolution - 1,
                                segments = [],
                                curLS = [], //current length segments array
                                p, i, l, index;
                            for (p in obj) {
                                _addCubicLengths(obj[p], a, resolution);
                            }
                            l = a.length;
                            for (i = 0; i < l; i++) {
                                d += Math.sqrt(a[i]);
                                index = i % resolution;
                                curLS[index] = d;
                                if (index === threshold) {
                                    total += d;
                                    index = (i / resolution) >> 0;
                                    segments[index] = curLS;
                                    lengths[index] = total;
                                    d = 0;
                                    curLS = [];
                                }
                            }
                            return { length: total, lengths: lengths, segments: segments };
                        },



                        BezierPlugin = _gsScope._gsDefine.plugin({
                            propName: "bezier",
                            priority: -1,
                            version: "1.3.8",
                            API: 2,
                            global: true,

                            //gets called when the tween renders for the first time. This is where initial values should be recorded and any setup routines should run.
                            init: function(target, vars, tween) {
                                this._target = target;
                                if (vars instanceof Array) {
                                    vars = { values: vars };
                                }
                                this._func = {};
                                this._mod = {};
                                this._props = [];
                                this._timeRes = (vars.timeResolution == null) ? 6 : parseInt(vars.timeResolution, 10);
                                var values = vars.values || [],
                                    first = {},
                                    second = values[0],
                                    autoRotate = vars.autoRotate || tween.vars.orientToBezier,
                                    p, isFunc, i, j, prepend;

                                this._autoRotate = autoRotate ? (autoRotate instanceof Array) ? autoRotate : [
                                    ["x", "y", "rotation", ((autoRotate === true) ? 0 : Number(autoRotate) || 0)]
                                ] : null;
                                for (p in second) {
                                    this._props.push(p);
                                }

                                i = this._props.length;
                                while (--i > -1) {
                                    p = this._props[i];

                                    this._overwriteProps.push(p);
                                    isFunc = this._func[p] = (typeof(target[p]) === "function");
                                    first[p] = (!isFunc) ? parseFloat(target[p]) : target[((p.indexOf("set") || typeof(target["get" + p.substr(3)]) !== "function") ? p : "get" + p.substr(3))]();
                                    if (!prepend)
                                        if (first[p] !== values[0][p]) {
                                            prepend = first;
                                        }
                                }
                                this._beziers = (vars.type !== "cubic" && vars.type !== "quadratic" && vars.type !== "soft") ? bezierThrough(values, isNaN(vars.curviness) ? 1 : vars.curviness, false, (vars.type === "thruBasic"), vars.correlate, prepend) : _parseBezierData(values, vars.type, first);
                                this._segCount = this._beziers[p].length;

                                if (this._timeRes) {
                                    var ld = _parseLengthData(this._beziers, this._timeRes);
                                    this._length = ld.length;
                                    this._lengths = ld.lengths;
                                    this._segments = ld.segments;
                                    this._l1 = this._li = this._s1 = this._si = 0;
                                    this._l2 = this._lengths[0];
                                    this._curSeg = this._segments[0];
                                    this._s2 = this._curSeg[0];
                                    this._prec = 1 / this._curSeg.length;
                                }

                                if ((autoRotate = this._autoRotate)) {
                                    this._initialRotations = [];
                                    if (!(autoRotate[0] instanceof Array)) {
                                        this._autoRotate = autoRotate = [autoRotate];
                                    }
                                    i = autoRotate.length;
                                    while (--i > -1) {
                                        for (j = 0; j < 3; j++) {
                                            p = autoRotate[i][j];
                                            this._func[p] = (typeof(target[p]) === "function") ? target[((p.indexOf("set") || typeof(target["get" + p.substr(3)]) !== "function") ? p : "get" + p.substr(3))] : false;
                                        }
                                        p = autoRotate[i][2];
                                        this._initialRotations[i] = (this._func[p] ? this._func[p].call(this._target) : this._target[p]) || 0;
                                        this._overwriteProps.push(p);
                                    }
                                }
                                this._startRatio = tween.vars.runBackwards ? 1 : 0; //we determine the starting ratio when the tween inits which is always 0 unless the tween has runBackwards:true (indicating it's a from() tween) in which case it's 1.
                                return true;
                            },

                            //called each time the values should be updated, and the ratio gets passed as the only parameter (typically it's a value between 0 and 1, but it can exceed those when using an ease like Elastic.easeOut or Back.easeOut, etc.)
                            set: function(v) {
                                var segments = this._segCount,
                                    func = this._func,
                                    target = this._target,
                                    notStart = (v !== this._startRatio),
                                    curIndex, inv, i, p, b, t, val, l, lengths, curSeg;
                                if (!this._timeRes) {
                                    curIndex = (v < 0) ? 0 : (v >= 1) ? segments - 1 : (segments * v) >> 0;
                                    t = (v - (curIndex * (1 / segments))) * segments;
                                } else {
                                    lengths = this._lengths;
                                    curSeg = this._curSeg;
                                    v *= this._length;
                                    i = this._li;
                                    //find the appropriate segment (if the currently cached one isn't correct)
                                    if (v > this._l2 && i < segments - 1) {
                                        l = segments - 1;
                                        while (i < l && (this._l2 = lengths[++i]) <= v) {}
                                        this._l1 = lengths[i - 1];
                                        this._li = i;
                                        this._curSeg = curSeg = this._segments[i];
                                        this._s2 = curSeg[(this._s1 = this._si = 0)];
                                    } else if (v < this._l1 && i > 0) {
                                        while (i > 0 && (this._l1 = lengths[--i]) >= v) {}
                                        if (i === 0 && v < this._l1) {
                                            this._l1 = 0;
                                        } else {
                                            i++;
                                        }
                                        this._l2 = lengths[i];
                                        this._li = i;
                                        this._curSeg = curSeg = this._segments[i];
                                        this._s1 = curSeg[(this._si = curSeg.length - 1) - 1] || 0;
                                        this._s2 = curSeg[this._si];
                                    }
                                    curIndex = i;
                                    //now find the appropriate sub-segment (we split it into the number of pieces that was defined by "precision" and measured each one)
                                    v -= this._l1;
                                    i = this._si;
                                    if (v > this._s2 && i < curSeg.length - 1) {
                                        l = curSeg.length - 1;
                                        while (i < l && (this._s2 = curSeg[++i]) <= v) {}
                                        this._s1 = curSeg[i - 1];
                                        this._si = i;
                                    } else if (v < this._s1 && i > 0) {
                                        while (i > 0 && (this._s1 = curSeg[--i]) >= v) {}
                                        if (i === 0 && v < this._s1) {
                                            this._s1 = 0;
                                        } else {
                                            i++;
                                        }
                                        this._s2 = curSeg[i];
                                        this._si = i;
                                    }
                                    t = ((i + (v - this._s1) / (this._s2 - this._s1)) * this._prec) || 0;
                                }
                                inv = 1 - t;

                                i = this._props.length;
                                while (--i > -1) {
                                    p = this._props[i];
                                    b = this._beziers[p][curIndex];
                                    val = (t * t * b.da + 3 * inv * (t * b.ca + inv * b.ba)) * t + b.a;
                                    if (this._mod[p]) {
                                        val = this._mod[p](val, target);
                                    }
                                    if (func[p]) {
                                        target[p](val);
                                    } else {
                                        target[p] = val;
                                    }
                                }

                                if (this._autoRotate) {
                                    var ar = this._autoRotate,
                                        b2, x1, y1, x2, y2, add, conv;
                                    i = ar.length;
                                    while (--i > -1) {
                                        p = ar[i][2];
                                        add = ar[i][3] || 0;
                                        conv = (ar[i][4] === true) ? 1 : _RAD2DEG;
                                        b = this._beziers[ar[i][0]];
                                        b2 = this._beziers[ar[i][1]];

                                        if (b && b2) { //in case one of the properties got overwritten.
                                            b = b[curIndex];
                                            b2 = b2[curIndex];

                                            x1 = b.a + (b.b - b.a) * t;
                                            x2 = b.b + (b.c - b.b) * t;
                                            x1 += (x2 - x1) * t;
                                            x2 += ((b.c + (b.d - b.c) * t) - x2) * t;

                                            y1 = b2.a + (b2.b - b2.a) * t;
                                            y2 = b2.b + (b2.c - b2.b) * t;
                                            y1 += (y2 - y1) * t;
                                            y2 += ((b2.c + (b2.d - b2.c) * t) - y2) * t;

                                            val = notStart ? Math.atan2(y2 - y1, x2 - x1) * conv + add : this._initialRotations[i];

                                            if (this._mod[p]) {
                                                val = this._mod[p](val, target); //for modProps
                                            }

                                            if (func[p]) {
                                                target[p](val);
                                            } else {
                                                target[p] = val;
                                            }
                                        }
                                    }
                                }
                            }
                        }),
                        p = BezierPlugin.prototype;


                    BezierPlugin.bezierThrough = bezierThrough;
                    BezierPlugin.cubicToQuadratic = cubicToQuadratic;
                    BezierPlugin._autoCSS = true; //indicates that this plugin can be inserted into the "css" object using the autoCSS feature of TweenLite
                    BezierPlugin.quadraticToCubic = function(a, b, c) {
                        return new Segment(a, (2 * b + a) / 3, (2 * b + c) / 3, c);
                    };

                    BezierPlugin._cssRegister = function() {
                        var CSSPlugin = _globals.CSSPlugin;
                        if (!CSSPlugin) {
                            return;
                        }
                        var _internals = CSSPlugin._internals,
                            _parseToProxy = _internals._parseToProxy,
                            _setPluginRatio = _internals._setPluginRatio,
                            CSSPropTween = _internals.CSSPropTween;
                        _internals._registerComplexSpecialProp("bezier", {
                            parser: function(t, e, prop, cssp, pt, plugin) {
                                if (e instanceof Array) {
                                    e = { values: e };
                                }
                                plugin = new BezierPlugin();
                                var values = e.values,
                                    l = values.length - 1,
                                    pluginValues = [],
                                    v = {},
                                    i, p, data;
                                if (l < 0) {
                                    return pt;
                                }
                                for (i = 0; i <= l; i++) {
                                    data = _parseToProxy(t, values[i], cssp, pt, plugin, (l !== i));
                                    pluginValues[i] = data.end;
                                }
                                for (p in e) {
                                    v[p] = e[p]; //duplicate the vars object because we need to alter some things which would cause problems if the user plans to reuse the same vars object for another tween.
                                }
                                v.values = pluginValues;
                                pt = new CSSPropTween(t, "bezier", 0, 0, data.pt, 2);
                                pt.data = data;
                                pt.plugin = plugin;
                                pt.setRatio = _setPluginRatio;
                                if (v.autoRotate === 0) {
                                    v.autoRotate = true;
                                }
                                if (v.autoRotate && !(v.autoRotate instanceof Array)) {
                                    i = (v.autoRotate === true) ? 0 : Number(v.autoRotate);
                                    v.autoRotate = (data.end.left != null) ? [
                                        ["left", "top", "rotation", i, false]
                                    ] : (data.end.x != null) ? [
                                        ["x", "y", "rotation", i, false]
                                    ] : false;
                                }
                                if (v.autoRotate) {
                                    if (!cssp._transform) {
                                        cssp._enableTransforms(false);
                                    }
                                    data.autoRotate = cssp._target._gsTransform;
                                    data.proxy.rotation = data.autoRotate.rotation || 0;
                                    cssp._overwriteProps.push("rotation");
                                }
                                plugin._onInitTween(data.proxy, v, cssp._tween);
                                return pt;
                            }
                        });
                    };

                    p._mod = function(lookup) {
                        var op = this._overwriteProps,
                            i = op.length,
                            val;
                        while (--i > -1) {
                            val = lookup[op[i]];
                            if (val && typeof(val) === "function") {
                                this._mod[op[i]] = val;
                            }
                        }
                    };

                    p._kill = function(lookup) {
                        var a = this._props,
                            p, i;
                        for (p in this._beziers) {
                            if (p in lookup) {
                                delete this._beziers[p];
                                delete this._func[p];
                                i = a.length;
                                while (--i > -1) {
                                    if (a[i] === p) {
                                        a.splice(i, 1);
                                    }
                                }
                            }
                        }
                        a = this._autoRotate;
                        if (a) {
                            i = a.length;
                            while (--i > -1) {
                                if (lookup[a[i][2]]) {
                                    a.splice(i, 1);
                                }
                            }
                        }
                        return this._super._kill.call(this, lookup);
                    };

                }());














                /*
                 * ----------------------------------------------------------------
                 * CSSPlugin
                 * ----------------------------------------------------------------
                 */
                _gsScope._gsDefine("plugins.CSSPlugin", ["plugins.TweenPlugin", "TweenLite"], function(TweenPlugin, TweenLite) {

                    /** @constructor **/
                    var CSSPlugin = function() {
                            TweenPlugin.call(this, "css");
                            this._overwriteProps.length = 0;
                            this.setRatio = CSSPlugin.prototype.setRatio; //speed optimization (avoid prototype lookup on this "hot" method)
                        },
                        _globals = _gsScope._gsDefine.globals,
                        _hasPriority, //turns true whenever a CSSPropTween instance is created that has a priority other than 0. This helps us discern whether or not we should spend the time organizing the linked list or not after a CSSPlugin's _onInitTween() method is called.
                        _suffixMap, //we set this in _onInitTween() each time as a way to have a persistent variable we can use in other methods like _parse() without having to pass it around as a parameter and we keep _parse() decoupled from a particular CSSPlugin instance
                        _cs, //computed style (we store this in a shared variable to conserve memory and make minification tighter
                        _overwriteProps, //alias to the currently instantiating CSSPlugin's _overwriteProps array. We use this closure in order to avoid having to pass a reference around from method to method and aid in minification.
                        _specialProps = {},
                        p = CSSPlugin.prototype = new TweenPlugin("css");

                    p.constructor = CSSPlugin;
                    CSSPlugin.version = "1.20.0";
                    CSSPlugin.API = 2;
                    CSSPlugin.defaultTransformPerspective = 0;
                    CSSPlugin.defaultSkewType = "compensated";
                    CSSPlugin.defaultSmoothOrigin = true;
                    p = "px"; //we'll reuse the "p" variable to keep file size down
                    CSSPlugin.suffixMap = { top: p, right: p, bottom: p, left: p, width: p, height: p, fontSize: p, padding: p, margin: p, perspective: p, lineHeight: "" };


                    var _numExp = /(?:\-|\.|\b)(\d|\.|e\-)+/g,
                        _relNumExp = /(?:\d|\-\d|\.\d|\-\.\d|\+=\d|\-=\d|\+=.\d|\-=\.\d)+/g,
                        _valuesExp = /(?:\+=|\-=|\-|\b)[\d\-\.]+[a-zA-Z0-9]*(?:%|\b)/gi, //finds all the values that begin with numbers or += or -= and then a number. Includes suffixes. We use this to split complex values apart like "1px 5px 20px rgb(255,102,51)"
                        _NaNExp = /(?![+-]?\d*\.?\d+|[+-]|e[+-]\d+)[^0-9]/g, //also allows scientific notation and doesn't kill the leading -/+ in -= and +=
                        _suffixExp = /(?:\d|\-|\+|=|#|\.)*/g,
                        _opacityExp = /opacity *= *([^)]*)/i,
                        _opacityValExp = /opacity:([^;]*)/i,
                        _alphaFilterExp = /alpha\(opacity *=.+?\)/i,
                        _rgbhslExp = /^(rgb|hsl)/,
                        _capsExp = /([A-Z])/g,
                        _camelExp = /-([a-z])/gi,
                        _urlExp = /(^(?:url\(\"|url\())|(?:(\"\))$|\)$)/gi, //for pulling out urls from url(...) or url("...") strings (some browsers wrap urls in quotes, some don't when reporting things like backgroundImage)
                        _camelFunc = function(s, g) { return g.toUpperCase(); },
                        _horizExp = /(?:Left|Right|Width)/i,
                        _ieGetMatrixExp = /(M11|M12|M21|M22)=[\d\-\.e]+/gi,
                        _ieSetMatrixExp = /progid\:DXImageTransform\.Microsoft\.Matrix\(.+?\)/i,
                        _commasOutsideParenExp = /,(?=[^\)]*(?:\(|$))/gi, //finds any commas that are not within parenthesis
                        _complexExp = /[\s,\(]/i, //for testing a string to find if it has a space, comma, or open parenthesis (clues that it's a complex value)
                        _DEG2RAD = Math.PI / 180,
                        _RAD2DEG = 180 / Math.PI,
                        _forcePT = {},
                        _dummyElement = { style: {} },
                        _doc = _gsScope.document || { createElement: function() { return _dummyElement; } },
                        _createElement = function(type, ns) {
                            return _doc.createElementNS ? _doc.createElementNS(ns || "http://www.w3.org/1999/xhtml", type) : _doc.createElement(type);
                        },
                        _tempDiv = _createElement("div"),
                        _tempImg = _createElement("img"),
                        _internals = CSSPlugin._internals = { _specialProps: _specialProps }, //provides a hook to a few internal methods that we need to access from inside other plugins
                        _agent = (_gsScope.navigator || {}).userAgent || "",
                        _autoRound,
                        _reqSafariFix, //we won't apply the Safari transform fix until we actually come across a tween that affects a transform property (to maintain best performance).

                        _isSafari,
                        _isFirefox, //Firefox has a bug that causes 3D transformed elements to randomly disappear unless a repaint is forced after each update on each element.
                        _isSafariLT6, //Safari (and Android 4 which uses a flavor of Safari) has a bug that prevents changes to "top" and "left" properties from rendering properly if changed on the same frame as a transform UNLESS we set the element's WebkitBackfaceVisibility to hidden (weird, I know). Doing this for Android 3 and earlier seems to actually cause other problems, though (fun!)
                        _ieVers,
                        _supportsOpacity = (function() { //we set _isSafari, _ieVers, _isFirefox, and _supportsOpacity all in one function here to reduce file size slightly, especially in the minified version.
                            var i = _agent.indexOf("Android"),
                                a = _createElement("a");
                            _isSafari = (_agent.indexOf("Safari") !== -1 && _agent.indexOf("Chrome") === -1 && (i === -1 || parseFloat(_agent.substr(i + 8, 2)) > 3));
                            _isSafariLT6 = (_isSafari && (parseFloat(_agent.substr(_agent.indexOf("Version/") + 8, 2)) < 6));
                            _isFirefox = (_agent.indexOf("Firefox") !== -1);
                            if ((/MSIE ([0-9]{1,}[\.0-9]{0,})/).exec(_agent) || (/Trident\/.*rv:([0-9]{1,}[\.0-9]{0,})/).exec(_agent)) {
                                _ieVers = parseFloat(RegExp.$1);
                            }
                            if (!a) {
                                return false;
                            }
                            a.style.cssText = "top:1px;opacity:.55;";
                            return /^0.55/.test(a.style.opacity);
                        }()),
                        _getIEOpacity = function(v) {
                            return (_opacityExp.test(((typeof(v) === "string") ? v : (v.currentStyle ? v.currentStyle.filter : v.style.filter) || "")) ? (parseFloat(RegExp.$1) / 100) : 1);
                        },
                        _log = function(s) { //for logging messages, but in a way that won't throw errors in old versions of IE.
                            if (_gsScope.console) {
                                console.log(s);
                            }
                        },
                        _target, //when initting a CSSPlugin, we set this variable so that we can access it from within many other functions without having to pass it around as params
                        _index, //when initting a CSSPlugin, we set this variable so that we can access it from within many other functions without having to pass it around as params

                        _prefixCSS = "", //the non-camelCase vendor prefix like "-o-", "-moz-", "-ms-", or "-webkit-"
                        _prefix = "", //camelCase vendor prefix like "O", "ms", "Webkit", or "Moz".

                        // @private feed in a camelCase property name like "transform" and it will check to see if it is valid as-is or if it needs a vendor prefix. It returns the corrected camelCase property name (i.e. "WebkitTransform" or "MozTransform" or "transform" or null if no such property is found, like if the browser is IE8 or before, "transform" won't be found at all)
                        _checkPropPrefix = function(p, e) {
                            e = e || _tempDiv;
                            var s = e.style,
                                a, i;
                            if (s[p] !== undefined) {
                                return p;
                            }
                            p = p.charAt(0).toUpperCase() + p.substr(1);
                            a = ["O", "Moz", "ms", "Ms", "Webkit"];
                            i = 5;
                            while (--i > -1 && s[a[i] + p] === undefined) {}
                            if (i >= 0) {
                                _prefix = (i === 3) ? "ms" : a[i];
                                _prefixCSS = "-" + _prefix.toLowerCase() + "-";
                                return _prefix + p;
                            }
                            return null;
                        },

                        _getComputedStyle = _doc.defaultView ? _doc.defaultView.getComputedStyle : function() {},

                        /**
                         * @private Returns the css style for a particular property of an element. For example, to get whatever the current "left" css value for an element with an ID of "myElement", you could do:
                         * var currentLeft = CSSPlugin.getStyle( document.getElementById("myElement"), "left");
                         *
                         * @param {!Object} t Target element whose style property you want to query
                         * @param {!string} p Property name (like "left" or "top" or "marginTop", etc.)
                         * @param {Object=} cs Computed style object. This just provides a way to speed processing if you're going to get several properties on the same element in quick succession - you can reuse the result of the getComputedStyle() call.
                         * @param {boolean=} calc If true, the value will not be read directly from the element's "style" property (if it exists there), but instead the getComputedStyle() result will be used. This can be useful when you want to ensure that the browser itself is interpreting the value.
                         * @param {string=} dflt Default value that should be returned in the place of null, "none", "auto" or "auto auto".
                         * @return {?string} The current property value
                         */
                        _getStyle = CSSPlugin.getStyle = function(t, p, cs, calc, dflt) {
                            var rv;
                            if (!_supportsOpacity)
                                if (p === "opacity") { //several versions of IE don't use the standard "opacity" property - they use things like filter:alpha(opacity=50), so we parse that here.
                                    return _getIEOpacity(t);
                                }
                            if (!calc && t.style[p]) {
                                rv = t.style[p];
                            } else if ((cs = cs || _getComputedStyle(t))) {
                                rv = cs[p] || cs.getPropertyValue(p) || cs.getPropertyValue(p.replace(_capsExp, "-$1").toLowerCase());
                            } else if (t.currentStyle) {
                                rv = t.currentStyle[p];
                            }
                            return (dflt != null && (!rv || rv === "none" || rv === "auto" || rv === "auto auto")) ? dflt : rv;
                        },

                        /**
                         * @private Pass the target element, the property name, the numeric value, and the suffix (like "%", "em", "px", etc.) and it will spit back the equivalent pixel number.
                         * @param {!Object} t Target element
                         * @param {!string} p Property name (like "left", "top", "marginLeft", etc.)
                         * @param {!number} v Value
                         * @param {string=} sfx Suffix (like "px" or "%" or "em")
                         * @param {boolean=} recurse If true, the call is a recursive one. In some browsers (like IE7/8), occasionally the value isn't accurately reported initially, but if we run the function again it will take effect.
                         * @return {number} value in pixels
                         */
                        _convertToPixels = _internals.convertToPixels = function(t, p, v, sfx, recurse) {
                            if (sfx === "px" || (!sfx && p !== "lineHeight")) { return v; }
                            if (sfx === "auto" || !v) { return 0; }
                            var horiz = _horizExp.test(p),
                                node = t,
                                style = _tempDiv.style,
                                neg = (v < 0),
                                precise = (v === 1),
                                pix, cache, time;
                            if (neg) {
                                v = -v;
                            }
                            if (precise) {
                                v *= 100;
                            }
                            if (p === "lineHeight" && !sfx) { //special case of when a simple lineHeight (without a unit) is used. Set it to the value, read back the computed value, and then revert.
                                cache = _getComputedStyle(t).lineHeight;
                                t.style.lineHeight = v;
                                pix = parseFloat(_getComputedStyle(t).lineHeight);
                                t.style.lineHeight = cache;
                            } else if (sfx === "%" && p.indexOf("border") !== -1) {
                                pix = (v / 100) * (horiz ? t.clientWidth : t.clientHeight);
                            } else {
                                style.cssText = "border:0 solid red;position:" + _getStyle(t, "position") + ";line-height:0;";
                                if (sfx === "%" || !node.appendChild || sfx.charAt(0) === "v" || sfx === "rem") {
                                    node = t.parentNode || _doc.body;
                                    if (_getStyle(node, "display").indexOf("flex") !== -1) { //Edge and IE11 have a bug that causes offsetWidth to report as 0 if the container has display:flex and the child is position:relative. Switching to position: absolute solves it.
                                        style.position = "absolute";
                                    }
                                    cache = node._gsCache;
                                    time = TweenLite.ticker.frame;
                                    if (cache && horiz && cache.time === time) { //performance optimization: we record the width of elements along with the ticker frame so that we can quickly get it again on the same tick (seems relatively safe to assume it wouldn't change on the same tick)
                                        return cache.width * v / 100;
                                    }
                                    style[(horiz ? "width" : "height")] = v + sfx;
                                } else {
                                    style[(horiz ? "borderLeftWidth" : "borderTopWidth")] = v + sfx;
                                }
                                node.appendChild(_tempDiv);
                                pix = parseFloat(_tempDiv[(horiz ? "offsetWidth" : "offsetHeight")]);
                                node.removeChild(_tempDiv);
                                if (horiz && sfx === "%" && CSSPlugin.cacheWidths !== false) {
                                    cache = node._gsCache = node._gsCache || {};
                                    cache.time = time;
                                    cache.width = pix / v * 100;
                                }
                                if (pix === 0 && !recurse) {
                                    pix = _convertToPixels(t, p, v, sfx, true);
                                }
                            }
                            if (precise) {
                                pix /= 100;
                            }
                            return neg ? -pix : pix;
                        },
                        _calculateOffset = _internals.calculateOffset = function(t, p, cs) { //for figuring out "top" or "left" in px when it's "auto". We need to factor in margin with the offsetLeft/offsetTop
                            if (_getStyle(t, "position", cs) !== "absolute") { return 0; }
                            var dim = ((p === "left") ? "Left" : "Top"),
                                v = _getStyle(t, "margin" + dim, cs);
                            return t["offset" + dim] - (_convertToPixels(t, p, parseFloat(v), v.replace(_suffixExp, "")) || 0);
                        },

                        // @private returns at object containing ALL of the style properties in camelCase and their associated values.
                        _getAllStyles = function(t, cs) {
                            var s = {},
                                i, tr, p;
                            if ((cs = cs || _getComputedStyle(t, null))) {
                                if ((i = cs.length)) {
                                    while (--i > -1) {
                                        p = cs[i];
                                        if (p.indexOf("-transform") === -1 || _transformPropCSS === p) { //Some webkit browsers duplicate transform values, one non-prefixed and one prefixed ("transform" and "WebkitTransform"), so we must weed out the extra one here.
                                            s[p.replace(_camelExp, _camelFunc)] = cs.getPropertyValue(p);
                                        }
                                    }
                                } else { //some browsers behave differently - cs.length is always 0, so we must do a for...in loop.
                                    for (i in cs) {
                                        if (i.indexOf("Transform") === -1 || _transformProp === i) { //Some webkit browsers duplicate transform values, one non-prefixed and one prefixed ("transform" and "WebkitTransform"), so we must weed out the extra one here.
                                            s[i] = cs[i];
                                        }
                                    }
                                }
                            } else if ((cs = t.currentStyle || t.style)) {
                                for (i in cs) {
                                    if (typeof(i) === "string" && s[i] === undefined) {
                                        s[i.replace(_camelExp, _camelFunc)] = cs[i];
                                    }
                                }
                            }
                            if (!_supportsOpacity) {
                                s.opacity = _getIEOpacity(t);
                            }
                            tr = _getTransform(t, cs, false);
                            s.rotation = tr.rotation;
                            s.skewX = tr.skewX;
                            s.scaleX = tr.scaleX;
                            s.scaleY = tr.scaleY;
                            s.x = tr.x;
                            s.y = tr.y;
                            if (_supports3D) {
                                s.z = tr.z;
                                s.rotationX = tr.rotationX;
                                s.rotationY = tr.rotationY;
                                s.scaleZ = tr.scaleZ;
                            }
                            if (s.filters) {
                                delete s.filters;
                            }
                            return s;
                        },

                        // @private analyzes two style objects (as returned by _getAllStyles()) and only looks for differences between them that contain tweenable values (like a number or color). It returns an object with a "difs" property which refers to an object containing only those isolated properties and values for tweening, and a "firstMPT" property which refers to the first MiniPropTween instance in a linked list that recorded all the starting values of the different properties so that we can revert to them at the end or beginning of the tween - we don't want the cascading to get messed up. The forceLookup parameter is an optional generic object with properties that should be forced into the results - this is necessary for className tweens that are overwriting others because imagine a scenario where a rollover/rollout adds/removes a class and the user swipes the mouse over the target SUPER fast, thus nothing actually changed yet and the subsequent comparison of the properties would indicate they match (especially when px rounding is taken into consideration), thus no tweening is necessary even though it SHOULD tween and remove those properties after the tween (otherwise the inline styles will contaminate things). See the className SpecialProp code for details.
                        _cssDif = function(t, s1, s2, vars, forceLookup) {
                            var difs = {},
                                style = t.style,
                                val, p, mpt;
                            for (p in s2) {
                                if (p !== "cssText")
                                    if (p !== "length")
                                        if (isNaN(p))
                                            if (s1[p] !== (val = s2[p]) || (forceLookup && forceLookup[p]))
                                                if (p.indexOf("Origin") === -1)
                                                    if (typeof(val) === "number" || typeof(val) === "string") {
                                                        difs[p] = (val === "auto" && (p === "left" || p === "top")) ? _calculateOffset(t, p) : ((val === "" || val === "auto" || val === "none") && typeof(s1[p]) === "string" && s1[p].replace(_NaNExp, "") !== "") ? 0 : val; //if the ending value is defaulting ("" or "auto"), we check the starting value and if it can be parsed into a number (a string which could have a suffix too, like 700px), then we swap in 0 for "" or "auto" so that things actually tween.
                                                        if (style[p] !== undefined) { //for className tweens, we must remember which properties already existed inline - the ones that didn't should be removed when the tween isn't in progress because they were only introduced to facilitate the transition between classes.
                                                            mpt = new MiniPropTween(style, p, style[p], mpt);
                                                        }
                                                    }
                            }
                            if (vars) {
                                for (p in vars) { //copy properties (except className)
                                    if (p !== "className") {
                                        difs[p] = vars[p];
                                    }
                                }
                            }
                            return { difs: difs, firstMPT: mpt };
                        },
                        _dimensions = { width: ["Left", "Right"], height: ["Top", "Bottom"] },
                        _margins = ["marginLeft", "marginRight", "marginTop", "marginBottom"],

                        /**
                         * @private Gets the width or height of an element
                         * @param {!Object} t Target element
                         * @param {!string} p Property name ("width" or "height")
                         * @param {Object=} cs Computed style object (if one exists). Just a speed optimization.
                         * @return {number} Dimension (in pixels)
                         */
                        _getDimension = function(t, p, cs) {
                            if ((t.nodeName + "").toLowerCase() === "svg") { //Chrome no longer supports offsetWidth/offsetHeight on SVG elements.
                                return (cs || _getComputedStyle(t))[p] || 0;
                            } else if (t.getCTM && _isSVG(t)) {
                                return t.getBBox()[p] || 0;
                            }
                            var v = parseFloat((p === "width") ? t.offsetWidth : t.offsetHeight),
                                a = _dimensions[p],
                                i = a.length;
                            cs = cs || _getComputedStyle(t, null);
                            while (--i > -1) {
                                v -= parseFloat(_getStyle(t, "padding" + a[i], cs, true)) || 0;
                                v -= parseFloat(_getStyle(t, "border" + a[i] + "Width", cs, true)) || 0;
                            }
                            return v;
                        },

                        // @private Parses position-related complex strings like "top left" or "50px 10px" or "70% 20%", etc. which are used for things like transformOrigin or backgroundPosition. Optionally decorates a supplied object (recObj) with the following properties: "ox" (offsetX), "oy" (offsetY), "oxp" (if true, "ox" is a percentage not a pixel value), and "oxy" (if true, "oy" is a percentage not a pixel value)
                        _parsePosition = function(v, recObj) {
                            if (v === "contain" || v === "auto" || v === "auto auto") { //note: Firefox uses "auto auto" as default whereas Chrome uses "auto".
                                return v + " ";
                            }
                            if (v == null || v === "") {
                                v = "0 0";
                            }
                            var a = v.split(" "),
                                x = (v.indexOf("left") !== -1) ? "0%" : (v.indexOf("right") !== -1) ? "100%" : a[0],
                                y = (v.indexOf("top") !== -1) ? "0%" : (v.indexOf("bottom") !== -1) ? "100%" : a[1],
                                i;
                            if (a.length > 3 && !recObj) { //multiple positions
                                a = v.split(", ").join(",").split(",");
                                v = [];
                                for (i = 0; i < a.length; i++) {
                                    v.push(_parsePosition(a[i]));
                                }
                                return v.join(",");
                            }
                            if (y == null) {
                                y = (x === "center") ? "50%" : "0";
                            } else if (y === "center") {
                                y = "50%";
                            }
                            if (x === "center" || (isNaN(parseFloat(x)) && (x + "").indexOf("=") === -1)) { //remember, the user could flip-flop the values and say "bottom center" or "center bottom", etc. "center" is ambiguous because it could be used to describe horizontal or vertical, hence the isNaN(). If there's an "=" sign in the value, it's relative.
                                x = "50%";
                            }
                            v = x + " " + y + ((a.length > 2) ? " " + a[2] : "");
                            if (recObj) {
                                recObj.oxp = (x.indexOf("%") !== -1);
                                recObj.oyp = (y.indexOf("%") !== -1);
                                recObj.oxr = (x.charAt(1) === "=");
                                recObj.oyr = (y.charAt(1) === "=");
                                recObj.ox = parseFloat(x.replace(_NaNExp, ""));
                                recObj.oy = parseFloat(y.replace(_NaNExp, ""));
                                recObj.v = v;
                            }
                            return recObj || v;
                        },

                        /**
                         * @private Takes an ending value (typically a string, but can be a number) and a starting value and returns the change between the two, looking for relative value indicators like += and -= and it also ignores suffixes (but make sure the ending value starts with a number or +=/-= and that the starting value is a NUMBER!)
                         * @param {(number|string)} e End value which is typically a string, but could be a number
                         * @param {(number|string)} b Beginning value which is typically a string but could be a number
                         * @return {number} Amount of change between the beginning and ending values (relative values that have a "+=" or "-=" are recognized)
                         */
                        _parseChange = function(e, b) {
                            if (typeof(e) === "function") {
                                e = e(_index, _target);
                            }
                            return (typeof(e) === "string" && e.charAt(1) === "=") ? parseInt(e.charAt(0) + "1", 10) * parseFloat(e.substr(2)) : (parseFloat(e) - parseFloat(b)) || 0;
                        },

                        /**
                         * @private Takes a value and a default number, checks if the value is relative, null, or numeric and spits back a normalized number accordingly. Primarily used in the _parseTransform() function.
                         * @param {Object} v Value to be parsed
                         * @param {!number} d Default value (which is also used for relative calculations if "+=" or "-=" is found in the first parameter)
                         * @return {number} Parsed value
                         */
                        _parseVal = function(v, d) {
                            if (typeof(v) === "function") {
                                v = v(_index, _target);
                            }
                            return (v == null) ? d : (typeof(v) === "string" && v.charAt(1) === "=") ? parseInt(v.charAt(0) + "1", 10) * parseFloat(v.substr(2)) + d : parseFloat(v) || 0;
                        },

                        /**
                         * @private Translates strings like "40deg" or "40" or 40rad" or "+=40deg" or "270_short" or "-90_cw" or "+=45_ccw" to a numeric radian angle. Of course a starting/default value must be fed in too so that relative values can be calculated properly.
                         * @param {Object} v Value to be parsed
                         * @param {!number} d Default value (which is also used for relative calculations if "+=" or "-=" is found in the first parameter)
                         * @param {string=} p property name for directionalEnd (optional - only used when the parsed value is directional ("_short", "_cw", or "_ccw" suffix). We need a way to store the uncompensated value so that at the end of the tween, we set it to exactly what was requested with no directional compensation). Property name would be "rotation", "rotationX", or "rotationY"
                         * @param {Object=} directionalEnd An object that will store the raw end values for directional angles ("_short", "_cw", or "_ccw" suffix). We need a way to store the uncompensated value so that at the end of the tween, we set it to exactly what was requested with no directional compensation.
                         * @return {number} parsed angle in radians
                         */
                        _parseAngle = function(v, d, p, directionalEnd) {
                            var min = 0.000001,
                                cap, split, dif, result, isRelative;
                            if (typeof(v) === "function") {
                                v = v(_index, _target);
                            }
                            if (v == null) {
                                result = d;
                            } else if (typeof(v) === "number") {
                                result = v;
                            } else {
                                cap = 360;
                                split = v.split("_");
                                isRelative = (v.charAt(1) === "=");
                                dif = (isRelative ? parseInt(v.charAt(0) + "1", 10) * parseFloat(split[0].substr(2)) : parseFloat(split[0])) * ((v.indexOf("rad") === -1) ? 1 : _RAD2DEG) - (isRelative ? 0 : d);
                                if (split.length) {
                                    if (directionalEnd) {
                                        directionalEnd[p] = d + dif;
                                    }
                                    if (v.indexOf("short") !== -1) {
                                        dif = dif % cap;
                                        if (dif !== dif % (cap / 2)) {
                                            dif = (dif < 0) ? dif + cap : dif - cap;
                                        }
                                    }
                                    if (v.indexOf("_cw") !== -1 && dif < 0) {
                                        dif = ((dif + cap * 9999999999) % cap) - ((dif / cap) | 0) * cap;
                                    } else if (v.indexOf("ccw") !== -1 && dif > 0) {
                                        dif = ((dif - cap * 9999999999) % cap) - ((dif / cap) | 0) * cap;
                                    }
                                }
                                result = d + dif;
                            }
                            if (result < min && result > -min) {
                                result = 0;
                            }
                            return result;
                        },

                        _colorLookup = {
                            aqua: [0, 255, 255],
                            lime: [0, 255, 0],
                            silver: [192, 192, 192],
                            black: [0, 0, 0],
                            maroon: [128, 0, 0],
                            teal: [0, 128, 128],
                            blue: [0, 0, 255],
                            navy: [0, 0, 128],
                            white: [255, 255, 255],
                            fuchsia: [255, 0, 255],
                            olive: [128, 128, 0],
                            yellow: [255, 255, 0],
                            orange: [255, 165, 0],
                            gray: [128, 128, 128],
                            purple: [128, 0, 128],
                            green: [0, 128, 0],
                            red: [255, 0, 0],
                            pink: [255, 192, 203],
                            cyan: [0, 255, 255],
                            transparent: [255, 255, 255, 0]
                        },

                        _hue = function(h, m1, m2) {
                            h = (h < 0) ? h + 1 : (h > 1) ? h - 1 : h;
                            return ((((h * 6 < 1) ? m1 + (m2 - m1) * h * 6 : (h < 0.5) ? m2 : (h * 3 < 2) ? m1 + (m2 - m1) * (2 / 3 - h) * 6 : m1) * 255) + 0.5) | 0;
                        },

                        /**
                         * @private Parses a color (like #9F0, #FF9900, rgb(255,51,153) or hsl(108, 50%, 10%)) into an array with 3 elements for red, green, and blue or if toHSL parameter is true, it will populate the array with hue, saturation, and lightness values. If a relative value is found in an hsl() or hsla() string, it will preserve those relative prefixes and all the values in the array will be strings instead of numbers (in all other cases it will be populated with numbers).
                         * @param {(string|number)} v The value the should be parsed which could be a string like #9F0 or rgb(255,102,51) or rgba(255,0,0,0.5) or it could be a number like 0xFF00CC or even a named color like red, blue, purple, etc.
                         * @param {(boolean)} toHSL If true, an hsl() or hsla() value will be returned instead of rgb() or rgba()
                         * @return {Array.<number>} An array containing red, green, and blue (and optionally alpha) in that order, or if the toHSL parameter was true, the array will contain hue, saturation and lightness (and optionally alpha) in that order. Always numbers unless there's a relative prefix found in an hsl() or hsla() string and toHSL is true.
                         */
                        _parseColor = CSSPlugin.parseColor = function(v, toHSL) {
                            var a, r, g, b, h, s, l, max, min, d, wasHSL;
                            if (!v) {
                                a = _colorLookup.black;
                            } else if (typeof(v) === "number") {
                                a = [v >> 16, (v >> 8) & 255, v & 255];
                            } else {
                                if (v.charAt(v.length - 1) === ",") { //sometimes a trailing comma is included and we should chop it off (typically from a comma-delimited list of values like a textShadow:"2px 2px 2px blue, 5px 5px 5px rgb(255,0,0)" - in this example "blue," has a trailing comma. We could strip it out inside parseComplex() but we'd need to do it to the beginning and ending values plus it wouldn't provide protection from other potential scenarios like if the user passes in a similar value.
                                    v = v.substr(0, v.length - 1);
                                }
                                if (_colorLookup[v]) {
                                    a = _colorLookup[v];
                                } else if (v.charAt(0) === "#") {
                                    if (v.length === 4) { //for shorthand like #9F0
                                        r = v.charAt(1);
                                        g = v.charAt(2);
                                        b = v.charAt(3);
                                        v = "#" + r + r + g + g + b + b;
                                    }
                                    v = parseInt(v.substr(1), 16);
                                    a = [v >> 16, (v >> 8) & 255, v & 255];
                                } else if (v.substr(0, 3) === "hsl") {
                                    a = wasHSL = v.match(_numExp);
                                    if (!toHSL) {
                                        h = (Number(a[0]) % 360) / 360;
                                        s = Number(a[1]) / 100;
                                        l = Number(a[2]) / 100;
                                        g = (l <= 0.5) ? l * (s + 1) : l + s - l * s;
                                        r = l * 2 - g;
                                        if (a.length > 3) {
                                            a[3] = Number(v[3]);
                                        }
                                        a[0] = _hue(h + 1 / 3, r, g);
                                        a[1] = _hue(h, r, g);
                                        a[2] = _hue(h - 1 / 3, r, g);
                                    } else if (v.indexOf("=") !== -1) { //if relative values are found, just return the raw strings with the relative prefixes in place.
                                        return v.match(_relNumExp);
                                    }
                                } else {
                                    a = v.match(_numExp) || _colorLookup.transparent;
                                }
                                a[0] = Number(a[0]);
                                a[1] = Number(a[1]);
                                a[2] = Number(a[2]);
                                if (a.length > 3) {
                                    a[3] = Number(a[3]);
                                }
                            }
                            if (toHSL && !wasHSL) {
                                r = a[0] / 255;
                                g = a[1] / 255;
                                b = a[2] / 255;
                                max = Math.max(r, g, b);
                                min = Math.min(r, g, b);
                                l = (max + min) / 2;
                                if (max === min) {
                                    h = s = 0;
                                } else {
                                    d = max - min;
                                    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
                                    h = (max === r) ? (g - b) / d + (g < b ? 6 : 0) : (max === g) ? (b - r) / d + 2 : (r - g) / d + 4;
                                    h *= 60;
                                }
                                a[0] = (h + 0.5) | 0;
                                a[1] = (s * 100 + 0.5) | 0;
                                a[2] = (l * 100 + 0.5) | 0;
                            }
                            return a;
                        },
                        _formatColors = function(s, toHSL) {
                            var colors = s.match(_colorExp) || [],
                                charIndex = 0,
                                parsed = "",
                                i, color, temp;
                            if (!colors.length) {
                                return s;
                            }
                            for (i = 0; i < colors.length; i++) {
                                color = colors[i];
                                temp = s.substr(charIndex, s.indexOf(color, charIndex) - charIndex);
                                charIndex += temp.length + color.length;
                                color = _parseColor(color, toHSL);
                                if (color.length === 3) {
                                    color.push(1);
                                }
                                parsed += temp + (toHSL ? "hsla(" + color[0] + "," + color[1] + "%," + color[2] + "%," + color[3] : "rgba(" + color.join(",")) + ")";
                            }
                            return parsed + s.substr(charIndex);
                        },
                        _colorExp = "(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3}){1,2}\\b"; //we'll dynamically build this Regular Expression to conserve file size. After building it, it will be able to find rgb(), rgba(), # (hexadecimal), and named color values like red, blue, purple, etc.

                    for (p in _colorLookup) {
                        _colorExp += "|" + p + "\\b";
                    }
                    _colorExp = new RegExp(_colorExp + ")", "gi");

                    CSSPlugin.colorStringFilter = function(a) {
                        var combined = a[0] + " " + a[1],
                            toHSL;
                        if (_colorExp.test(combined)) {
                            toHSL = (combined.indexOf("hsl(") !== -1 || combined.indexOf("hsla(") !== -1);
                            a[0] = _formatColors(a[0], toHSL);
                            a[1] = _formatColors(a[1], toHSL);
                        }
                        _colorExp.lastIndex = 0;
                    };

                    if (!TweenLite.defaultStringFilter) {
                        TweenLite.defaultStringFilter = CSSPlugin.colorStringFilter;
                    }

                    /**
                     * @private Returns a formatter function that handles taking a string (or number in some cases) and returning a consistently formatted one in terms of delimiters, quantity of values, etc. For example, we may get boxShadow values defined as "0px red" or "0px 0px 10px rgb(255,0,0)" or "0px 0px 20px 20px #F00" and we need to ensure that what we get back is described with 4 numbers and a color. This allows us to feed it into the _parseComplex() method and split the values up appropriately. The neat thing about this _getFormatter() function is that the dflt defines a pattern as well as a default, so for example, _getFormatter("0px 0px 0px 0px #777", true) not only sets the default as 0px for all distances and #777 for the color, but also sets the pattern such that 4 numbers and a color will always get returned.
                     * @param {!string} dflt The default value and pattern to follow. So "0px 0px 0px 0px #777" will ensure that 4 numbers and a color will always get returned.
                     * @param {boolean=} clr If true, the values should be searched for color-related data. For example, boxShadow values typically contain a color whereas borderRadius don't.
                     * @param {boolean=} collapsible If true, the value is a top/left/right/bottom style one that acts like margin or padding, where if only one value is received, it's used for all 4; if 2 are received, the first is duplicated for 3rd (bottom) and the 2nd is duplicated for the 4th spot (left), etc.
                     * @return {Function} formatter function
                     */
                    var _getFormatter = function(dflt, clr, collapsible, multi) {
                            if (dflt == null) {
                                return function(v) { return v; };
                            }
                            var dColor = clr ? (dflt.match(_colorExp) || [""])[0] : "",
                                dVals = dflt.split(dColor).join("").match(_valuesExp) || [],
                                pfx = dflt.substr(0, dflt.indexOf(dVals[0])),
                                sfx = (dflt.charAt(dflt.length - 1) === ")") ? ")" : "",
                                delim = (dflt.indexOf(" ") !== -1) ? " " : ",",
                                numVals = dVals.length,
                                dSfx = (numVals > 0) ? dVals[0].replace(_numExp, "") : "",
                                formatter;
                            if (!numVals) {
                                return function(v) { return v; };
                            }
                            if (clr) {
                                formatter = function(v) {
                                    var color, vals, i, a;
                                    if (typeof(v) === "number") {
                                        v += dSfx;
                                    } else if (multi && _commasOutsideParenExp.test(v)) {
                                        a = v.replace(_commasOutsideParenExp, "|").split("|");
                                        for (i = 0; i < a.length; i++) {
                                            a[i] = formatter(a[i]);
                                        }
                                        return a.join(",");
                                    }
                                    color = (v.match(_colorExp) || [dColor])[0];
                                    vals = v.split(color).join("").match(_valuesExp) || [];
                                    i = vals.length;
                                    if (numVals > i--) {
                                        while (++i < numVals) {
                                            vals[i] = collapsible ? vals[(((i - 1) / 2) | 0)] : dVals[i];
                                        }
                                    }
                                    return pfx + vals.join(delim) + delim + color + sfx + (v.indexOf("inset") !== -1 ? " inset" : "");
                                };
                                return formatter;

                            }
                            formatter = function(v) {
                                var vals, a, i;
                                if (typeof(v) === "number") {
                                    v += dSfx;
                                } else if (multi && _commasOutsideParenExp.test(v)) {
                                    a = v.replace(_commasOutsideParenExp, "|").split("|");
                                    for (i = 0; i < a.length; i++) {
                                        a[i] = formatter(a[i]);
                                    }
                                    return a.join(",");
                                }
                                vals = v.match(_valuesExp) || [];
                                i = vals.length;
                                if (numVals > i--) {
                                    while (++i < numVals) {
                                        vals[i] = collapsible ? vals[(((i - 1) / 2) | 0)] : dVals[i];
                                    }
                                }
                                return pfx + vals.join(delim) + sfx;
                            };
                            return formatter;
                        },

                        /**
                         * @private returns a formatter function that's used for edge-related values like marginTop, marginLeft, paddingBottom, paddingRight, etc. Just pass a comma-delimited list of property names related to the edges.
                         * @param {!string} props a comma-delimited list of property names in order from top to left, like "marginTop,marginRight,marginBottom,marginLeft"
                         * @return {Function} a formatter function
                         */
                        _getEdgeParser = function(props) {
                            props = props.split(",");
                            return function(t, e, p, cssp, pt, plugin, vars) {
                                var a = (e + "").split(" "),
                                    i;
                                vars = {};
                                for (i = 0; i < 4; i++) {
                                    vars[props[i]] = a[i] = a[i] || a[(((i - 1) / 2) >> 0)];
                                }
                                return cssp.parse(t, vars, pt, plugin);
                            };
                        },

                        // @private used when other plugins must tween values first, like BezierPlugin or ThrowPropsPlugin, etc. That plugin's setRatio() gets called first so that the values are updated, and then we loop through the MiniPropTweens which handle copying the values into their appropriate slots so that they can then be applied correctly in the main CSSPlugin setRatio() method. Remember, we typically create a proxy object that has a bunch of uniquely-named properties that we feed to the sub-plugin and it does its magic normally, and then we must interpret those values and apply them to the css because often numbers must get combined/concatenated, suffixes added, etc. to work with css, like boxShadow could have 4 values plus a color.
                        _setPluginRatio = _internals._setPluginRatio = function(v) {
                            this.plugin.setRatio(v);
                            var d = this.data,
                                proxy = d.proxy,
                                mpt = d.firstMPT,
                                min = 0.000001,
                                val, pt, i, str, p;
                            while (mpt) {
                                val = proxy[mpt.v];
                                if (mpt.r) {
                                    val = Math.round(val);
                                } else if (val < min && val > -min) {
                                    val = 0;
                                }
                                mpt.t[mpt.p] = val;
                                mpt = mpt._next;
                            }
                            if (d.autoRotate) {
                                d.autoRotate.rotation = d.mod ? d.mod(proxy.rotation, this.t) : proxy.rotation; //special case for ModifyPlugin to hook into an auto-rotating bezier
                            }
                            //at the end, we must set the CSSPropTween's "e" (end) value dynamically here because that's what is used in the final setRatio() method. Same for "b" at the beginning.
                            if (v === 1 || v === 0) {
                                mpt = d.firstMPT;
                                p = (v === 1) ? "e" : "b";
                                while (mpt) {
                                    pt = mpt.t;
                                    if (!pt.type) {
                                        pt[p] = pt.s + pt.xs0;
                                    } else if (pt.type === 1) {
                                        str = pt.xs0 + pt.s + pt.xs1;
                                        for (i = 1; i < pt.l; i++) {
                                            str += pt["xn" + i] + pt["xs" + (i + 1)];
                                        }
                                        pt[p] = str;
                                    }
                                    mpt = mpt._next;
                                }
                            }
                        },

                        /**
                         * @private @constructor Used by a few SpecialProps to hold important values for proxies. For example, _parseToProxy() creates a MiniPropTween instance for each property that must get tweened on the proxy, and we record the original property name as well as the unique one we create for the proxy, plus whether or not the value needs to be rounded plus the original value.
                         * @param {!Object} t target object whose property we're tweening (often a CSSPropTween)
                         * @param {!string} p property name
                         * @param {(number|string|object)} v value
                         * @param {MiniPropTween=} next next MiniPropTween in the linked list
                         * @param {boolean=} r if true, the tweened value should be rounded to the nearest integer
                         */
                        MiniPropTween = function(t, p, v, next, r) {
                            this.t = t;
                            this.p = p;
                            this.v = v;
                            this.r = r;
                            if (next) {
                                next._prev = this;
                                this._next = next;
                            }
                        },

                        /**
                         * @private Most other plugins (like BezierPlugin and ThrowPropsPlugin and others) can only tween numeric values, but CSSPlugin must accommodate special values that have a bunch of extra data (like a suffix or strings between numeric values, etc.). For example, boxShadow has values like "10px 10px 20px 30px rgb(255,0,0)" which would utterly confuse other plugins. This method allows us to split that data apart and grab only the numeric data and attach it to uniquely-named properties of a generic proxy object ({}) so that we can feed that to virtually any plugin to have the numbers tweened. However, we must also keep track of which properties from the proxy go with which CSSPropTween values and instances. So we create a linked list of MiniPropTweens. Each one records a target (the original CSSPropTween), property (like "s" or "xn1" or "xn2") that we're tweening and the unique property name that was used for the proxy (like "boxShadow_xn1" and "boxShadow_xn2") and whether or not they need to be rounded. That way, in the _setPluginRatio() method we can simply copy the values over from the proxy to the CSSPropTween instance(s). Then, when the main CSSPlugin setRatio() method runs and applies the CSSPropTween values accordingly, they're updated nicely. So the external plugin tweens the numbers, _setPluginRatio() copies them over, and setRatio() acts normally, applying css-specific values to the element.
                         * This method returns an object that has the following properties:
                         *  - proxy: a generic object containing the starting values for all the properties that will be tweened by the external plugin.  This is what we feed to the external _onInitTween() as the target
                         *  - end: a generic object containing the ending values for all the properties that will be tweened by the external plugin. This is what we feed to the external plugin's _onInitTween() as the destination values
                         *  - firstMPT: the first MiniPropTween in the linked list
                         *  - pt: the first CSSPropTween in the linked list that was created when parsing. If shallow is true, this linked list will NOT attach to the one passed into the _parseToProxy() as the "pt" (4th) parameter.
                         * @param {!Object} t target object to be tweened
                         * @param {!(Object|string)} vars the object containing the information about the tweening values (typically the end/destination values) that should be parsed
                         * @param {!CSSPlugin} cssp The CSSPlugin instance
                         * @param {CSSPropTween=} pt the next CSSPropTween in the linked list
                         * @param {TweenPlugin=} plugin the external TweenPlugin instance that will be handling tweening the numeric values
                         * @param {boolean=} shallow if true, the resulting linked list from the parse will NOT be attached to the CSSPropTween that was passed in as the "pt" (4th) parameter.
                         * @return An object containing the following properties: proxy, end, firstMPT, and pt (see above for descriptions)
                         */
                        _parseToProxy = _internals._parseToProxy = function(t, vars, cssp, pt, plugin, shallow) {
                            var bpt = pt,
                                start = {},
                                end = {},
                                transform = cssp._transform,
                                oldForce = _forcePT,
                                i, p, xp, mpt, firstPT;
                            cssp._transform = null;
                            _forcePT = vars;
                            pt = firstPT = cssp.parse(t, vars, pt, plugin);
                            _forcePT = oldForce;
                            //break off from the linked list so the new ones are isolated.
                            if (shallow) {
                                cssp._transform = transform;
                                if (bpt) {
                                    bpt._prev = null;
                                    if (bpt._prev) {
                                        bpt._prev._next = null;
                                    }
                                }
                            }
                            while (pt && pt !== bpt) {
                                if (pt.type <= 1) {
                                    p = pt.p;
                                    end[p] = pt.s + pt.c;
                                    start[p] = pt.s;
                                    if (!shallow) {
                                        mpt = new MiniPropTween(pt, "s", p, mpt, pt.r);
                                        pt.c = 0;
                                    }
                                    if (pt.type === 1) {
                                        i = pt.l;
                                        while (--i > 0) {
                                            xp = "xn" + i;
                                            p = pt.p + "_" + xp;
                                            end[p] = pt.data[xp];
                                            start[p] = pt[xp];
                                            if (!shallow) {
                                                mpt = new MiniPropTween(pt, xp, p, mpt, pt.rxp[xp]);
                                            }
                                        }
                                    }
                                }
                                pt = pt._next;
                            }
                            return { proxy: start, end: end, firstMPT: mpt, pt: firstPT };
                        },



                        /**
                         * @constructor Each property that is tweened has at least one CSSPropTween associated with it. These instances store important information like the target, property, starting value, amount of change, etc. They can also optionally have a number of "extra" strings and numeric values named xs1, xn1, xs2, xn2, xs3, xn3, etc. where "s" indicates string and "n" indicates number. These can be pieced together in a complex-value tween (type:1) that has alternating types of data like a string, number, string, number, etc. For example, boxShadow could be "5px 5px 8px rgb(102, 102, 51)". In that value, there are 6 numbers that may need to tween and then pieced back together into a string again with spaces, suffixes, etc. xs0 is special in that it stores the suffix for standard (type:0) tweens, -OR- the first string (prefix) in a complex-value (type:1) CSSPropTween -OR- it can be the non-tweening value in a type:-1 CSSPropTween. We do this to conserve memory.
                         * CSSPropTweens have the following optional properties as well (not defined through the constructor):
                         *  - l: Length in terms of the number of extra properties that the CSSPropTween has (default: 0). For example, for a boxShadow we may need to tween 5 numbers in which case l would be 5; Keep in mind that the start/end values for the first number that's tweened are always stored in the s and c properties to conserve memory. All additional values thereafter are stored in xn1, xn2, etc.
                         *  - xfirst: The first instance of any sub-CSSPropTweens that are tweening properties of this instance. For example, we may split up a boxShadow tween so that there's a main CSSPropTween of type:1 that has various xs* and xn* values associated with the h-shadow, v-shadow, blur, color, etc. Then we spawn a CSSPropTween for each of those that has a higher priority and runs BEFORE the main CSSPropTween so that the values are all set by the time it needs to re-assemble them. The xfirst gives us an easy way to identify the first one in that chain which typically ends at the main one (because they're all prepende to the linked list)
                         *  - plugin: The TweenPlugin instance that will handle the tweening of any complex values. For example, sometimes we don't want to use normal subtweens (like xfirst refers to) to tween the values - we might want ThrowPropsPlugin or BezierPlugin some other plugin to do the actual tweening, so we create a plugin instance and store a reference here. We need this reference so that if we get a request to round values or disable a tween, we can pass along that request.
                         *  - data: Arbitrary data that needs to be stored with the CSSPropTween. Typically if we're going to have a plugin handle the tweening of a complex-value tween, we create a generic object that stores the END values that we're tweening to and the CSSPropTween's xs1, xs2, etc. have the starting values. We store that object as data. That way, we can simply pass that object to the plugin and use the CSSPropTween as the target.
                         *  - setRatio: Only used for type:2 tweens that require custom functionality. In this case, we call the CSSPropTween's setRatio() method and pass the ratio each time the tween updates. This isn't quite as efficient as doing things directly in the CSSPlugin's setRatio() method, but it's very convenient and flexible.
                         * @param {!Object} t Target object whose property will be tweened. Often a DOM element, but not always. It could be anything.
                         * @param {string} p Property to tween (name). For example, to tween element.width, p would be "width".
                         * @param {number} s Starting numeric value
                         * @param {number} c Change in numeric value over the course of the entire tween. For example, if element.width starts at 5 and should end at 100, c would be 95.
                         * @param {CSSPropTween=} next The next CSSPropTween in the linked list. If one is defined, we will define its _prev as the new instance, and the new instance's _next will be pointed at it.
                         * @param {number=} type The type of CSSPropTween where -1 = a non-tweening value, 0 = a standard simple tween, 1 = a complex value (like one that has multiple numbers in a comma- or space-delimited string like border:"1px solid red"), and 2 = one that uses a custom setRatio function that does all of the work of applying the values on each update.
                         * @param {string=} n Name of the property that should be used for overwriting purposes which is typically the same as p but not always. For example, we may need to create a subtween for the 2nd part of a "clip:rect(...)" tween in which case "p" might be xs1 but "n" is still "clip"
                         * @param {boolean=} r If true, the value(s) should be rounded
                         * @param {number=} pr Priority in the linked list order. Higher priority CSSPropTweens will be updated before lower priority ones. The default priority is 0.
                         * @param {string=} b Beginning value. We store this to ensure that it is EXACTLY what it was when the tween began without any risk of interpretation issues.
                         * @param {string=} e Ending value. We store this to ensure that it is EXACTLY what the user defined at the end of the tween without any risk of interpretation issues.
                         */
                        CSSPropTween = _internals.CSSPropTween = function(t, p, s, c, next, type, n, r, pr, b, e) {
                            this.t = t; //target
                            this.p = p; //property
                            this.s = s; //starting value
                            this.c = c; //change value
                            this.n = n || p; //name that this CSSPropTween should be associated to (usually the same as p, but not always - n is what overwriting looks at)
                            if (!(t instanceof CSSPropTween)) {
                                _overwriteProps.push(this.n);
                            }
                            this.r = r; //round (boolean)
                            this.type = type || 0; //0 = normal tween, -1 = non-tweening (in which case xs0 will be applied to the target's property, like tp.t[tp.p] = tp.xs0), 1 = complex-value SpecialProp, 2 = custom setRatio() that does all the work
                            if (pr) {
                                this.pr = pr;
                                _hasPriority = true;
                            }
                            this.b = (b === undefined) ? s : b;
                            this.e = (e === undefined) ? s + c : e;
                            if (next) {
                                this._next = next;
                                next._prev = this;
                            }
                        },

                        _addNonTweeningNumericPT = function(target, prop, start, end, next, overwriteProp) { //cleans up some code redundancies and helps minification. Just a fast way to add a NUMERIC non-tweening CSSPropTween
                            var pt = new CSSPropTween(target, prop, start, end - start, next, -1, overwriteProp);
                            pt.b = start;
                            pt.e = pt.xs0 = end;
                            return pt;
                        },

                        /**
                         * Takes a target, the beginning value and ending value (as strings) and parses them into a CSSPropTween (possibly with child CSSPropTweens) that accommodates multiple numbers, colors, comma-delimited values, etc. For example:
                         * sp.parseComplex(element, "boxShadow", "5px 10px 20px rgb(255,102,51)", "0px 0px 0px red", true, "0px 0px 0px rgb(0,0,0,0)", pt);
                         * It will walk through the beginning and ending values (which should be in the same format with the same number and type of values) and figure out which parts are numbers, what strings separate the numeric/tweenable values, and then create the CSSPropTweens accordingly. If a plugin is defined, no child CSSPropTweens will be created. Instead, the ending values will be stored in the "data" property of the returned CSSPropTween like: {s:-5, xn1:-10, xn2:-20, xn3:255, xn4:0, xn5:0} so that it can be fed to any other plugin and it'll be plain numeric tweens but the recomposition of the complex value will be handled inside CSSPlugin's setRatio().
                         * If a setRatio is defined, the type of the CSSPropTween will be set to 2 and recomposition of the values will be the responsibility of that method.
                         *
                         * @param {!Object} t Target whose property will be tweened
                         * @param {!string} p Property that will be tweened (its name, like "left" or "backgroundColor" or "boxShadow")
                         * @param {string} b Beginning value
                         * @param {string} e Ending value
                         * @param {boolean} clrs If true, the value could contain a color value like "rgb(255,0,0)" or "#F00" or "red". The default is false, so no colors will be recognized (a performance optimization)
                         * @param {(string|number|Object)} dflt The default beginning value that should be used if no valid beginning value is defined or if the number of values inside the complex beginning and ending values don't match
                         * @param {?CSSPropTween} pt CSSPropTween instance that is the current head of the linked list (we'll prepend to this).
                         * @param {number=} pr Priority in the linked list order. Higher priority properties will be updated before lower priority ones. The default priority is 0.
                         * @param {TweenPlugin=} plugin If a plugin should handle the tweening of extra properties, pass the plugin instance here. If one is defined, then NO subtweens will be created for any extra properties (the properties will be created - just not additional CSSPropTween instances to tween them) because the plugin is expected to do so. However, the end values WILL be populated in the "data" property, like {s:100, xn1:50, xn2:300}
                         * @param {function(number)=} setRatio If values should be set in a custom function instead of being pieced together in a type:1 (complex-value) CSSPropTween, define that custom function here.
                         * @return {CSSPropTween} The first CSSPropTween in the linked list which includes the new one(s) added by the parseComplex() call.
                         */
                        _parseComplex = CSSPlugin.parseComplex = function(t, p, b, e, clrs, dflt, pt, pr, plugin, setRatio) {
                            //DEBUG: _log("parseComplex: "+p+", b: "+b+", e: "+e);
                            b = b || dflt || "";
                            if (typeof(e) === "function") {
                                e = e(_index, _target);
                            }
                            pt = new CSSPropTween(t, p, 0, 0, pt, (setRatio ? 2 : 1), null, false, pr, b, e);
                            e += ""; //ensures it's a string
                            if (clrs && _colorExp.test(e + b)) { //if colors are found, normalize the formatting to rgba() or hsla().
                                e = [b, e];
                                CSSPlugin.colorStringFilter(e);
                                b = e[0];
                                e = e[1];
                            }
                            var ba = b.split(", ").join(",").split(" "), //beginning array
                                ea = e.split(", ").join(",").split(" "), //ending array
                                l = ba.length,
                                autoRound = (_autoRound !== false),
                                i, xi, ni, bv, ev, bnums, enums, bn, hasAlpha, temp, cv, str, useHSL;
                            if (e.indexOf(",") !== -1 || b.indexOf(",") !== -1) {
                                ba = ba.join(" ").replace(_commasOutsideParenExp, ", ").split(" ");
                                ea = ea.join(" ").replace(_commasOutsideParenExp, ", ").split(" ");
                                l = ba.length;
                            }
                            if (l !== ea.length) {
                                //DEBUG: _log("mismatched formatting detected on " + p + " (" + b + " vs " + e + ")");
                                ba = (dflt || "").split(" ");
                                l = ba.length;
                            }
                            pt.plugin = plugin;
                            pt.setRatio = setRatio;
                            _colorExp.lastIndex = 0;
                            for (i = 0; i < l; i++) {
                                bv = ba[i];
                                ev = ea[i];
                                bn = parseFloat(bv);
                                //if the value begins with a number (most common). It's fine if it has a suffix like px
                                if (bn || bn === 0) {
                                    pt.appendXtra("", bn, _parseChange(ev, bn), ev.replace(_relNumExp, ""), (autoRound && ev.indexOf("px") !== -1), true);

                                    //if the value is a color
                                } else if (clrs && _colorExp.test(bv)) {
                                    str = ev.indexOf(")") + 1;
                                    str = ")" + (str ? ev.substr(str) : ""); //if there's a comma or ) at the end, retain it.
                                    useHSL = (ev.indexOf("hsl") !== -1 && _supportsOpacity);
                                    temp = ev; //original string value so we can look for any prefix later.
                                    bv = _parseColor(bv, useHSL);
                                    ev = _parseColor(ev, useHSL);
                                    hasAlpha = (bv.length + ev.length > 6);
                                    if (hasAlpha && !_supportsOpacity && ev[3] === 0) { //older versions of IE don't support rgba(), so if the destination alpha is 0, just use "transparent" for the end color
                                        pt["xs" + pt.l] += pt.l ? " transparent" : "transparent";
                                        pt.e = pt.e.split(ea[i]).join("transparent");
                                    } else {
                                        if (!_supportsOpacity) { //old versions of IE don't support rgba().
                                            hasAlpha = false;
                                        }
                                        if (useHSL) {
                                            pt.appendXtra(temp.substr(0, temp.indexOf("hsl")) + (hasAlpha ? "hsla(" : "hsl("), bv[0], _parseChange(ev[0], bv[0]), ",", false, true)
                                                .appendXtra("", bv[1], _parseChange(ev[1], bv[1]), "%,", false)
                                                .appendXtra("", bv[2], _parseChange(ev[2], bv[2]), (hasAlpha ? "%," : "%" + str), false);
                                        } else {
                                            pt.appendXtra(temp.substr(0, temp.indexOf("rgb")) + (hasAlpha ? "rgba(" : "rgb("), bv[0], ev[0] - bv[0], ",", true, true)
                                                .appendXtra("", bv[1], ev[1] - bv[1], ",", true)
                                                .appendXtra("", bv[2], ev[2] - bv[2], (hasAlpha ? "," : str), true);
                                        }

                                        if (hasAlpha) {
                                            bv = (bv.length < 4) ? 1 : bv[3];
                                            pt.appendXtra("", bv, ((ev.length < 4) ? 1 : ev[3]) - bv, str, false);
                                        }
                                    }
                                    _colorExp.lastIndex = 0; //otherwise the test() on the RegExp could move the lastIndex and taint future results.

                                } else {
                                    bnums = bv.match(_numExp); //gets each group of numbers in the beginning value string and drops them into an array

                                    //if no number is found, treat it as a non-tweening value and just append the string to the current xs.
                                    if (!bnums) {
                                        pt["xs" + pt.l] += (pt.l || pt["xs" + pt.l]) ? " " + ev : ev;

                                        //loop through all the numbers that are found and construct the extra values on the pt.
                                    } else {
                                        enums = ev.match(_relNumExp); //get each group of numbers in the end value string and drop them into an array. We allow relative values too, like +=50 or -=.5
                                        if (!enums || enums.length !== bnums.length) {
                                            //DEBUG: _log("mismatched formatting detected on " + p + " (" + b + " vs " + e + ")");
                                            return pt;
                                        }
                                        ni = 0;
                                        for (xi = 0; xi < bnums.length; xi++) {
                                            cv = bnums[xi];
                                            temp = bv.indexOf(cv, ni);
                                            pt.appendXtra(bv.substr(ni, temp - ni), Number(cv), _parseChange(enums[xi], cv), "", (autoRound && bv.substr(temp + cv.length, 2) === "px"), (xi === 0));
                                            ni = temp + cv.length;
                                        }
                                        pt["xs" + pt.l] += bv.substr(ni);
                                    }
                                }
                            }
                            //if there are relative values ("+=" or "-=" prefix), we need to adjust the ending value to eliminate the prefixes and combine the values properly.
                            if (e.indexOf("=") !== -1)
                                if (pt.data) {
                                    str = pt.xs0 + pt.data.s;
                                    for (i = 1; i < pt.l; i++) {
                                        str += pt["xs" + i] + pt.data["xn" + i];
                                    }
                                    pt.e = str + pt["xs" + i];
                                }
                            if (!pt.l) {
                                pt.type = -1;
                                pt.xs0 = pt.e;
                            }
                            return pt.xfirst || pt;
                        },
                        i = 9;


                    p = CSSPropTween.prototype;
                    p.l = p.pr = 0; //length (number of extra properties like xn1, xn2, xn3, etc.
                    while (--i > 0) {
                        p["xn" + i] = 0;
                        p["xs" + i] = "";
                    }
                    p.xs0 = "";
                    p._next = p._prev = p.xfirst = p.data = p.plugin = p.setRatio = p.rxp = null;


                    /**
                     * Appends and extra tweening value to a CSSPropTween and automatically manages any prefix and suffix strings. The first extra value is stored in the s and c of the main CSSPropTween instance, but thereafter any extras are stored in the xn1, xn2, xn3, etc. The prefixes and suffixes are stored in the xs0, xs1, xs2, etc. properties. For example, if I walk through a clip value like "rect(10px, 5px, 0px, 20px)", the values would be stored like this:
                     * xs0:"rect(", s:10, xs1:"px, ", xn1:5, xs2:"px, ", xn2:0, xs3:"px, ", xn3:20, xn4:"px)"
                     * And they'd all get joined together when the CSSPlugin renders (in the setRatio() method).
                     * @param {string=} pfx Prefix (if any)
                     * @param {!number} s Starting value
                     * @param {!number} c Change in numeric value over the course of the entire tween. For example, if the start is 5 and the end is 100, the change would be 95.
                     * @param {string=} sfx Suffix (if any)
                     * @param {boolean=} r Round (if true).
                     * @param {boolean=} pad If true, this extra value should be separated by the previous one by a space. If there is no previous extra and pad is true, it will automatically drop the space.
                     * @return {CSSPropTween} returns itself so that multiple methods can be chained together.
                     */
                    p.appendXtra = function(pfx, s, c, sfx, r, pad) {
                        var pt = this,
                            l = pt.l;
                        pt["xs" + l] += (pad && (l || pt["xs" + l])) ? " " + pfx : pfx || "";
                        if (!c)
                            if (l !== 0 && !pt.plugin) { //typically we'll combine non-changing values right into the xs to optimize performance, but we don't combine them when there's a plugin that will be tweening the values because it may depend on the values being split apart, like for a bezier, if a value doesn't change between the first and second iteration but then it does on the 3rd, we'll run into trouble because there's no xn slot for that value!
                                pt["xs" + l] += s + (sfx || "");
                                return pt;
                            }
                        pt.l++;
                        pt.type = pt.setRatio ? 2 : 1;
                        pt["xs" + pt.l] = sfx || "";
                        if (l > 0) {
                            pt.data["xn" + l] = s + c;
                            pt.rxp["xn" + l] = r; //round extra property (we need to tap into this in the _parseToProxy() method)
                            pt["xn" + l] = s;
                            if (!pt.plugin) {
                                pt.xfirst = new CSSPropTween(pt, "xn" + l, s, c, pt.xfirst || pt, 0, pt.n, r, pt.pr);
                                pt.xfirst.xs0 = 0; //just to ensure that the property stays numeric which helps modern browsers speed up processing. Remember, in the setRatio() method, we do pt.t[pt.p] = val + pt.xs0 so if pt.xs0 is "" (the default), it'll cast the end value as a string. When a property is a number sometimes and a string sometimes, it prevents the compiler from locking in the data type, slowing things down slightly.
                            }
                            return pt;
                        }
                        pt.data = { s: s + c };
                        pt.rxp = {};
                        pt.s = s;
                        pt.c = c;
                        pt.r = r;
                        return pt;
                    };

                    /**
                     * @constructor A SpecialProp is basically a css property that needs to be treated in a non-standard way, like if it may contain a complex value like boxShadow:"5px 10px 15px rgb(255, 102, 51)" or if it is associated with another plugin like ThrowPropsPlugin or BezierPlugin. Every SpecialProp is associated with a particular property name like "boxShadow" or "throwProps" or "bezier" and it will intercept those values in the vars object that's passed to the CSSPlugin and handle them accordingly.
                     * @param {!string} p Property name (like "boxShadow" or "throwProps")
                     * @param {Object=} options An object containing any of the following configuration options:
                     *                      - defaultValue: the default value
                     *                      - parser: A function that should be called when the associated property name is found in the vars. This function should return a CSSPropTween instance and it should ensure that it is properly inserted into the linked list. It will receive 4 paramters: 1) The target, 2) The value defined in the vars, 3) The CSSPlugin instance (whose _firstPT should be used for the linked list), and 4) A computed style object if one was calculated (this is a speed optimization that allows retrieval of starting values quicker)
                     *                      - formatter: a function that formats any value received for this special property (for example, boxShadow could take "5px 5px red" and format it to "5px 5px 0px 0px red" so that both the beginning and ending values have a common order and quantity of values.)
                     *                      - prefix: if true, we'll determine whether or not this property requires a vendor prefix (like Webkit or Moz or ms or O)
                     *                      - color: set this to true if the value for this SpecialProp may contain color-related values like rgb(), rgba(), etc.
                     *                      - priority: priority in the linked list order. Higher priority SpecialProps will be updated before lower priority ones. The default priority is 0.
                     *                      - multi: if true, the formatter should accommodate a comma-delimited list of values, like boxShadow could have multiple boxShadows listed out.
                     *                      - collapsible: if true, the formatter should treat the value like it's a top/right/bottom/left value that could be collapsed, like "5px" would apply to all, "5px, 10px" would use 5px for top/bottom and 10px for right/left, etc.
                     *                      - keyword: a special keyword that can [optionally] be found inside the value (like "inset" for boxShadow). This allows us to validate beginning/ending values to make sure they match (if the keyword is found in one, it'll be added to the other for consistency by default).
                     */
                    var SpecialProp = function(p, options) {
                            options = options || {};
                            this.p = options.prefix ? _checkPropPrefix(p) || p : p;
                            _specialProps[p] = _specialProps[this.p] = this;
                            this.format = options.formatter || _getFormatter(options.defaultValue, options.color, options.collapsible, options.multi);
                            if (options.parser) {
                                this.parse = options.parser;
                            }
                            this.clrs = options.color;
                            this.multi = options.multi;
                            this.keyword = options.keyword;
                            this.dflt = options.defaultValue;
                            this.pr = options.priority || 0;
                        },

                        //shortcut for creating a new SpecialProp that can accept multiple properties as a comma-delimited list (helps minification). dflt can be an array for multiple values (we don't do a comma-delimited list because the default value may contain commas, like rect(0px,0px,0px,0px)). We attach this method to the SpecialProp class/object instead of using a private _createSpecialProp() method so that we can tap into it externally if necessary, like from another plugin.
                        _registerComplexSpecialProp = _internals._registerComplexSpecialProp = function(p, options, defaults) {
                            if (typeof(options) !== "object") {
                                options = { parser: defaults }; //to make backwards compatible with older versions of BezierPlugin and ThrowPropsPlugin
                            }
                            var a = p.split(","),
                                d = options.defaultValue,
                                i, temp;
                            defaults = defaults || [d];
                            for (i = 0; i < a.length; i++) {
                                options.prefix = (i === 0 && options.prefix);
                                options.defaultValue = defaults[i] || d;
                                temp = new SpecialProp(a[i], options);
                            }
                        },

                        //creates a placeholder special prop for a plugin so that the property gets caught the first time a tween of it is attempted, and at that time it makes the plugin register itself, thus taking over for all future tweens of that property. This allows us to not mandate that things load in a particular order and it also allows us to log() an error that informs the user when they attempt to tween an external plugin-related property without loading its .js file.
                        _registerPluginProp = _internals._registerPluginProp = function(p) {
                            if (!_specialProps[p]) {
                                var pluginName = p.charAt(0).toUpperCase() + p.substr(1) + "Plugin";
                                _registerComplexSpecialProp(p, {
                                    parser: function(t, e, p, cssp, pt, plugin, vars) {
                                        var pluginClass = _globals.com.greensock.plugins[pluginName];
                                        if (!pluginClass) {
                                            _log("Error: " + pluginName + " js file not loaded.");
                                            return pt;
                                        }
                                        pluginClass._cssRegister();
                                        return _specialProps[p].parse(t, e, p, cssp, pt, plugin, vars);
                                    }
                                });
                            }
                        };


                    p = SpecialProp.prototype;

                    /**
                     * Alias for _parseComplex() that automatically plugs in certain values for this SpecialProp, like its property name, whether or not colors should be sensed, the default value, and priority. It also looks for any keyword that the SpecialProp defines (like "inset" for boxShadow) and ensures that the beginning and ending values have the same number of values for SpecialProps where multi is true (like boxShadow and textShadow can have a comma-delimited list)
                     * @param {!Object} t target element
                     * @param {(string|number|object)} b beginning value
                     * @param {(string|number|object)} e ending (destination) value
                     * @param {CSSPropTween=} pt next CSSPropTween in the linked list
                     * @param {TweenPlugin=} plugin If another plugin will be tweening the complex value, that TweenPlugin instance goes here.
                     * @param {function=} setRatio If a custom setRatio() method should be used to handle this complex value, that goes here.
                     * @return {CSSPropTween=} First CSSPropTween in the linked list
                     */
                    p.parseComplex = function(t, b, e, pt, plugin, setRatio) {
                        var kwd = this.keyword,
                            i, ba, ea, l, bi, ei;
                        //if this SpecialProp's value can contain a comma-delimited list of values (like boxShadow or textShadow), we must parse them in a special way, and look for a keyword (like "inset" for boxShadow) and ensure that the beginning and ending BOTH have it if the end defines it as such. We also must ensure that there are an equal number of values specified (we can't tween 1 boxShadow to 3 for example)
                        if (this.multi)
                            if (_commasOutsideParenExp.test(e) || _commasOutsideParenExp.test(b)) {
                                ba = b.replace(_commasOutsideParenExp, "|").split("|");
                                ea = e.replace(_commasOutsideParenExp, "|").split("|");
                            } else if (kwd) {
                            ba = [b];
                            ea = [e];
                        }
                        if (ea) {
                            l = (ea.length > ba.length) ? ea.length : ba.length;
                            for (i = 0; i < l; i++) {
                                b = ba[i] = ba[i] || this.dflt;
                                e = ea[i] = ea[i] || this.dflt;
                                if (kwd) {
                                    bi = b.indexOf(kwd);
                                    ei = e.indexOf(kwd);
                                    if (bi !== ei) {
                                        if (ei === -1) { //if the keyword isn't in the end value, remove it from the beginning one.
                                            ba[i] = ba[i].split(kwd).join("");
                                        } else if (bi === -1) { //if the keyword isn't in the beginning, add it.
                                            ba[i] += " " + kwd;
                                        }
                                    }
                                }
                            }
                            b = ba.join(", ");
                            e = ea.join(", ");
                        }
                        return _parseComplex(t, this.p, b, e, this.clrs, this.dflt, pt, this.pr, plugin, setRatio);
                    };

                    /**
                     * Accepts a target and end value and spits back a CSSPropTween that has been inserted into the CSSPlugin's linked list and conforms with all the conventions we use internally, like type:-1, 0, 1, or 2, setting up any extra property tweens, priority, etc. For example, if we have a boxShadow SpecialProp and call:
                     * this._firstPT = sp.parse(element, "5px 10px 20px rgb(2550,102,51)", "boxShadow", this);
                     * It should figure out the starting value of the element's boxShadow, compare it to the provided end value and create all the necessary CSSPropTweens of the appropriate types to tween the boxShadow. The CSSPropTween that gets spit back should already be inserted into the linked list (the 4th parameter is the current head, so prepend to that).
                     * @param {!Object} t Target object whose property is being tweened
                     * @param {Object} e End value as provided in the vars object (typically a string, but not always - like a throwProps would be an object).
                     * @param {!string} p Property name
                     * @param {!CSSPlugin} cssp The CSSPlugin instance that should be associated with this tween.
                     * @param {?CSSPropTween} pt The CSSPropTween that is the current head of the linked list (we'll prepend to it)
                     * @param {TweenPlugin=} plugin If a plugin will be used to tween the parsed value, this is the plugin instance.
                     * @param {Object=} vars Original vars object that contains the data for parsing.
                     * @return {CSSPropTween} The first CSSPropTween in the linked list which includes the new one(s) added by the parse() call.
                     */
                    p.parse = function(t, e, p, cssp, pt, plugin, vars) {
                        return this.parseComplex(t.style, this.format(_getStyle(t, this.p, _cs, false, this.dflt)), this.format(e), pt, plugin);
                    };

                    /**
                     * Registers a special property that should be intercepted from any "css" objects defined in tweens. This allows you to handle them however you want without CSSPlugin doing it for you. The 2nd parameter should be a function that accepts 3 parameters:
                     *  1) Target object whose property should be tweened (typically a DOM element)
                     *  2) The end/destination value (could be a string, number, object, or whatever you want)
                     *  3) The tween instance (you probably don't need to worry about this, but it can be useful for looking up information like the duration)
                     *
                     * Then, your function should return a function which will be called each time the tween gets rendered, passing a numeric "ratio" parameter to your function that indicates the change factor (usually between 0 and 1). For example:
                     *
                     * CSSPlugin.registerSpecialProp("myCustomProp", function(target, value, tween) {
                     *      var start = target.style.width;
                     *      return function(ratio) {
                     *              target.style.width = (start + value * ratio) + "px";
                     *              console.log("set width to " + target.style.width);
                     *          }
                     * }, 0);
                     *
                     * Then, when I do this tween, it will trigger my special property:
                     *
                     * TweenLite.to(element, 1, {css:{myCustomProp:100}});
                     *
                     * In the example, of course, we're just changing the width, but you can do anything you want.
                     *
                     * @param {!string} name Property name (or comma-delimited list of property names) that should be intercepted and handled by your function. For example, if I define "myCustomProp", then it would handle that portion of the following tween: TweenLite.to(element, 1, {css:{myCustomProp:100}})
                     * @param {!function(Object, Object, Object, string):function(number)} onInitTween The function that will be called when a tween of this special property is performed. The function will receive 4 parameters: 1) Target object that should be tweened, 2) Value that was passed to the tween, 3) The tween instance itself (rarely used), and 4) The property name that's being tweened. Your function should return a function that should be called on every update of the tween. That function will receive a single parameter that is a "change factor" value (typically between 0 and 1) indicating the amount of change as a ratio. You can use this to determine how to set the values appropriately in your function.
                     * @param {number=} priority Priority that helps the engine determine the order in which to set the properties (default: 0). Higher priority properties will be updated before lower priority ones.
                     */
                    CSSPlugin.registerSpecialProp = function(name, onInitTween, priority) {
                        _registerComplexSpecialProp(name, {
                            parser: function(t, e, p, cssp, pt, plugin, vars) {
                                var rv = new CSSPropTween(t, p, 0, 0, pt, 2, p, false, priority);
                                rv.plugin = plugin;
                                rv.setRatio = onInitTween(t, e, cssp._tween, p);
                                return rv;
                            },
                            priority: priority
                        });
                    };






                    //transform-related methods and properties
                    CSSPlugin.useSVGTransformAttr = true; //Safari and Firefox both have some rendering bugs when applying CSS transforms to SVG elements, so default to using the "transform" attribute instead (users can override this).
                    var _transformProps = ("scaleX,scaleY,scaleZ,x,y,z,skewX,skewY,rotation,rotationX,rotationY,perspective,xPercent,yPercent").split(","),
                        _transformProp = _checkPropPrefix("transform"), //the Javascript (camelCase) transform property, like msTransform, WebkitTransform, MozTransform, or OTransform.
                        _transformPropCSS = _prefixCSS + "transform",
                        _transformOriginProp = _checkPropPrefix("transformOrigin"),
                        _supports3D = (_checkPropPrefix("perspective") !== null),
                        Transform = _internals.Transform = function() {
                            this.perspective = parseFloat(CSSPlugin.defaultTransformPerspective) || 0;
                            this.force3D = (CSSPlugin.defaultForce3D === false || !_supports3D) ? false : CSSPlugin.defaultForce3D || "auto";
                        },
                        _SVGElement = _gsScope.SVGElement,
                        _useSVGTransformAttr,
                        //Some browsers (like Firefox and IE) don't honor transform-origin properly in SVG elements, so we need to manually adjust the matrix accordingly. We feature detect here rather than always doing the conversion for certain browsers because they may fix the problem at some point in the future.

                        _createSVG = function(type, container, attributes) {
                            var element = _doc.createElementNS("http://www.w3.org/2000/svg", type),
                                reg = /([a-z])([A-Z])/g,
                                p;
                            for (p in attributes) {
                                element.setAttributeNS(null, p.replace(reg, "$1-$2").toLowerCase(), attributes[p]);
                            }
                            container.appendChild(element);
                            return element;
                        },
                        _docElement = _doc.documentElement || {},
                        _forceSVGTransformAttr = (function() {
                            //IE and Android stock don't support CSS transforms on SVG elements, so we must write them to the "transform" attribute. We populate this variable in the _parseTransform() method, and only if/when we come across an SVG element
                            var force = _ieVers || (/Android/i.test(_agent) && !_gsScope.chrome),
                                svg, rect, width;
                            if (_doc.createElementNS && !force) { //IE8 and earlier doesn't support SVG anyway
                                svg = _createSVG("svg", _docElement);
                                rect = _createSVG("rect", svg, { width: 100, height: 50, x: 100 });
                                width = rect.getBoundingClientRect().width;
                                rect.style[_transformOriginProp] = "50% 50%";
                                rect.style[_transformProp] = "scaleX(0.5)";
                                force = (width === rect.getBoundingClientRect().width && !(_isFirefox && _supports3D)); //note: Firefox fails the test even though it does support CSS transforms in 3D. Since we can't push 3D stuff into the transform attribute, we force Firefox to pass the test here (as long as it does truly support 3D).
                                _docElement.removeChild(svg);
                            }
                            return force;
                        })(),
                        _parseSVGOrigin = function(e, local, decoratee, absolute, smoothOrigin, skipRecord) {
                            var tm = e._gsTransform,
                                m = _getMatrix(e, true),
                                v, x, y, xOrigin, yOrigin, a, b, c, d, tx, ty, determinant, xOriginOld, yOriginOld;
                            if (tm) {
                                xOriginOld = tm.xOrigin; //record the original values before we alter them.
                                yOriginOld = tm.yOrigin;
                            }
                            if (!absolute || (v = absolute.split(" ")).length < 2) {
                                b = e.getBBox();
                                if (b.x === 0 && b.y === 0 && b.width + b.height === 0) { //some browsers (like Firefox) misreport the bounds if the element has zero width and height (it just assumes it's at x:0, y:0), thus we need to manually grab the position in that case.
                                    b = { x: parseFloat(e.hasAttribute("x") ? e.getAttribute("x") : e.hasAttribute("cx") ? e.getAttribute("cx") : 0) || 0, y: parseFloat(e.hasAttribute("y") ? e.getAttribute("y") : e.hasAttribute("cy") ? e.getAttribute("cy") : 0) || 0, width: 0, height: 0 };
                                }
                                local = _parsePosition(local).split(" ");
                                v = [(local[0].indexOf("%") !== -1 ? parseFloat(local[0]) / 100 * b.width : parseFloat(local[0])) + b.x,
                                    (local[1].indexOf("%") !== -1 ? parseFloat(local[1]) / 100 * b.height : parseFloat(local[1])) + b.y
                                ];
                            }
                            decoratee.xOrigin = xOrigin = parseFloat(v[0]);
                            decoratee.yOrigin = yOrigin = parseFloat(v[1]);
                            if (absolute && m !== _identity2DMatrix) { //if svgOrigin is being set, we must invert the matrix and determine where the absolute point is, factoring in the current transforms. Otherwise, the svgOrigin would be based on the element's non-transformed position on the canvas.
                                a = m[0];
                                b = m[1];
                                c = m[2];
                                d = m[3];
                                tx = m[4];
                                ty = m[5];
                                determinant = (a * d - b * c);
                                if (determinant) { //if it's zero (like if scaleX and scaleY are zero), skip it to avoid errors with dividing by zero.
                                    x = xOrigin * (d / determinant) + yOrigin * (-c / determinant) + ((c * ty - d * tx) / determinant);
                                    y = xOrigin * (-b / determinant) + yOrigin * (a / determinant) - ((a * ty - b * tx) / determinant);
                                    xOrigin = decoratee.xOrigin = v[0] = x;
                                    yOrigin = decoratee.yOrigin = v[1] = y;
                                }
                            }
                            if (tm) { //avoid jump when transformOrigin is changed - adjust the x/y values accordingly
                                if (skipRecord) {
                                    decoratee.xOffset = tm.xOffset;
                                    decoratee.yOffset = tm.yOffset;
                                    tm = decoratee;
                                }
                                if (smoothOrigin || (smoothOrigin !== false && CSSPlugin.defaultSmoothOrigin !== false)) {
                                    x = xOrigin - xOriginOld;
                                    y = yOrigin - yOriginOld;
                                    //originally, we simply adjusted the x and y values, but that would cause problems if, for example, you created a rotational tween part-way through an x/y tween. Managing the offset in a separate variable gives us ultimate flexibility.
                                    //tm.x -= x - (x * m[0] + y * m[2]);
                                    //tm.y -= y - (x * m[1] + y * m[3]);
                                    tm.xOffset += (x * m[0] + y * m[2]) - x;
                                    tm.yOffset += (x * m[1] + y * m[3]) - y;
                                } else {
                                    tm.xOffset = tm.yOffset = 0;
                                }
                            }
                            if (!skipRecord) {
                                e.setAttribute("data-svg-origin", v.join(" "));
                            }
                        },
                        _getBBoxHack = function(swapIfPossible) { //works around issues in some browsers (like Firefox) that don't correctly report getBBox() on SVG elements inside a <defs> element and/or <mask>. We try creating an SVG, adding it to the documentElement and toss the element in there so that it's definitely part of the rendering tree, then grab the bbox and if it works, we actually swap out the original getBBox() method for our own that does these extra steps whenever getBBox is needed. This helps ensure that performance is optimal (only do all these extra steps when absolutely necessary...most elements don't need it).
                            var svg = _createElement("svg", this.ownerSVGElement.getAttribute("xmlns") || "http://www.w3.org/2000/svg"),
                                oldParent = this.parentNode,
                                oldSibling = this.nextSibling,
                                oldCSS = this.style.cssText,
                                bbox;
                            _docElement.appendChild(svg);
                            svg.appendChild(this);
                            this.style.display = "block";
                            if (swapIfPossible) {
                                try {
                                    bbox = this.getBBox();
                                    this._originalGetBBox = this.getBBox;
                                    this.getBBox = _getBBoxHack;
                                } catch (e) {}
                            } else if (this._originalGetBBox) {
                                bbox = this._originalGetBBox();
                            }
                            if (oldSibling) {
                                oldParent.insertBefore(this, oldSibling);
                            } else {
                                oldParent.appendChild(this);
                            }
                            _docElement.removeChild(svg);
                            this.style.cssText = oldCSS;
                            return bbox;
                        },
                        _getBBox = function(e) {
                            try {
                                return e.getBBox(); //Firefox throws errors if you try calling getBBox() on an SVG element that's not rendered (like in a <symbol> or <defs>). https://bugzilla.mozilla.org/show_bug.cgi?id=612118
                            } catch (error) {
                                return _getBBoxHack.call(e, true);
                            }
                        },
                        _isSVG = function(e) { //reports if the element is an SVG on which getBBox() actually works
                            return !!(_SVGElement && e.getCTM && _getBBox(e) && (!e.parentNode || e.ownerSVGElement));
                        },
                        _identity2DMatrix = [1, 0, 0, 1, 0, 0],
                        _getMatrix = function(e, force2D) {
                            var tm = e._gsTransform || new Transform(),
                                rnd = 100000,
                                style = e.style,
                                isDefault, s, m, n, dec, none;
                            if (_transformProp) {
                                s = _getStyle(e, _transformPropCSS, null, true);
                            } else if (e.currentStyle) {
                                //for older versions of IE, we need to interpret the filter portion that is in the format: progid:DXImageTransform.Microsoft.Matrix(M11=6.123233995736766e-17, M12=-1, M21=1, M22=6.123233995736766e-17, sizingMethod='auto expand') Notice that we need to swap b and c compared to a normal matrix.
                                s = e.currentStyle.filter.match(_ieGetMatrixExp);
                                s = (s && s.length === 4) ? [s[0].substr(4), Number(s[2].substr(4)), Number(s[1].substr(4)), s[3].substr(4), (tm.x || 0), (tm.y || 0)].join(",") : "";
                            }
                            isDefault = (!s || s === "none" || s === "matrix(1, 0, 0, 1, 0, 0)");
                            if (_transformProp && ((none = (_getComputedStyle(e).display === "none")) || !e.parentNode)) {
                                if (none) { //browsers don't report transforms accurately unless the element is in the DOM and has a display value that's not "none". Firefox and Microsoft browsers have a partial bug where they'll report transforms even if display:none BUT not any percentage-based values like translate(-50%, 8px) will be reported as if it's translate(0, 8px).
                                    n = style.display;
                                    style.display = "block";
                                }
                                if (!e.parentNode) {
                                    dec = 1; //flag
                                    _docElement.appendChild(e);
                                }
                                s = _getStyle(e, _transformPropCSS, null, true);
                                isDefault = (!s || s === "none" || s === "matrix(1, 0, 0, 1, 0, 0)");
                                if (n) {
                                    style.display = n;
                                } else if (none) {
                                    _removeProp(style, "display");
                                }
                                if (dec) {
                                    _docElement.removeChild(e);
                                }
                            }
                            if (tm.svg || (e.getCTM && _isSVG(e))) {
                                if (isDefault && (style[_transformProp] + "").indexOf("matrix") !== -1) { //some browsers (like Chrome 40) don't correctly report transforms that are applied inline on an SVG element (they don't get included in the computed style), so we double-check here and accept matrix values
                                    s = style[_transformProp];
                                    isDefault = 0;
                                }
                                m = e.getAttribute("transform");
                                if (isDefault && m) {
                                    if (m.indexOf("matrix") !== -1) { //just in case there's a "transform" value specified as an attribute instead of CSS style. Accept either a matrix() or simple translate() value though.
                                        s = m;
                                        isDefault = 0;
                                    } else if (m.indexOf("translate") !== -1) {
                                        s = "matrix(1,0,0,1," + m.match(/(?:\-|\b)[\d\-\.e]+\b/gi).join(",") + ")";
                                        isDefault = 0;
                                    }
                                }
                            }
                            if (isDefault) {
                                return _identity2DMatrix;
                            }
                            //split the matrix values out into an array (m for matrix)
                            m = (s || "").match(_numExp) || [];
                            i = m.length;
                            while (--i > -1) {
                                n = Number(m[i]);
                                m[i] = (dec = n - (n |= 0)) ? ((dec * rnd + (dec < 0 ? -0.5 : 0.5)) | 0) / rnd + n : n; //convert strings to Numbers and round to 5 decimal places to avoid issues with tiny numbers. Roughly 20x faster than Number.toFixed(). We also must make sure to round before dividing so that values like 0.9999999999 become 1 to avoid glitches in browser rendering and interpretation of flipped/rotated 3D matrices. And don't just multiply the number by rnd, floor it, and then divide by rnd because the bitwise operations max out at a 32-bit signed integer, thus it could get clipped at a relatively low value (like 22,000.00000 for example).
                            }
                            return (force2D && m.length > 6) ? [m[0], m[1], m[4], m[5], m[12], m[13]] : m;
                        },

                        /**
                         * Parses the transform values for an element, returning an object with x, y, z, scaleX, scaleY, scaleZ, rotation, rotationX, rotationY, skewX, and skewY properties. Note: by default (for performance reasons), all skewing is combined into skewX and rotation but skewY still has a place in the transform object so that we can record how much of the skew is attributed to skewX vs skewY. Remember, a skewY of 10 looks the same as a rotation of 10 and skewX of -10.
                         * @param {!Object} t target element
                         * @param {Object=} cs computed style object (optional)
                         * @param {boolean=} rec if true, the transform values will be recorded to the target element's _gsTransform object, like target._gsTransform = {x:0, y:0, z:0, scaleX:1...}
                         * @param {boolean=} parse if true, we'll ignore any _gsTransform values that already exist on the element, and force a reparsing of the css (calculated style)
                         * @return {object} object containing all of the transform properties/values like {x:0, y:0, z:0, scaleX:1...}
                         */
                        _getTransform = _internals.getTransform = function(t, cs, rec, parse) {
                            if (t._gsTransform && rec && !parse) {
                                return t._gsTransform; //if the element already has a _gsTransform, use that. Note: some browsers don't accurately return the calculated style for the transform (particularly for SVG), so it's almost always safest to just use the values we've already applied rather than re-parsing things.
                            }
                            var tm = rec ? t._gsTransform || new Transform() : new Transform(),
                                invX = (tm.scaleX < 0), //in order to interpret things properly, we need to know if the user applied a negative scaleX previously so that we can adjust the rotation and skewX accordingly. Otherwise, if we always interpret a flipped matrix as affecting scaleY and the user only wants to tween the scaleX on multiple sequential tweens, it would keep the negative scaleY without that being the user's intent.
                                min = 0.00002,
                                rnd = 100000,
                                zOrigin = _supports3D ? parseFloat(_getStyle(t, _transformOriginProp, cs, false, "0 0 0").split(" ")[2]) || tm.zOrigin || 0 : 0,
                                defaultTransformPerspective = parseFloat(CSSPlugin.defaultTransformPerspective) || 0,
                                m, i, scaleX, scaleY, rotation, skewX;

                            tm.svg = !!(t.getCTM && _isSVG(t));
                            if (tm.svg) {
                                _parseSVGOrigin(t, _getStyle(t, _transformOriginProp, cs, false, "50% 50%") + "", tm, t.getAttribute("data-svg-origin"));
                                _useSVGTransformAttr = CSSPlugin.useSVGTransformAttr || _forceSVGTransformAttr;
                            }
                            m = _getMatrix(t);
                            if (m !== _identity2DMatrix) {

                                if (m.length === 16) {
                                    //we'll only look at these position-related 6 variables first because if x/y/z all match, it's relatively safe to assume we don't need to re-parse everything which risks losing important rotational information (like rotationX:180 plus rotationY:180 would look the same as rotation:180 - there's no way to know for sure which direction was taken based solely on the matrix3d() values)
                                    var a11 = m[0],
                                        a21 = m[1],
                                        a31 = m[2],
                                        a41 = m[3],
                                        a12 = m[4],
                                        a22 = m[5],
                                        a32 = m[6],
                                        a42 = m[7],
                                        a13 = m[8],
                                        a23 = m[9],
                                        a33 = m[10],
                                        a14 = m[12],
                                        a24 = m[13],
                                        a34 = m[14],
                                        a43 = m[11],
                                        angle = Math.atan2(a32, a33),
                                        t1, t2, t3, t4, cos, sin;
                                    //we manually compensate for non-zero z component of transformOrigin to work around bugs in Safari
                                    if (tm.zOrigin) {
                                        a34 = -tm.zOrigin;
                                        a14 = a13 * a34 - m[12];
                                        a24 = a23 * a34 - m[13];
                                        a34 = a33 * a34 + tm.zOrigin - m[14];
                                    }
                                    //note for possible future consolidation: rotationX: Math.atan2(a32, a33), rotationY: Math.atan2(-a31, Math.sqrt(a33 * a33 + a32 * a32)), rotation: Math.atan2(a21, a11), skew: Math.atan2(a12, a22). However, it doesn't seem to be quite as reliable as the full-on backwards rotation procedure.
                                    tm.rotationX = angle * _RAD2DEG;
                                    //rotationX
                                    if (angle) {
                                        cos = Math.cos(-angle);
                                        sin = Math.sin(-angle);
                                        t1 = a12 * cos + a13 * sin;
                                        t2 = a22 * cos + a23 * sin;
                                        t3 = a32 * cos + a33 * sin;
                                        a13 = a12 * -sin + a13 * cos;
                                        a23 = a22 * -sin + a23 * cos;
                                        a33 = a32 * -sin + a33 * cos;
                                        a43 = a42 * -sin + a43 * cos;
                                        a12 = t1;
                                        a22 = t2;
                                        a32 = t3;
                                    }
                                    //rotationY
                                    angle = Math.atan2(-a31, a33);
                                    tm.rotationY = angle * _RAD2DEG;
                                    if (angle) {
                                        cos = Math.cos(-angle);
                                        sin = Math.sin(-angle);
                                        t1 = a11 * cos - a13 * sin;
                                        t2 = a21 * cos - a23 * sin;
                                        t3 = a31 * cos - a33 * sin;
                                        a23 = a21 * sin + a23 * cos;
                                        a33 = a31 * sin + a33 * cos;
                                        a43 = a41 * sin + a43 * cos;
                                        a11 = t1;
                                        a21 = t2;
                                        a31 = t3;
                                    }
                                    //rotationZ
                                    angle = Math.atan2(a21, a11);
                                    tm.rotation = angle * _RAD2DEG;
                                    if (angle) {
                                        cos = Math.cos(angle);
                                        sin = Math.sin(angle);
                                        t1 = a11 * cos + a21 * sin;
                                        t2 = a12 * cos + a22 * sin;
                                        t3 = a13 * cos + a23 * sin;
                                        a21 = a21 * cos - a11 * sin;
                                        a22 = a22 * cos - a12 * sin;
                                        a23 = a23 * cos - a13 * sin;
                                        a11 = t1;
                                        a12 = t2;
                                        a13 = t3;
                                    }

                                    if (tm.rotationX && Math.abs(tm.rotationX) + Math.abs(tm.rotation) > 359.9) { //when rotationY is set, it will often be parsed as 180 degrees different than it should be, and rotationX and rotation both being 180 (it looks the same), so we adjust for that here.
                                        tm.rotationX = tm.rotation = 0;
                                        tm.rotationY = 180 - tm.rotationY;
                                    }

                                    //skewX
                                    angle = Math.atan2(a12, a22);

                                    //scales
                                    tm.scaleX = ((Math.sqrt(a11 * a11 + a21 * a21 + a31 * a31) * rnd + 0.5) | 0) / rnd;
                                    tm.scaleY = ((Math.sqrt(a22 * a22 + a32 * a32) * rnd + 0.5) | 0) / rnd;
                                    tm.scaleZ = ((Math.sqrt(a13 * a13 + a23 * a23 + a33 * a33) * rnd + 0.5) | 0) / rnd;
                                    a11 /= tm.scaleX;
                                    a12 /= tm.scaleY;
                                    a21 /= tm.scaleX;
                                    a22 /= tm.scaleY;
                                    if (Math.abs(angle) > min) {
                                        tm.skewX = angle * _RAD2DEG;
                                        a12 = 0; //unskews
                                        if (tm.skewType !== "simple") {
                                            tm.scaleY *= 1 / Math.cos(angle); //by default, we compensate the scale based on the skew so that the element maintains a similar proportion when skewed, so we have to alter the scaleY here accordingly to match the default (non-adjusted) skewing that CSS does (stretching more and more as it skews).
                                        }

                                    } else {
                                        tm.skewX = 0;
                                    }

                                    /* //for testing purposes
                                    var transform = "matrix3d(",
                                    	comma = ",",
                                    	zero = "0";
                                    a13 /= tm.scaleZ;
                                    a23 /= tm.scaleZ;
                                    a31 /= tm.scaleX;
                                    a32 /= tm.scaleY;
                                    a33 /= tm.scaleZ;
                                    transform += ((a11 < min && a11 > -min) ? zero : a11) + comma + ((a21 < min && a21 > -min) ? zero : a21) + comma + ((a31 < min && a31 > -min) ? zero : a31);
                                    transform += comma + ((a41 < min && a41 > -min) ? zero : a41) + comma + ((a12 < min && a12 > -min) ? zero : a12) + comma + ((a22 < min && a22 > -min) ? zero : a22);
                                    transform += comma + ((a32 < min && a32 > -min) ? zero : a32) + comma + ((a42 < min && a42 > -min) ? zero : a42) + comma + ((a13 < min && a13 > -min) ? zero : a13);
                                    transform += comma + ((a23 < min && a23 > -min) ? zero : a23) + comma + ((a33 < min && a33 > -min) ? zero : a33) + comma + ((a43 < min && a43 > -min) ? zero : a43) + comma;
                                    transform += a14 + comma + a24 + comma + a34 + comma + (tm.perspective ? (1 + (-a34 / tm.perspective)) : 1) + ")";
                                    console.log(transform);
                                    document.querySelector(".test").style[_transformProp] = transform;
                                    */

                                    tm.perspective = a43 ? 1 / ((a43 < 0) ? -a43 : a43) : 0;
                                    tm.x = a14;
                                    tm.y = a24;
                                    tm.z = a34;
                                    if (tm.svg) {
                                        tm.x -= tm.xOrigin - (tm.xOrigin * a11 - tm.yOrigin * a12);
                                        tm.y -= tm.yOrigin - (tm.yOrigin * a21 - tm.xOrigin * a22);
                                    }

                                } else if ((!_supports3D || parse || !m.length || tm.x !== m[4] || tm.y !== m[5] || (!tm.rotationX && !tm.rotationY))) { //sometimes a 6-element matrix is returned even when we performed 3D transforms, like if rotationX and rotationY are 180. In cases like this, we still need to honor the 3D transforms. If we just rely on the 2D info, it could affect how the data is interpreted, like scaleY might get set to -1 or rotation could get offset by 180 degrees. For example, do a TweenLite.to(element, 1, {css:{rotationX:180, rotationY:180}}) and then later, TweenLite.to(element, 1, {css:{rotationX:0}}) and without this conditional logic in place, it'd jump to a state of being unrotated when the 2nd tween starts. Then again, we need to honor the fact that the user COULD alter the transforms outside of CSSPlugin, like by manually applying new css, so we try to sense that by looking at x and y because if those changed, we know the changes were made outside CSSPlugin and we force a reinterpretation of the matrix values. Also, in Webkit browsers, if the element's "display" is "none", its calculated style value will always return empty, so if we've already recorded the values in the _gsTransform object, we'll just rely on those.
                                    var k = (m.length >= 6),
                                        a = k ? m[0] : 1,
                                        b = m[1] || 0,
                                        c = m[2] || 0,
                                        d = k ? m[3] : 1;
                                    tm.x = m[4] || 0;
                                    tm.y = m[5] || 0;
                                    scaleX = Math.sqrt(a * a + b * b);
                                    scaleY = Math.sqrt(d * d + c * c);
                                    rotation = (a || b) ? Math.atan2(b, a) * _RAD2DEG : tm.rotation || 0; //note: if scaleX is 0, we cannot accurately measure rotation. Same for skewX with a scaleY of 0. Therefore, we default to the previously recorded value (or zero if that doesn't exist).
                                    skewX = (c || d) ? Math.atan2(c, d) * _RAD2DEG + rotation : tm.skewX || 0;
                                    tm.scaleX = scaleX;
                                    tm.scaleY = scaleY;
                                    tm.rotation = rotation;
                                    tm.skewX = skewX;
                                    if (_supports3D) {
                                        tm.rotationX = tm.rotationY = tm.z = 0;
                                        tm.perspective = defaultTransformPerspective;
                                        tm.scaleZ = 1;
                                    }
                                    if (tm.svg) {
                                        tm.x -= tm.xOrigin - (tm.xOrigin * a + tm.yOrigin * c);
                                        tm.y -= tm.yOrigin - (tm.xOrigin * b + tm.yOrigin * d);
                                    }
                                }
                                if (Math.abs(tm.skewX) > 90 && Math.abs(tm.skewX) < 270) {
                                    if (invX) {
                                        tm.scaleX *= -1;
                                        tm.skewX += (tm.rotation <= 0) ? 180 : -180;
                                        tm.rotation += (tm.rotation <= 0) ? 180 : -180;
                                    } else {
                                        tm.scaleY *= -1;
                                        tm.skewX += (tm.skewX <= 0) ? 180 : -180;
                                    }
                                }
                                tm.zOrigin = zOrigin;
                                //some browsers have a hard time with very small values like 2.4492935982947064e-16 (notice the "e-" towards the end) and would render the object slightly off. So we round to 0 in these cases. The conditional logic here is faster than calling Math.abs(). Also, browsers tend to render a SLIGHTLY rotated object in a fuzzy way, so we need to snap to exactly 0 when appropriate.
                                for (i in tm) {
                                    if (tm[i] < min)
                                        if (tm[i] > -min) {
                                            tm[i] = 0;
                                        }
                                }
                            }
                            //DEBUG: _log("parsed rotation of " + t.getAttribute("id")+": "+(tm.rotationX)+", "+(tm.rotationY)+", "+(tm.rotation)+", scale: "+tm.scaleX+", "+tm.scaleY+", "+tm.scaleZ+", position: "+tm.x+", "+tm.y+", "+tm.z+", perspective: "+tm.perspective+ ", origin: "+ tm.xOrigin+ ","+ tm.yOrigin);
                            if (rec) {
                                t._gsTransform = tm; //record to the object's _gsTransform which we use so that tweens can control individual properties independently (we need all the properties to accurately recompose the matrix in the setRatio() method)
                                if (tm.svg) { //if we're supposed to apply transforms to the SVG element's "transform" attribute, make sure there aren't any CSS transforms applied or they'll override the attribute ones. Also clear the transform attribute if we're using CSS, just to be clean.
                                    if (_useSVGTransformAttr && t.style[_transformProp]) {
                                        TweenLite.delayedCall(0.001, function() { //if we apply this right away (before anything has rendered), we risk there being no transforms for a brief moment and it also interferes with adjusting the transformOrigin in a tween with immediateRender:true (it'd try reading the matrix and it wouldn't have the appropriate data in place because we just removed it).
                                            _removeProp(t.style, _transformProp);
                                        });
                                    } else if (!_useSVGTransformAttr && t.getAttribute("transform")) {
                                        TweenLite.delayedCall(0.001, function() {
                                            t.removeAttribute("transform");
                                        });
                                    }
                                }
                            }
                            return tm;
                        },

                        //for setting 2D transforms in IE6, IE7, and IE8 (must use a "filter" to emulate the behavior of modern day browser transforms)
                        _setIETransformRatio = function(v) {
                            var t = this.data, //refers to the element's _gsTransform object
                                ang = -t.rotation * _DEG2RAD,
                                skew = ang + t.skewX * _DEG2RAD,
                                rnd = 100000,
                                a = ((Math.cos(ang) * t.scaleX * rnd) | 0) / rnd,
                                b = ((Math.sin(ang) * t.scaleX * rnd) | 0) / rnd,
                                c = ((Math.sin(skew) * -t.scaleY * rnd) | 0) / rnd,
                                d = ((Math.cos(skew) * t.scaleY * rnd) | 0) / rnd,
                                style = this.t.style,
                                cs = this.t.currentStyle,
                                filters, val;
                            if (!cs) {
                                return;
                            }
                            val = b; //just for swapping the variables an inverting them (reused "val" to avoid creating another variable in memory). IE's filter matrix uses a non-standard matrix configuration (angle goes the opposite way, and b and c are reversed and inverted)
                            b = -c;
                            c = -val;
                            filters = cs.filter;
                            style.filter = ""; //remove filters so that we can accurately measure offsetWidth/offsetHeight
                            var w = this.t.offsetWidth,
                                h = this.t.offsetHeight,
                                clip = (cs.position !== "absolute"),
                                m = "progid:DXImageTransform.Microsoft.Matrix(M11=" + a + ", M12=" + b + ", M21=" + c + ", M22=" + d,
                                ox = t.x + (w * t.xPercent / 100),
                                oy = t.y + (h * t.yPercent / 100),
                                dx, dy;

                            //if transformOrigin is being used, adjust the offset x and y
                            if (t.ox != null) {
                                dx = ((t.oxp) ? w * t.ox * 0.01 : t.ox) - w / 2;
                                dy = ((t.oyp) ? h * t.oy * 0.01 : t.oy) - h / 2;
                                ox += dx - (dx * a + dy * b);
                                oy += dy - (dx * c + dy * d);
                            }

                            if (!clip) {
                                m += ", sizingMethod='auto expand')";
                            } else {
                                dx = (w / 2);
                                dy = (h / 2);
                                //translate to ensure that transformations occur around the correct origin (default is center).
                                m += ", Dx=" + (dx - (dx * a + dy * b) + ox) + ", Dy=" + (dy - (dx * c + dy * d) + oy) + ")";
                            }
                            if (filters.indexOf("DXImageTransform.Microsoft.Matrix(") !== -1) {
                                style.filter = filters.replace(_ieSetMatrixExp, m);
                            } else {
                                style.filter = m + " " + filters; //we must always put the transform/matrix FIRST (before alpha(opacity=xx)) to avoid an IE bug that slices part of the object when rotation is applied with alpha.
                            }

                            //at the end or beginning of the tween, if the matrix is normal (1, 0, 0, 1) and opacity is 100 (or doesn't exist), remove the filter to improve browser performance.
                            if (v === 0 || v === 1)
                                if (a === 1)
                                    if (b === 0)
                                        if (c === 0)
                                            if (d === 1)
                                                if (!clip || m.indexOf("Dx=0, Dy=0") !== -1)
                                                    if (!_opacityExp.test(filters) || parseFloat(RegExp.$1) === 100)
                                                        if (filters.indexOf("gradient(" && filters.indexOf("Alpha")) === -1) {
                                                            style.removeAttribute("filter");
                                                        }

                                                        //we must set the margins AFTER applying the filter in order to avoid some bugs in IE8 that could (in rare scenarios) cause them to be ignored intermittently (vibration).
                            if (!clip) {
                                var mult = (_ieVers < 8) ? 1 : -1, //in Internet Explorer 7 and before, the box model is broken, causing the browser to treat the width/height of the actual rotated filtered image as the width/height of the box itself, but Microsoft corrected that in IE8. We must use a negative offset in IE8 on the right/bottom
                                    marg, prop, dif;
                                dx = t.ieOffsetX || 0;
                                dy = t.ieOffsetY || 0;
                                t.ieOffsetX = Math.round((w - ((a < 0 ? -a : a) * w + (b < 0 ? -b : b) * h)) / 2 + ox);
                                t.ieOffsetY = Math.round((h - ((d < 0 ? -d : d) * h + (c < 0 ? -c : c) * w)) / 2 + oy);
                                for (i = 0; i < 4; i++) {
                                    prop = _margins[i];
                                    marg = cs[prop];
                                    //we need to get the current margin in case it is being tweened separately (we want to respect that tween's changes)
                                    val = (marg.indexOf("px") !== -1) ? parseFloat(marg) : _convertToPixels(this.t, prop, parseFloat(marg), marg.replace(_suffixExp, "")) || 0;
                                    if (val !== t[prop]) {
                                        dif = (i < 2) ? -t.ieOffsetX : -t.ieOffsetY; //if another tween is controlling a margin, we cannot only apply the difference in the ieOffsets, so we essentially zero-out the dx and dy here in that case. We record the margin(s) later so that we can keep comparing them, making this code very flexible.
                                    } else {
                                        dif = (i < 2) ? dx - t.ieOffsetX : dy - t.ieOffsetY;
                                    }
                                    style[prop] = (t[prop] = Math.round(val - dif * ((i === 0 || i === 2) ? 1 : mult))) + "px";
                                }
                            }
                        },

                        /* translates a super small decimal to a string WITHOUT scientific notation
                        _safeDecimal = function(n) {
                        	var s = (n < 0 ? -n : n) + "",
                        		a = s.split("e-");
                        	return (n < 0 ? "-0." : "0.") + new Array(parseInt(a[1], 10) || 0).join("0") + a[0].split(".").join("");
                        },
                        */

                        _setTransformRatio = _internals.set3DTransformRatio = _internals.setTransformRatio = function(v) {
                            var t = this.data, //refers to the element's _gsTransform object
                                style = this.t.style,
                                angle = t.rotation,
                                rotationX = t.rotationX,
                                rotationY = t.rotationY,
                                sx = t.scaleX,
                                sy = t.scaleY,
                                sz = t.scaleZ,
                                x = t.x,
                                y = t.y,
                                z = t.z,
                                isSVG = t.svg,
                                perspective = t.perspective,
                                force3D = t.force3D,
                                skewY = t.skewY,
                                skewX = t.skewX,
                                t1, a11, a12, a13, a21, a22, a23, a31, a32, a33, a41, a42, a43,
                                zOrigin, min, cos, sin, t2, transform, comma, zero, skew, rnd;
                            if (skewY) { //for performance reasons, we combine all skewing into the skewX and rotation values. Remember, a skewY of 10 degrees looks the same as a rotation of 10 degrees plus a skewX of 10 degrees.
                                skewX += skewY;
                                angle += skewY;
                            }

                            //check to see if we should render as 2D (and SVGs must use 2D when _useSVGTransformAttr is true)
                            if (((((v === 1 || v === 0) && force3D === "auto" && (this.tween._totalTime === this.tween._totalDuration || !this.tween._totalTime)) || !force3D) && !z && !perspective && !rotationY && !rotationX && sz === 1) || (_useSVGTransformAttr && isSVG) || !_supports3D) { //on the final render (which could be 0 for a from tween), if there are no 3D aspects, render in 2D to free up memory and improve performance especially on mobile devices. Check the tween's totalTime/totalDuration too in order to make sure it doesn't happen between repeats if it's a repeating tween.

                                //2D
                                if (angle || skewX || isSVG) {
                                    angle *= _DEG2RAD;
                                    skew = skewX * _DEG2RAD;
                                    rnd = 100000;
                                    a11 = Math.cos(angle) * sx;
                                    a21 = Math.sin(angle) * sx;
                                    a12 = Math.sin(angle - skew) * -sy;
                                    a22 = Math.cos(angle - skew) * sy;
                                    if (skew && t.skewType === "simple") { //by default, we compensate skewing on the other axis to make it look more natural, but you can set the skewType to "simple" to use the uncompensated skewing that CSS does
                                        t1 = Math.tan(skew - skewY * _DEG2RAD);
                                        t1 = Math.sqrt(1 + t1 * t1);
                                        a12 *= t1;
                                        a22 *= t1;
                                        if (skewY) {
                                            t1 = Math.tan(skewY * _DEG2RAD);
                                            t1 = Math.sqrt(1 + t1 * t1);
                                            a11 *= t1;
                                            a21 *= t1;
                                        }
                                    }
                                    if (isSVG) {
                                        x += t.xOrigin - (t.xOrigin * a11 + t.yOrigin * a12) + t.xOffset;
                                        y += t.yOrigin - (t.xOrigin * a21 + t.yOrigin * a22) + t.yOffset;
                                        if (_useSVGTransformAttr && (t.xPercent || t.yPercent)) { //The SVG spec doesn't support percentage-based translation in the "transform" attribute, so we merge it into the matrix to simulate it.
                                            min = this.t.getBBox();
                                            x += t.xPercent * 0.01 * min.width;
                                            y += t.yPercent * 0.01 * min.height;
                                        }
                                        min = 0.000001;
                                        if (x < min)
                                            if (x > -min) {
                                                x = 0;
                                            }
                                        if (y < min)
                                            if (y > -min) {
                                                y = 0;
                                            }
                                    }
                                    transform = (((a11 * rnd) | 0) / rnd) + "," + (((a21 * rnd) | 0) / rnd) + "," + (((a12 * rnd) | 0) / rnd) + "," + (((a22 * rnd) | 0) / rnd) + "," + x + "," + y + ")";
                                    if (isSVG && _useSVGTransformAttr) {
                                        this.t.setAttribute("transform", "matrix(" + transform);
                                    } else {
                                        //some browsers have a hard time with very small values like 2.4492935982947064e-16 (notice the "e-" towards the end) and would render the object slightly off. So we round to 5 decimal places.
                                        style[_transformProp] = ((t.xPercent || t.yPercent) ? "translate(" + t.xPercent + "%," + t.yPercent + "%) matrix(" : "matrix(") + transform;
                                    }
                                } else {
                                    style[_transformProp] = ((t.xPercent || t.yPercent) ? "translate(" + t.xPercent + "%," + t.yPercent + "%) matrix(" : "matrix(") + sx + ",0,0," + sy + "," + x + "," + y + ")";
                                }
                                return;

                            }
                            if (_isFirefox) { //Firefox has a bug (at least in v25) that causes it to render the transparent part of 32-bit PNG images as black when displayed inside an iframe and the 3D scale is very small and doesn't change sufficiently enough between renders (like if you use a Power4.easeInOut to scale from 0 to 1 where the beginning values only change a tiny amount to begin the tween before accelerating). In this case, we force the scale to be 0.00002 instead which is visually the same but works around the Firefox issue.
                                min = 0.0001;
                                if (sx < min && sx > -min) {
                                    sx = sz = 0.00002;
                                }
                                if (sy < min && sy > -min) {
                                    sy = sz = 0.00002;
                                }
                                if (perspective && !t.z && !t.rotationX && !t.rotationY) { //Firefox has a bug that causes elements to have an odd super-thin, broken/dotted black border on elements that have a perspective set but aren't utilizing 3D space (no rotationX, rotationY, or z).
                                    perspective = 0;
                                }
                            }
                            if (angle || skewX) {
                                angle *= _DEG2RAD;
                                cos = a11 = Math.cos(angle);
                                sin = a21 = Math.sin(angle);
                                if (skewX) {
                                    angle -= skewX * _DEG2RAD;
                                    cos = Math.cos(angle);
                                    sin = Math.sin(angle);
                                    if (t.skewType === "simple") { //by default, we compensate skewing on the other axis to make it look more natural, but you can set the skewType to "simple" to use the uncompensated skewing that CSS does
                                        t1 = Math.tan((skewX - skewY) * _DEG2RAD);
                                        t1 = Math.sqrt(1 + t1 * t1);
                                        cos *= t1;
                                        sin *= t1;
                                        if (t.skewY) {
                                            t1 = Math.tan(skewY * _DEG2RAD);
                                            t1 = Math.sqrt(1 + t1 * t1);
                                            a11 *= t1;
                                            a21 *= t1;
                                        }
                                    }
                                }
                                a12 = -sin;
                                a22 = cos;

                            } else if (!rotationY && !rotationX && sz === 1 && !perspective && !isSVG) { //if we're only translating and/or 2D scaling, this is faster...
                                style[_transformProp] = ((t.xPercent || t.yPercent) ? "translate(" + t.xPercent + "%," + t.yPercent + "%) translate3d(" : "translate3d(") + x + "px," + y + "px," + z + "px)" + ((sx !== 1 || sy !== 1) ? " scale(" + sx + "," + sy + ")" : "");
                                return;
                            } else {
                                a11 = a22 = 1;
                                a12 = a21 = 0;
                            }
                            // KEY  INDEX   AFFECTS a[row][column]
                            // a11  0       rotation, rotationY, scaleX
                            // a21  1       rotation, rotationY, scaleX
                            // a31  2       rotationY, scaleX
                            // a41  3       rotationY, scaleX
                            // a12  4       rotation, skewX, rotationX, scaleY
                            // a22  5       rotation, skewX, rotationX, scaleY
                            // a32  6       rotationX, scaleY
                            // a42  7       rotationX, scaleY
                            // a13  8       rotationY, rotationX, scaleZ
                            // a23  9       rotationY, rotationX, scaleZ
                            // a33  10      rotationY, rotationX, scaleZ
                            // a43  11      rotationY, rotationX, perspective, scaleZ
                            // a14  12      x, zOrigin, svgOrigin
                            // a24  13      y, zOrigin, svgOrigin
                            // a34  14      z, zOrigin
                            // a44  15
                            // rotation: Math.atan2(a21, a11)
                            // rotationY: Math.atan2(a13, a33) (or Math.atan2(a13, a11))
                            // rotationX: Math.atan2(a32, a33)
                            a33 = 1;
                            a13 = a23 = a31 = a32 = a41 = a42 = 0;
                            a43 = (perspective) ? -1 / perspective : 0;
                            zOrigin = t.zOrigin;
                            min = 0.000001; //threshold below which browsers use scientific notation which won't work.
                            comma = ",";
                            zero = "0";
                            angle = rotationY * _DEG2RAD;
                            if (angle) {
                                cos = Math.cos(angle);
                                sin = Math.sin(angle);
                                a31 = -sin;
                                a41 = a43 * -sin;
                                a13 = a11 * sin;
                                a23 = a21 * sin;
                                a33 = cos;
                                a43 *= cos;
                                a11 *= cos;
                                a21 *= cos;
                            }
                            angle = rotationX * _DEG2RAD;
                            if (angle) {
                                cos = Math.cos(angle);
                                sin = Math.sin(angle);
                                t1 = a12 * cos + a13 * sin;
                                t2 = a22 * cos + a23 * sin;
                                a32 = a33 * sin;
                                a42 = a43 * sin;
                                a13 = a12 * -sin + a13 * cos;
                                a23 = a22 * -sin + a23 * cos;
                                a33 = a33 * cos;
                                a43 = a43 * cos;
                                a12 = t1;
                                a22 = t2;
                            }
                            if (sz !== 1) {
                                a13 *= sz;
                                a23 *= sz;
                                a33 *= sz;
                                a43 *= sz;
                            }
                            if (sy !== 1) {
                                a12 *= sy;
                                a22 *= sy;
                                a32 *= sy;
                                a42 *= sy;
                            }
                            if (sx !== 1) {
                                a11 *= sx;
                                a21 *= sx;
                                a31 *= sx;
                                a41 *= sx;
                            }

                            if (zOrigin || isSVG) {
                                if (zOrigin) {
                                    x += a13 * -zOrigin;
                                    y += a23 * -zOrigin;
                                    z += a33 * -zOrigin + zOrigin;
                                }
                                if (isSVG) { //due to bugs in some browsers, we need to manage the transform-origin of SVG manually
                                    x += t.xOrigin - (t.xOrigin * a11 + t.yOrigin * a12) + t.xOffset;
                                    y += t.yOrigin - (t.xOrigin * a21 + t.yOrigin * a22) + t.yOffset;
                                }
                                if (x < min && x > -min) {
                                    x = zero;
                                }
                                if (y < min && y > -min) {
                                    y = zero;
                                }
                                if (z < min && z > -min) {
                                    z = 0; //don't use string because we calculate perspective later and need the number.
                                }
                            }

                            //optimized way of concatenating all the values into a string. If we do it all in one shot, it's slower because of the way browsers have to create temp strings and the way it affects memory. If we do it piece-by-piece with +=, it's a bit slower too. We found that doing it in these sized chunks works best overall:
                            transform = ((t.xPercent || t.yPercent) ? "translate(" + t.xPercent + "%," + t.yPercent + "%) matrix3d(" : "matrix3d(");
                            transform += ((a11 < min && a11 > -min) ? zero : a11) + comma + ((a21 < min && a21 > -min) ? zero : a21) + comma + ((a31 < min && a31 > -min) ? zero : a31);
                            transform += comma + ((a41 < min && a41 > -min) ? zero : a41) + comma + ((a12 < min && a12 > -min) ? zero : a12) + comma + ((a22 < min && a22 > -min) ? zero : a22);
                            if (rotationX || rotationY || sz !== 1) { //performance optimization (often there's no rotationX or rotationY, so we can skip these calculations)
                                transform += comma + ((a32 < min && a32 > -min) ? zero : a32) + comma + ((a42 < min && a42 > -min) ? zero : a42) + comma + ((a13 < min && a13 > -min) ? zero : a13);
                                transform += comma + ((a23 < min && a23 > -min) ? zero : a23) + comma + ((a33 < min && a33 > -min) ? zero : a33) + comma + ((a43 < min && a43 > -min) ? zero : a43) + comma;
                            } else {
                                transform += ",0,0,0,0,1,0,";
                            }
                            transform += x + comma + y + comma + z + comma + (perspective ? (1 + (-z / perspective)) : 1) + ")";

                            style[_transformProp] = transform;
                        };

                    p = Transform.prototype;
                    p.x = p.y = p.z = p.skewX = p.skewY = p.rotation = p.rotationX = p.rotationY = p.zOrigin = p.xPercent = p.yPercent = p.xOffset = p.yOffset = 0;
                    p.scaleX = p.scaleY = p.scaleZ = 1;

                    _registerComplexSpecialProp("transform,scale,scaleX,scaleY,scaleZ,x,y,z,rotation,rotationX,rotationY,rotationZ,skewX,skewY,shortRotation,shortRotationX,shortRotationY,shortRotationZ,transformOrigin,svgOrigin,transformPerspective,directionalRotation,parseTransform,force3D,skewType,xPercent,yPercent,smoothOrigin", {
                        parser: function(t, e, parsingProp, cssp, pt, plugin, vars) {
                            if (cssp._lastParsedTransform === vars) { return pt; } //only need to parse the transform once, and only if the browser supports it.
                            cssp._lastParsedTransform = vars;
                            var scaleFunc = (vars.scale && typeof(vars.scale) === "function") ? vars.scale : 0, //if there's a function-based "scale" value, swap in the resulting numeric value temporarily. Otherwise, if it's called for both scaleX and scaleY independently, they may not match (like if the function uses Math.random()).
                                swapFunc;
                            if (typeof(vars[parsingProp]) === "function") { //whatever property triggers the initial parsing might be a function-based value in which case it already got called in parse(), thus we don't want to call it again in here. The most efficient way to avoid this is to temporarily swap the value directly into the vars object, and then after we do all our parsing in this function, we'll swap it back again.
                                swapFunc = vars[parsingProp];
                                vars[parsingProp] = e;
                            }
                            if (scaleFunc) {
                                vars.scale = scaleFunc(_index, t);
                            }
                            var originalGSTransform = t._gsTransform,
                                style = t.style,
                                min = 0.000001,
                                i = _transformProps.length,
                                v = vars,
                                endRotations = {},
                                transformOriginString = "transformOrigin",
                                m1 = _getTransform(t, _cs, true, v.parseTransform),
                                orig = v.transform && ((typeof(v.transform) === "function") ? v.transform(_index, _target) : v.transform),
                                m2, copy, has3D, hasChange, dr, x, y, matrix, p;
                            m1.skewType = v.skewType || m1.skewType || CSSPlugin.defaultSkewType;
                            cssp._transform = m1;
                            if (orig && typeof(orig) === "string" && _transformProp) { //for values like transform:"rotate(60deg) scale(0.5, 0.8)"
                                copy = _tempDiv.style; //don't use the original target because it might be SVG in which case some browsers don't report computed style correctly.
                                copy[_transformProp] = orig;
                                copy.display = "block"; //if display is "none", the browser often refuses to report the transform properties correctly.
                                copy.position = "absolute";
                                _doc.body.appendChild(_tempDiv);
                                m2 = _getTransform(_tempDiv, null, false);
                                if (m1.skewType === "simple") { //the default _getTransform() reports the skewX/scaleY as if skewType is "compensated", thus we need to adjust that here if skewType is "simple".
                                    m2.scaleY *= Math.cos(m2.skewX * _DEG2RAD);
                                }
                                if (m1.svg) { //if it's an SVG element, x/y part of the matrix will be affected by whatever we use as the origin and the offsets, so compensate here...
                                    x = m1.xOrigin;
                                    y = m1.yOrigin;
                                    m2.x -= m1.xOffset;
                                    m2.y -= m1.yOffset;
                                    if (v.transformOrigin || v.svgOrigin) { //if this tween is altering the origin, we must factor that in here. The actual work of recording the transformOrigin values and setting up the PropTween is done later (still inside this function) so we cannot leave the changes intact here - we only want to update the x/y accordingly.
                                        orig = {};
                                        _parseSVGOrigin(t, _parsePosition(v.transformOrigin), orig, v.svgOrigin, v.smoothOrigin, true);
                                        x = orig.xOrigin;
                                        y = orig.yOrigin;
                                        m2.x -= orig.xOffset - m1.xOffset;
                                        m2.y -= orig.yOffset - m1.yOffset;
                                    }
                                    if (x || y) {
                                        matrix = _getMatrix(_tempDiv, true);
                                        m2.x -= x - (x * matrix[0] + y * matrix[2]);
                                        m2.y -= y - (x * matrix[1] + y * matrix[3]);
                                    }
                                }
                                _doc.body.removeChild(_tempDiv);
                                if (!m2.perspective) {
                                    m2.perspective = m1.perspective; //tweening to no perspective gives very unintuitive results - just keep the same perspective in that case.
                                }
                                if (v.xPercent != null) {
                                    m2.xPercent = _parseVal(v.xPercent, m1.xPercent);
                                }
                                if (v.yPercent != null) {
                                    m2.yPercent = _parseVal(v.yPercent, m1.yPercent);
                                }
                            } else if (typeof(v) === "object") { //for values like scaleX, scaleY, rotation, x, y, skewX, and skewY or transform:{...} (object)
                                m2 = {
                                    scaleX: _parseVal((v.scaleX != null) ? v.scaleX : v.scale, m1.scaleX),
                                    scaleY: _parseVal((v.scaleY != null) ? v.scaleY : v.scale, m1.scaleY),
                                    scaleZ: _parseVal(v.scaleZ, m1.scaleZ),
                                    x: _parseVal(v.x, m1.x),
                                    y: _parseVal(v.y, m1.y),
                                    z: _parseVal(v.z, m1.z),
                                    xPercent: _parseVal(v.xPercent, m1.xPercent),
                                    yPercent: _parseVal(v.yPercent, m1.yPercent),
                                    perspective: _parseVal(v.transformPerspective, m1.perspective)
                                };
                                dr = v.directionalRotation;
                                if (dr != null) {
                                    if (typeof(dr) === "object") {
                                        for (copy in dr) {
                                            v[copy] = dr[copy];
                                        }
                                    } else {
                                        v.rotation = dr;
                                    }
                                }
                                if (typeof(v.x) === "string" && v.x.indexOf("%") !== -1) {
                                    m2.x = 0;
                                    m2.xPercent = _parseVal(v.x, m1.xPercent);
                                }
                                if (typeof(v.y) === "string" && v.y.indexOf("%") !== -1) {
                                    m2.y = 0;
                                    m2.yPercent = _parseVal(v.y, m1.yPercent);
                                }

                                m2.rotation = _parseAngle(("rotation" in v) ? v.rotation : ("shortRotation" in v) ? v.shortRotation + "_short" : ("rotationZ" in v) ? v.rotationZ : m1.rotation, m1.rotation, "rotation", endRotations);
                                if (_supports3D) {
                                    m2.rotationX = _parseAngle(("rotationX" in v) ? v.rotationX : ("shortRotationX" in v) ? v.shortRotationX + "_short" : m1.rotationX || 0, m1.rotationX, "rotationX", endRotations);
                                    m2.rotationY = _parseAngle(("rotationY" in v) ? v.rotationY : ("shortRotationY" in v) ? v.shortRotationY + "_short" : m1.rotationY || 0, m1.rotationY, "rotationY", endRotations);
                                }
                                m2.skewX = _parseAngle(v.skewX, m1.skewX);
                                m2.skewY = _parseAngle(v.skewY, m1.skewY);
                            }
                            if (_supports3D && v.force3D != null) {
                                m1.force3D = v.force3D;
                                hasChange = true;
                            }

                            has3D = (m1.force3D || m1.z || m1.rotationX || m1.rotationY || m2.z || m2.rotationX || m2.rotationY || m2.perspective);
                            if (!has3D && v.scale != null) {
                                m2.scaleZ = 1; //no need to tween scaleZ.
                            }

                            while (--i > -1) {
                                p = _transformProps[i];
                                orig = m2[p] - m1[p];
                                if (orig > min || orig < -min || v[p] != null || _forcePT[p] != null) {
                                    hasChange = true;
                                    pt = new CSSPropTween(m1, p, m1[p], orig, pt);
                                    if (p in endRotations) {
                                        pt.e = endRotations[p]; //directional rotations typically have compensated values during the tween, but we need to make sure they end at exactly what the user requested
                                    }
                                    pt.xs0 = 0; //ensures the value stays numeric in setRatio()
                                    pt.plugin = plugin;
                                    cssp._overwriteProps.push(pt.n);
                                }
                            }

                            orig = v.transformOrigin;
                            if (m1.svg && (orig || v.svgOrigin)) {
                                x = m1.xOffset; //when we change the origin, in order to prevent things from jumping we adjust the x/y so we must record those here so that we can create PropTweens for them and flip them at the same time as the origin
                                y = m1.yOffset;
                                _parseSVGOrigin(t, _parsePosition(orig), m2, v.svgOrigin, v.smoothOrigin);
                                pt = _addNonTweeningNumericPT(m1, "xOrigin", (originalGSTransform ? m1 : m2).xOrigin, m2.xOrigin, pt, transformOriginString); //note: if there wasn't a transformOrigin defined yet, just start with the destination one; it's wasteful otherwise, and it causes problems with fromTo() tweens. For example, TweenLite.to("#wheel", 3, {rotation:180, transformOrigin:"50% 50%", delay:1}); TweenLite.fromTo("#wheel", 3, {scale:0.5, transformOrigin:"50% 50%"}, {scale:1, delay:2}); would cause a jump when the from values revert at the beginning of the 2nd tween.
                                pt = _addNonTweeningNumericPT(m1, "yOrigin", (originalGSTransform ? m1 : m2).yOrigin, m2.yOrigin, pt, transformOriginString);
                                if (x !== m1.xOffset || y !== m1.yOffset) {
                                    pt = _addNonTweeningNumericPT(m1, "xOffset", (originalGSTransform ? x : m1.xOffset), m1.xOffset, pt, transformOriginString);
                                    pt = _addNonTweeningNumericPT(m1, "yOffset", (originalGSTransform ? y : m1.yOffset), m1.yOffset, pt, transformOriginString);
                                }
                                orig = "0px 0px"; //certain browsers (like firefox) completely botch transform-origin, so we must remove it to prevent it from contaminating transforms. We manage it ourselves with xOrigin and yOrigin
                            }
                            if (orig || (_supports3D && has3D && m1.zOrigin)) { //if anything 3D is happening and there's a transformOrigin with a z component that's non-zero, we must ensure that the transformOrigin's z-component is set to 0 so that we can manually do those calculations to get around Safari bugs. Even if the user didn't specifically define a "transformOrigin" in this particular tween (maybe they did it via css directly).
                                if (_transformProp) {
                                    hasChange = true;
                                    p = _transformOriginProp;
                                    orig = (orig || _getStyle(t, p, _cs, false, "50% 50%")) + ""; //cast as string to avoid errors
                                    pt = new CSSPropTween(style, p, 0, 0, pt, -1, transformOriginString);
                                    pt.b = style[p];
                                    pt.plugin = plugin;
                                    if (_supports3D) {
                                        copy = m1.zOrigin;
                                        orig = orig.split(" ");
                                        m1.zOrigin = ((orig.length > 2 && !(copy !== 0 && orig[2] === "0px")) ? parseFloat(orig[2]) : copy) || 0; //Safari doesn't handle the z part of transformOrigin correctly, so we'll manually handle it in the _set3DTransformRatio() method.
                                        pt.xs0 = pt.e = orig[0] + " " + (orig[1] || "50%") + " 0px"; //we must define a z value of 0px specifically otherwise iOS 5 Safari will stick with the old one (if one was defined)!
                                        pt = new CSSPropTween(m1, "zOrigin", 0, 0, pt, -1, pt.n); //we must create a CSSPropTween for the _gsTransform.zOrigin so that it gets reset properly at the beginning if the tween runs backward (as opposed to just setting m1.zOrigin here)
                                        pt.b = copy;
                                        pt.xs0 = pt.e = m1.zOrigin;
                                    } else {
                                        pt.xs0 = pt.e = orig;
                                    }

                                    //for older versions of IE (6-8), we need to manually calculate things inside the setRatio() function. We record origin x and y (ox and oy) and whether or not the values are percentages (oxp and oyp).
                                } else {
                                    _parsePosition(orig + "", m1);
                                }
                            }
                            if (hasChange) {
                                cssp._transformType = (!(m1.svg && _useSVGTransformAttr) && (has3D || this._transformType === 3)) ? 3 : 2; //quicker than calling cssp._enableTransforms();
                            }
                            if (swapFunc) {
                                vars[parsingProp] = swapFunc;
                            }
                            if (scaleFunc) {
                                vars.scale = scaleFunc;
                            }
                            return pt;
                        },
                        prefix: true
                    });

                    _registerComplexSpecialProp("boxShadow", { defaultValue: "0px 0px 0px 0px #999", prefix: true, color: true, multi: true, keyword: "inset" });

                    _registerComplexSpecialProp("borderRadius", {
                        defaultValue: "0px",
                        parser: function(t, e, p, cssp, pt, plugin) {
                            e = this.format(e);
                            var props = ["borderTopLeftRadius", "borderTopRightRadius", "borderBottomRightRadius", "borderBottomLeftRadius"],
                                style = t.style,
                                ea1, i, es2, bs2, bs, es, bn, en, w, h, esfx, bsfx, rel, hn, vn, em;
                            w = parseFloat(t.offsetWidth);
                            h = parseFloat(t.offsetHeight);
                            ea1 = e.split(" ");
                            for (i = 0; i < props.length; i++) { //if we're dealing with percentages, we must convert things separately for the horizontal and vertical axis!
                                if (this.p.indexOf("border")) { //older browsers used a prefix
                                    props[i] = _checkPropPrefix(props[i]);
                                }
                                bs = bs2 = _getStyle(t, props[i], _cs, false, "0px");
                                if (bs.indexOf(" ") !== -1) {
                                    bs2 = bs.split(" ");
                                    bs = bs2[0];
                                    bs2 = bs2[1];
                                }
                                es = es2 = ea1[i];
                                bn = parseFloat(bs);
                                bsfx = bs.substr((bn + "").length);
                                rel = (es.charAt(1) === "=");
                                if (rel) {
                                    en = parseInt(es.charAt(0) + "1", 10);
                                    es = es.substr(2);
                                    en *= parseFloat(es);
                                    esfx = es.substr((en + "").length - (en < 0 ? 1 : 0)) || "";
                                } else {
                                    en = parseFloat(es);
                                    esfx = es.substr((en + "").length);
                                }
                                if (esfx === "") {
                                    esfx = _suffixMap[p] || bsfx;
                                }
                                if (esfx !== bsfx) {
                                    hn = _convertToPixels(t, "borderLeft", bn, bsfx); //horizontal number (we use a bogus "borderLeft" property just because the _convertToPixels() method searches for the keywords "Left", "Right", "Top", and "Bottom" to determine of it's a horizontal or vertical property, and we need "border" in the name so that it knows it should measure relative to the element itself, not its parent.
                                    vn = _convertToPixels(t, "borderTop", bn, bsfx); //vertical number
                                    if (esfx === "%") {
                                        bs = (hn / w * 100) + "%";
                                        bs2 = (vn / h * 100) + "%";
                                    } else if (esfx === "em") {
                                        em = _convertToPixels(t, "borderLeft", 1, "em");
                                        bs = (hn / em) + "em";
                                        bs2 = (vn / em) + "em";
                                    } else {
                                        bs = hn + "px";
                                        bs2 = vn + "px";
                                    }
                                    if (rel) {
                                        es = (parseFloat(bs) + en) + esfx;
                                        es2 = (parseFloat(bs2) + en) + esfx;
                                    }
                                }
                                pt = _parseComplex(style, props[i], bs + " " + bs2, es + " " + es2, false, "0px", pt);
                            }
                            return pt;
                        },
                        prefix: true,
                        formatter: _getFormatter("0px 0px 0px 0px", false, true)
                    });
                    _registerComplexSpecialProp("borderBottomLeftRadius,borderBottomRightRadius,borderTopLeftRadius,borderTopRightRadius", {
                        defaultValue: "0px",
                        parser: function(t, e, p, cssp, pt, plugin) {
                            return _parseComplex(t.style, p, this.format(_getStyle(t, p, _cs, false, "0px 0px")), this.format(e), false, "0px", pt);
                        },
                        prefix: true,
                        formatter: _getFormatter("0px 0px", false, true)
                    });
                    _registerComplexSpecialProp("backgroundPosition", {
                        defaultValue: "0 0",
                        parser: function(t, e, p, cssp, pt, plugin) {
                            var bp = "background-position",
                                cs = (_cs || _getComputedStyle(t, null)),
                                bs = this.format(((cs) ? _ieVers ? cs.getPropertyValue(bp + "-x") + " " + cs.getPropertyValue(bp + "-y") : cs.getPropertyValue(bp) : t.currentStyle.backgroundPositionX + " " + t.currentStyle.backgroundPositionY) || "0 0"), //Internet Explorer doesn't report background-position correctly - we must query background-position-x and background-position-y and combine them (even in IE10). Before IE9, we must do the same with the currentStyle object and use camelCase
                                es = this.format(e),
                                ba, ea, i, pct, overlap, src;
                            if ((bs.indexOf("%") !== -1) !== (es.indexOf("%") !== -1) && es.split(",").length < 2) {
                                src = _getStyle(t, "backgroundImage").replace(_urlExp, "");
                                if (src && src !== "none") {
                                    ba = bs.split(" ");
                                    ea = es.split(" ");
                                    _tempImg.setAttribute("src", src); //set the temp IMG's src to the background-image so that we can measure its width/height
                                    i = 2;
                                    while (--i > -1) {
                                        bs = ba[i];
                                        pct = (bs.indexOf("%") !== -1);
                                        if (pct !== (ea[i].indexOf("%") !== -1)) {
                                            overlap = (i === 0) ? t.offsetWidth - _tempImg.width : t.offsetHeight - _tempImg.height;
                                            ba[i] = pct ? (parseFloat(bs) / 100 * overlap) + "px" : (parseFloat(bs) / overlap * 100) + "%";
                                        }
                                    }
                                    bs = ba.join(" ");
                                }
                            }
                            return this.parseComplex(t.style, bs, es, pt, plugin);
                        },
                        formatter: _parsePosition
                    });
                    _registerComplexSpecialProp("backgroundSize", {
                        defaultValue: "0 0",
                        formatter: function(v) {
                            v += ""; //ensure it's a string
                            return _parsePosition(v.indexOf(" ") === -1 ? v + " " + v : v); //if set to something like "100% 100%", Safari typically reports the computed style as just "100%" (no 2nd value), but we should ensure that there are two values, so copy the first one. Otherwise, it'd be interpreted as "100% 0" (wrong).
                        }
                    });
                    _registerComplexSpecialProp("perspective", { defaultValue: "0px", prefix: true });
                    _registerComplexSpecialProp("perspectiveOrigin", { defaultValue: "50% 50%", prefix: true });
                    _registerComplexSpecialProp("transformStyle", { prefix: true });
                    _registerComplexSpecialProp("backfaceVisibility", { prefix: true });
                    _registerComplexSpecialProp("userSelect", { prefix: true });
                    _registerComplexSpecialProp("margin", { parser: _getEdgeParser("marginTop,marginRight,marginBottom,marginLeft") });
                    _registerComplexSpecialProp("padding", { parser: _getEdgeParser("paddingTop,paddingRight,paddingBottom,paddingLeft") });
                    _registerComplexSpecialProp("clip", {
                        defaultValue: "rect(0px,0px,0px,0px)",
                        parser: function(t, e, p, cssp, pt, plugin) {
                            var b, cs, delim;
                            if (_ieVers < 9) { //IE8 and earlier don't report a "clip" value in the currentStyle - instead, the values are split apart into clipTop, clipRight, clipBottom, and clipLeft. Also, in IE7 and earlier, the values inside rect() are space-delimited, not comma-delimited.
                                cs = t.currentStyle;
                                delim = _ieVers < 8 ? " " : ",";
                                b = "rect(" + cs.clipTop + delim + cs.clipRight + delim + cs.clipBottom + delim + cs.clipLeft + ")";
                                e = this.format(e).split(",").join(delim);
                            } else {
                                b = this.format(_getStyle(t, this.p, _cs, false, this.dflt));
                                e = this.format(e);
                            }
                            return this.parseComplex(t.style, b, e, pt, plugin);
                        }
                    });
                    _registerComplexSpecialProp("textShadow", { defaultValue: "0px 0px 0px #999", color: true, multi: true });
                    _registerComplexSpecialProp("autoRound,strictUnits", { parser: function(t, e, p, cssp, pt) { return pt; } }); //just so that we can ignore these properties (not tween them)
                    _registerComplexSpecialProp("border", {
                        defaultValue: "0px solid #000",
                        parser: function(t, e, p, cssp, pt, plugin) {
                            var bw = _getStyle(t, "borderTopWidth", _cs, false, "0px"),
                                end = this.format(e).split(" "),
                                esfx = end[0].replace(_suffixExp, "");
                            if (esfx !== "px") { //if we're animating to a non-px value, we need to convert the beginning width to that unit.
                                bw = (parseFloat(bw) / _convertToPixels(t, "borderTopWidth", 1, esfx)) + esfx;
                            }
                            return this.parseComplex(t.style, this.format(bw + " " + _getStyle(t, "borderTopStyle", _cs, false, "solid") + " " + _getStyle(t, "borderTopColor", _cs, false, "#000")), end.join(" "), pt, plugin);
                        },
                        color: true,
                        formatter: function(v) {
                            var a = v.split(" ");
                            return a[0] + " " + (a[1] || "solid") + " " + (v.match(_colorExp) || ["#000"])[0];
                        }
                    });
                    _registerComplexSpecialProp("borderWidth", { parser: _getEdgeParser("borderTopWidth,borderRightWidth,borderBottomWidth,borderLeftWidth") }); //Firefox doesn't pick up on borderWidth set in style sheets (only inline).
                    _registerComplexSpecialProp("float,cssFloat,styleFloat", {
                        parser: function(t, e, p, cssp, pt, plugin) {
                            var s = t.style,
                                prop = ("cssFloat" in s) ? "cssFloat" : "styleFloat";
                            return new CSSPropTween(s, prop, 0, 0, pt, -1, p, false, 0, s[prop], e);
                        }
                    });

                    //opacity-related
                    var _setIEOpacityRatio = function(v) {
                        var t = this.t, //refers to the element's style property
                            filters = t.filter || _getStyle(this.data, "filter") || "",
                            val = (this.s + this.c * v) | 0,
                            skip;
                        if (val === 100) { //for older versions of IE that need to use a filter to apply opacity, we should remove the filter if opacity hits 1 in order to improve performance, but make sure there isn't a transform (matrix) or gradient in the filters.
                            if (filters.indexOf("atrix(") === -1 && filters.indexOf("radient(") === -1 && filters.indexOf("oader(") === -1) {
                                t.removeAttribute("filter");
                                skip = (!_getStyle(this.data, "filter")); //if a class is applied that has an alpha filter, it will take effect (we don't want that), so re-apply our alpha filter in that case. We must first remove it and then check.
                            } else {
                                t.filter = filters.replace(_alphaFilterExp, "");
                                skip = true;
                            }
                        }
                        if (!skip) {
                            if (this.xn1) {
                                t.filter = filters = filters || ("alpha(opacity=" + val + ")"); //works around bug in IE7/8 that prevents changes to "visibility" from being applied properly if the filter is changed to a different alpha on the same frame.
                            }
                            if (filters.indexOf("pacity") === -1) { //only used if browser doesn't support the standard opacity style property (IE 7 and 8). We omit the "O" to avoid case-sensitivity issues
                                if (val !== 0 || !this.xn1) { //bugs in IE7/8 won't render the filter properly if opacity is ADDED on the same frame/render as "visibility" changes (this.xn1 is 1 if this tween is an "autoAlpha" tween)
                                    t.filter = filters + " alpha(opacity=" + val + ")"; //we round the value because otherwise, bugs in IE7/8 can prevent "visibility" changes from being applied properly.
                                }
                            } else {
                                t.filter = filters.replace(_opacityExp, "opacity=" + val);
                            }
                        }
                    };
                    _registerComplexSpecialProp("opacity,alpha,autoAlpha", {
                        defaultValue: "1",
                        parser: function(t, e, p, cssp, pt, plugin) {
                            var b = parseFloat(_getStyle(t, "opacity", _cs, false, "1")),
                                style = t.style,
                                isAutoAlpha = (p === "autoAlpha");
                            if (typeof(e) === "string" && e.charAt(1) === "=") {
                                e = ((e.charAt(0) === "-") ? -1 : 1) * parseFloat(e.substr(2)) + b;
                            }
                            if (isAutoAlpha && b === 1 && _getStyle(t, "visibility", _cs) === "hidden" && e !== 0) { //if visibility is initially set to "hidden", we should interpret that as intent to make opacity 0 (a convenience)
                                b = 0;
                            }
                            if (_supportsOpacity) {
                                pt = new CSSPropTween(style, "opacity", b, e - b, pt);
                            } else {
                                pt = new CSSPropTween(style, "opacity", b * 100, (e - b) * 100, pt);
                                pt.xn1 = isAutoAlpha ? 1 : 0; //we need to record whether or not this is an autoAlpha so that in the setRatio(), we know to duplicate the setting of the alpha in order to work around a bug in IE7 and IE8 that prevents changes to "visibility" from taking effect if the filter is changed to a different alpha(opacity) at the same time. Setting it to the SAME value first, then the new value works around the IE7/8 bug.
                                style.zoom = 1; //helps correct an IE issue.
                                pt.type = 2;
                                pt.b = "alpha(opacity=" + pt.s + ")";
                                pt.e = "alpha(opacity=" + (pt.s + pt.c) + ")";
                                pt.data = t;
                                pt.plugin = plugin;
                                pt.setRatio = _setIEOpacityRatio;
                            }
                            if (isAutoAlpha) { //we have to create the "visibility" PropTween after the opacity one in the linked list so that they run in the order that works properly in IE8 and earlier
                                pt = new CSSPropTween(style, "visibility", 0, 0, pt, -1, null, false, 0, ((b !== 0) ? "inherit" : "hidden"), ((e === 0) ? "hidden" : "inherit"));
                                pt.xs0 = "inherit";
                                cssp._overwriteProps.push(pt.n);
                                cssp._overwriteProps.push(p);
                            }
                            return pt;
                        }
                    });


                    var _removeProp = function(s, p) {
                            if (p) {
                                if (s.removeProperty) {
                                    if (p.substr(0, 2) === "ms" || p.substr(0, 6) === "webkit") { //Microsoft and some Webkit browsers don't conform to the standard of capitalizing the first prefix character, so we adjust so that when we prefix the caps with a dash, it's correct (otherwise it'd be "ms-transform" instead of "-ms-transform" for IE9, for example)
                                        p = "-" + p;
                                    }
                                    s.removeProperty(p.replace(_capsExp, "-$1").toLowerCase());
                                } else { //note: old versions of IE use "removeAttribute()" instead of "removeProperty()"
                                    s.removeAttribute(p);
                                }
                            }
                        },
                        _setClassNameRatio = function(v) {
                            this.t._gsClassPT = this;
                            if (v === 1 || v === 0) {
                                this.t.setAttribute("class", (v === 0) ? this.b : this.e);
                                var mpt = this.data, //first MiniPropTween
                                    s = this.t.style;
                                while (mpt) {
                                    if (!mpt.v) {
                                        _removeProp(s, mpt.p);
                                    } else {
                                        s[mpt.p] = mpt.v;
                                    }
                                    mpt = mpt._next;
                                }
                                if (v === 1 && this.t._gsClassPT === this) {
                                    this.t._gsClassPT = null;
                                }
                            } else if (this.t.getAttribute("class") !== this.e) {
                                this.t.setAttribute("class", this.e);
                            }
                        };
                    _registerComplexSpecialProp("className", {
                        parser: function(t, e, p, cssp, pt, plugin, vars) {
                            var b = t.getAttribute("class") || "", //don't use t.className because it doesn't work consistently on SVG elements; getAttribute("class") and setAttribute("class", value") is more reliable.
                                cssText = t.style.cssText,
                                difData, bs, cnpt, cnptLookup, mpt;
                            pt = cssp._classNamePT = new CSSPropTween(t, p, 0, 0, pt, 2);
                            pt.setRatio = _setClassNameRatio;
                            pt.pr = -11;
                            _hasPriority = true;
                            pt.b = b;
                            bs = _getAllStyles(t, _cs);
                            //if there's a className tween already operating on the target, force it to its end so that the necessary inline styles are removed and the class name is applied before we determine the end state (we don't want inline styles interfering that were there just for class-specific values)
                            cnpt = t._gsClassPT;
                            if (cnpt) {
                                cnptLookup = {};
                                mpt = cnpt.data; //first MiniPropTween which stores the inline styles - we need to force these so that the inline styles don't contaminate things. Otherwise, there's a small chance that a tween could start and the inline values match the destination values and they never get cleaned.
                                while (mpt) {
                                    cnptLookup[mpt.p] = 1;
                                    mpt = mpt._next;
                                }
                                cnpt.setRatio(1);
                            }
                            t._gsClassPT = pt;
                            pt.e = (e.charAt(1) !== "=") ? e : b.replace(new RegExp("(?:\\s|^)" + e.substr(2) + "(?![\\w-])"), "") + ((e.charAt(0) === "+") ? " " + e.substr(2) : "");
                            t.setAttribute("class", pt.e);
                            difData = _cssDif(t, bs, _getAllStyles(t), vars, cnptLookup);
                            t.setAttribute("class", b);
                            pt.data = difData.firstMPT;
                            t.style.cssText = cssText; //we recorded cssText before we swapped classes and ran _getAllStyles() because in cases when a className tween is overwritten, we remove all the related tweening properties from that class change (otherwise class-specific stuff can't override properties we've directly set on the target's style object due to specificity).
                            pt = pt.xfirst = cssp.parse(t, difData.difs, pt, plugin); //we record the CSSPropTween as the xfirst so that we can handle overwriting propertly (if "className" gets overwritten, we must kill all the properties associated with the className part of the tween, so we can loop through from xfirst to the pt itself)
                            return pt;
                        }
                    });


                    var _setClearPropsRatio = function(v) {
                        if (v === 1 || v === 0)
                            if (this.data._totalTime === this.data._totalDuration && this.data.data !== "isFromStart") { //this.data refers to the tween. Only clear at the END of the tween (remember, from() tweens make the ratio go from 1 to 0, so we can't just check that and if the tween is the zero-duration one that's created internally to render the starting values in a from() tween, ignore that because otherwise, for example, from(...{height:100, clearProps:"height", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in).
                                var s = this.t.style,
                                    transformParse = _specialProps.transform.parse,
                                    a, p, i, clearTransform, transform;
                                if (this.e === "all") {
                                    s.cssText = "";
                                    clearTransform = true;
                                } else {
                                    a = this.e.split(" ").join("").split(",");
                                    i = a.length;
                                    while (--i > -1) {
                                        p = a[i];
                                        if (_specialProps[p]) {
                                            if (_specialProps[p].parse === transformParse) {
                                                clearTransform = true;
                                            } else {
                                                p = (p === "transformOrigin") ? _transformOriginProp : _specialProps[p].p; //ensures that special properties use the proper browser-specific property name, like "scaleX" might be "-webkit-transform" or "boxShadow" might be "-moz-box-shadow"
                                            }
                                        }
                                        _removeProp(s, p);
                                    }
                                }
                                if (clearTransform) {
                                    _removeProp(s, _transformProp);
                                    transform = this.t._gsTransform;
                                    if (transform) {
                                        if (transform.svg) {
                                            this.t.removeAttribute("data-svg-origin");
                                            this.t.removeAttribute("transform");
                                        }
                                        delete this.t._gsTransform;
                                    }
                                }

                            }
                    };
                    _registerComplexSpecialProp("clearProps", {
                        parser: function(t, e, p, cssp, pt) {
                            pt = new CSSPropTween(t, p, 0, 0, pt, 2);
                            pt.setRatio = _setClearPropsRatio;
                            pt.e = e;
                            pt.pr = -10;
                            pt.data = cssp._tween;
                            _hasPriority = true;
                            return pt;
                        }
                    });

                    p = "bezier,throwProps,physicsProps,physics2D".split(",");
                    i = p.length;
                    while (i--) {
                        _registerPluginProp(p[i]);
                    }








                    p = CSSPlugin.prototype;
                    p._firstPT = p._lastParsedTransform = p._transform = null;

                    //gets called when the tween renders for the first time. This kicks everything off, recording start/end values, etc.
                    p._onInitTween = function(target, vars, tween, index) {
                        if (!target.nodeType) { //css is only for dom elements
                            return false;
                        }
                        this._target = _target = target;
                        this._tween = tween;
                        this._vars = vars;
                        _index = index;
                        _autoRound = vars.autoRound;
                        _hasPriority = false;
                        _suffixMap = vars.suffixMap || CSSPlugin.suffixMap;
                        _cs = _getComputedStyle(target, "");
                        _overwriteProps = this._overwriteProps;
                        var style = target.style,
                            v, pt, pt2, first, last, next, zIndex, tpt, threeD;
                        if (_reqSafariFix)
                            if (style.zIndex === "") {
                                v = _getStyle(target, "zIndex", _cs);
                                if (v === "auto" || v === "") {
                                    //corrects a bug in [non-Android] Safari that prevents it from repainting elements in their new positions if they don't have a zIndex set. We also can't just apply this inside _parseTransform() because anything that's moved in any way (like using "left" or "top" instead of transforms like "x" and "y") can be affected, so it is best to ensure that anything that's tweening has a z-index. Setting "WebkitPerspective" to a non-zero value worked too except that on iOS Safari things would flicker randomly. Plus zIndex is less memory-intensive.
                                    this._addLazySet(style, "zIndex", 0);
                                }
                            }

                        if (typeof(vars) === "string") {
                            first = style.cssText;
                            v = _getAllStyles(target, _cs);
                            style.cssText = first + ";" + vars;
                            v = _cssDif(target, v, _getAllStyles(target)).difs;
                            if (!_supportsOpacity && _opacityValExp.test(vars)) {
                                v.opacity = parseFloat(RegExp.$1);
                            }
                            vars = v;
                            style.cssText = first;
                        }

                        if (vars.className) { //className tweens will combine any differences they find in the css with the vars that are passed in, so {className:"myClass", scale:0.5, left:20} would work.
                            this._firstPT = pt = _specialProps.className.parse(target, vars.className, "className", this, null, null, vars);
                        } else {
                            this._firstPT = pt = this.parse(target, vars, null);
                        }

                        if (this._transformType) {
                            threeD = (this._transformType === 3);
                            if (!_transformProp) {
                                style.zoom = 1; //helps correct an IE issue.
                            } else if (_isSafari) {
                                _reqSafariFix = true;
                                //if zIndex isn't set, iOS Safari doesn't repaint things correctly sometimes (seemingly at random).
                                if (style.zIndex === "") {
                                    zIndex = _getStyle(target, "zIndex", _cs);
                                    if (zIndex === "auto" || zIndex === "") {
                                        this._addLazySet(style, "zIndex", 0);
                                    }
                                }
                                //Setting WebkitBackfaceVisibility corrects 3 bugs:
                                // 1) [non-Android] Safari skips rendering changes to "top" and "left" that are made on the same frame/render as a transform update.
                                // 2) iOS Safari sometimes neglects to repaint elements in their new positions. Setting "WebkitPerspective" to a non-zero value worked too except that on iOS Safari things would flicker randomly.
                                // 3) Safari sometimes displayed odd artifacts when tweening the transform (or WebkitTransform) property, like ghosts of the edges of the element remained. Definitely a browser bug.
                                //Note: we allow the user to override the auto-setting by defining WebkitBackfaceVisibility in the vars of the tween.
                                if (_isSafariLT6) {
                                    this._addLazySet(style, "WebkitBackfaceVisibility", this._vars.WebkitBackfaceVisibility || (threeD ? "visible" : "hidden"));
                                }
                            }
                            pt2 = pt;
                            while (pt2 && pt2._next) {
                                pt2 = pt2._next;
                            }
                            tpt = new CSSPropTween(target, "transform", 0, 0, null, 2);
                            this._linkCSSP(tpt, null, pt2);
                            tpt.setRatio = _transformProp ? _setTransformRatio : _setIETransformRatio;
                            tpt.data = this._transform || _getTransform(target, _cs, true);
                            tpt.tween = tween;
                            tpt.pr = -1; //ensures that the transforms get applied after the components are updated.
                            _overwriteProps.pop(); //we don't want to force the overwrite of all "transform" tweens of the target - we only care about individual transform properties like scaleX, rotation, etc. The CSSPropTween constructor automatically adds the property to _overwriteProps which is why we need to pop() here.
                        }

                        if (_hasPriority) {
                            //reorders the linked list in order of pr (priority)
                            while (pt) {
                                next = pt._next;
                                pt2 = first;
                                while (pt2 && pt2.pr > pt.pr) {
                                    pt2 = pt2._next;
                                }
                                if ((pt._prev = pt2 ? pt2._prev : last)) {
                                    pt._prev._next = pt;
                                } else {
                                    first = pt;
                                }
                                if ((pt._next = pt2)) {
                                    pt2._prev = pt;
                                } else {
                                    last = pt;
                                }
                                pt = next;
                            }
                            this._firstPT = first;
                        }
                        return true;
                    };


                    p.parse = function(target, vars, pt, plugin) {
                        var style = target.style,
                            p, sp, bn, en, bs, es, bsfx, esfx, isStr, rel;
                        for (p in vars) {
                            es = vars[p]; //ending value string
                            if (typeof(es) === "function") {
                                es = es(_index, _target);
                            }
                            sp = _specialProps[p]; //SpecialProp lookup.
                            if (sp) {
                                pt = sp.parse(target, es, p, this, pt, plugin, vars);
                            } else if (p.substr(0, 2) === "--") { //for tweening CSS variables (which always start with "--"). To maximize performance and simplicity, we bypass CSSPlugin altogether and just add a normal property tween to the tween instance itself.
                                this._tween._propLookup[p] = this._addTween.call(this._tween, target.style, "setProperty", _getComputedStyle(target).getPropertyValue(p) + "", es + "", p, false, p);
                                continue;
                            } else {
                                bs = _getStyle(target, p, _cs) + "";
                                isStr = (typeof(es) === "string");
                                if (p === "color" || p === "fill" || p === "stroke" || p.indexOf("Color") !== -1 || (isStr && _rgbhslExp.test(es))) { //Opera uses background: to define color sometimes in addition to backgroundColor:
                                    if (!isStr) {
                                        es = _parseColor(es);
                                        es = ((es.length > 3) ? "rgba(" : "rgb(") + es.join(",") + ")";
                                    }
                                    pt = _parseComplex(style, p, bs, es, true, "transparent", pt, 0, plugin);

                                } else if (isStr && _complexExp.test(es)) {
                                    pt = _parseComplex(style, p, bs, es, true, null, pt, 0, plugin);

                                } else {
                                    bn = parseFloat(bs);
                                    bsfx = (bn || bn === 0) ? bs.substr((bn + "").length) : ""; //remember, bs could be non-numeric like "normal" for fontWeight, so we should default to a blank suffix in that case.

                                    if (bs === "" || bs === "auto") {
                                        if (p === "width" || p === "height") {
                                            bn = _getDimension(target, p, _cs);
                                            bsfx = "px";
                                        } else if (p === "left" || p === "top") {
                                            bn = _calculateOffset(target, p, _cs);
                                            bsfx = "px";
                                        } else {
                                            bn = (p !== "opacity") ? 0 : 1;
                                            bsfx = "";
                                        }
                                    }

                                    rel = (isStr && es.charAt(1) === "=");
                                    if (rel) {
                                        en = parseInt(es.charAt(0) + "1", 10);
                                        es = es.substr(2);
                                        en *= parseFloat(es);
                                        esfx = es.replace(_suffixExp, "");
                                    } else {
                                        en = parseFloat(es);
                                        esfx = isStr ? es.replace(_suffixExp, "") : "";
                                    }

                                    if (esfx === "") {
                                        esfx = (p in _suffixMap) ? _suffixMap[p] : bsfx; //populate the end suffix, prioritizing the map, then if none is found, use the beginning suffix.
                                    }

                                    es = (en || en === 0) ? (rel ? en + bn : en) + esfx : vars[p]; //ensures that any += or -= prefixes are taken care of. Record the end value before normalizing the suffix because we always want to end the tween on exactly what they intended even if it doesn't match the beginning value's suffix.
                                    //if the beginning/ending suffixes don't match, normalize them...
                                    if (bsfx !== esfx)
                                        if (esfx !== "" || p === "lineHeight")
                                            if (en || en === 0)
                                                if (bn) { //note: if the beginning value (bn) is 0, we don't need to convert units!
                                                    bn = _convertToPixels(target, p, bn, bsfx);
                                                    if (esfx === "%") {
                                                        bn /= _convertToPixels(target, p, 100, "%") / 100;
                                                        if (vars.strictUnits !== true) { //some browsers report only "px" values instead of allowing "%" with getComputedStyle(), so we assume that if we're tweening to a %, we should start there too unless strictUnits:true is defined. This approach is particularly useful for responsive designs that use from() tweens.
                                                            bs = bn + "%";
                                                        }

                                                    } else if (esfx === "em" || esfx === "rem" || esfx === "vw" || esfx === "vh") {
                                                        bn /= _convertToPixels(target, p, 1, esfx);

                                                        //otherwise convert to pixels.
                                                    } else if (esfx !== "px") {
                                                        en = _convertToPixels(target, p, en, esfx);
                                                        esfx = "px"; //we don't use bsfx after this, so we don't need to set it to px too.
                                                    }
                                                    if (rel)
                                                        if (en || en === 0) {
                                                            es = (en + bn) + esfx; //the changes we made affect relative calculations, so adjust the end value here.
                                                        }
                                                }

                                    if (rel) {
                                        en += bn;
                                    }

                                    if ((bn || bn === 0) && (en || en === 0)) { //faster than isNaN(). Also, previously we required en !== bn but that doesn't really gain much performance and it prevents _parseToProxy() from working properly if beginning and ending values match but need to get tweened by an external plugin anyway. For example, a bezier tween where the target starts at left:0 and has these points: [{left:50},{left:0}] wouldn't work properly because when parsing the last point, it'd match the first (current) one and a non-tweening CSSPropTween would be recorded when we actually need a normal tween (type:0) so that things get updated during the tween properly.
                                        pt = new CSSPropTween(style, p, bn, en - bn, pt, 0, p, (_autoRound !== false && (esfx === "px" || p === "zIndex")), 0, bs, es);
                                        pt.xs0 = esfx;
                                        //DEBUG: _log("tween "+p+" from "+pt.b+" ("+bn+esfx+") to "+pt.e+" with suffix: "+pt.xs0);
                                    } else if (style[p] === undefined || !es && (es + "" === "NaN" || es == null)) {
                                        _log("invalid " + p + " tween value: " + vars[p]);
                                    } else {
                                        pt = new CSSPropTween(style, p, en || bn || 0, 0, pt, -1, p, false, 0, bs, es);
                                        pt.xs0 = (es === "none" && (p === "display" || p.indexOf("Style") !== -1)) ? bs : es; //intermediate value should typically be set immediately (end value) except for "display" or things like borderTopStyle, borderBottomStyle, etc. which should use the beginning value during the tween.
                                        //DEBUG: _log("non-tweening value "+p+": "+pt.xs0);
                                    }
                                }
                            }
                            if (plugin)
                                if (pt && !pt.plugin) {
                                    pt.plugin = plugin;
                                }
                        }
                        return pt;
                    };


                    //gets called every time the tween updates, passing the new ratio (typically a value between 0 and 1, but not always (for example, if an Elastic.easeOut is used, the value can jump above 1 mid-tween). It will always start and 0 and end at 1.
                    p.setRatio = function(v) {
                        var pt = this._firstPT,
                            min = 0.000001,
                            val, str, i;
                        //at the end of the tween, we set the values to exactly what we received in order to make sure non-tweening values (like "position" or "float" or whatever) are set and so that if the beginning/ending suffixes (units) didn't match and we normalized to px, the value that the user passed in is used here. We check to see if the tween is at its beginning in case it's a from() tween in which case the ratio will actually go from 1 to 0 over the course of the tween (backwards).
                        if (v === 1 && (this._tween._time === this._tween._duration || this._tween._time === 0)) {
                            while (pt) {
                                if (pt.type !== 2) {
                                    if (pt.r && pt.type !== -1) {
                                        val = Math.round(pt.s + pt.c);
                                        if (!pt.type) {
                                            pt.t[pt.p] = val + pt.xs0;
                                        } else if (pt.type === 1) { //complex value (one that typically has multiple numbers inside a string, like "rect(5px,10px,20px,25px)"
                                            i = pt.l;
                                            str = pt.xs0 + val + pt.xs1;
                                            for (i = 1; i < pt.l; i++) {
                                                str += pt["xn" + i] + pt["xs" + (i + 1)];
                                            }
                                            pt.t[pt.p] = str;
                                        }
                                    } else {
                                        pt.t[pt.p] = pt.e;
                                    }
                                } else {
                                    pt.setRatio(v);
                                }
                                pt = pt._next;
                            }

                        } else if (v || !(this._tween._time === this._tween._duration || this._tween._time === 0) || this._tween._rawPrevTime === -0.000001) {
                            while (pt) {
                                val = pt.c * v + pt.s;
                                if (pt.r) {
                                    val = Math.round(val);
                                } else if (val < min)
                                    if (val > -min) {
                                        val = 0;
                                    }
                                if (!pt.type) {
                                    pt.t[pt.p] = val + pt.xs0;
                                } else if (pt.type === 1) { //complex value (one that typically has multiple numbers inside a string, like "rect(5px,10px,20px,25px)"
                                    i = pt.l;
                                    if (i === 2) {
                                        pt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2;
                                    } else if (i === 3) {
                                        pt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2 + pt.xn2 + pt.xs3;
                                    } else if (i === 4) {
                                        pt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2 + pt.xn2 + pt.xs3 + pt.xn3 + pt.xs4;
                                    } else if (i === 5) {
                                        pt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2 + pt.xn2 + pt.xs3 + pt.xn3 + pt.xs4 + pt.xn4 + pt.xs5;
                                    } else {
                                        str = pt.xs0 + val + pt.xs1;
                                        for (i = 1; i < pt.l; i++) {
                                            str += pt["xn" + i] + pt["xs" + (i + 1)];
                                        }
                                        pt.t[pt.p] = str;
                                    }

                                } else if (pt.type === -1) { //non-tweening value
                                    pt.t[pt.p] = pt.xs0;

                                } else if (pt.setRatio) { //custom setRatio() for things like SpecialProps, external plugins, etc.
                                    pt.setRatio(v);
                                }
                                pt = pt._next;
                            }

                            //if the tween is reversed all the way back to the beginning, we need to restore the original values which may have different units (like % instead of px or em or whatever).
                        } else {
                            while (pt) {
                                if (pt.type !== 2) {
                                    pt.t[pt.p] = pt.b;
                                } else {
                                    pt.setRatio(v);
                                }
                                pt = pt._next;
                            }
                        }
                    };

                    /**
                     * @private
                     * Forces rendering of the target's transforms (rotation, scale, etc.) whenever the CSSPlugin's setRatio() is called.
                     * Basically, this tells the CSSPlugin to create a CSSPropTween (type 2) after instantiation that runs last in the linked
                     * list and calls the appropriate (3D or 2D) rendering function. We separate this into its own method so that we can call
                     * it from other plugins like BezierPlugin if, for example, it needs to apply an autoRotation and this CSSPlugin
                     * doesn't have any transform-related properties of its own. You can call this method as many times as you
                     * want and it won't create duplicate CSSPropTweens.
                     *
                     * @param {boolean} threeD if true, it should apply 3D tweens (otherwise, just 2D ones are fine and typically faster)
                     */
                    p._enableTransforms = function(threeD) {
                        this._transform = this._transform || _getTransform(this._target, _cs, true); //ensures that the element has a _gsTransform property with the appropriate values.
                        this._transformType = (!(this._transform.svg && _useSVGTransformAttr) && (threeD || this._transformType === 3)) ? 3 : 2;
                    };

                    var lazySet = function(v) {
                        this.t[this.p] = this.e;
                        this.data._linkCSSP(this, this._next, null, true); //we purposefully keep this._next even though it'd make sense to null it, but this is a performance optimization, as this happens during the while (pt) {} loop in setRatio() at the bottom of which it sets pt = pt._next, so if we null it, the linked list will be broken in that loop.
                    };
                    /** @private Gives us a way to set a value on the first render (and only the first render). **/
                    p._addLazySet = function(t, p, v) {
                        var pt = this._firstPT = new CSSPropTween(t, p, 0, 0, this._firstPT, 2);
                        pt.e = v;
                        pt.setRatio = lazySet;
                        pt.data = this;
                    };

                    /** @private **/
                    p._linkCSSP = function(pt, next, prev, remove) {
                        if (pt) {
                            if (next) {
                                next._prev = pt;
                            }
                            if (pt._next) {
                                pt._next._prev = pt._prev;
                            }
                            if (pt._prev) {
                                pt._prev._next = pt._next;
                            } else if (this._firstPT === pt) {
                                this._firstPT = pt._next;
                                remove = true; //just to prevent resetting this._firstPT 5 lines down in case pt._next is null. (optimized for speed)
                            }
                            if (prev) {
                                prev._next = pt;
                            } else if (!remove && this._firstPT === null) {
                                this._firstPT = pt;
                            }
                            pt._next = next;
                            pt._prev = prev;
                        }
                        return pt;
                    };

                    p._mod = function(lookup) {
                        var pt = this._firstPT;
                        while (pt) {
                            if (typeof(lookup[pt.p]) === "function" && lookup[pt.p] === Math.round) { //only gets called by RoundPropsPlugin (ModifyPlugin manages all the rendering internally for CSSPlugin properties that need modification). Remember, we handle rounding a bit differently in this plugin for performance reasons, leveraging "r" as an indicator that the value should be rounded internally..
                                pt.r = 1;
                            }
                            pt = pt._next;
                        }
                    };

                    //we need to make sure that if alpha or autoAlpha is killed, opacity is too. And autoAlpha affects the "visibility" property.
                    p._kill = function(lookup) {
                        var copy = lookup,
                            pt, p, xfirst;
                        if (lookup.autoAlpha || lookup.alpha) {
                            copy = {};
                            for (p in lookup) { //copy the lookup so that we're not changing the original which may be passed elsewhere.
                                copy[p] = lookup[p];
                            }
                            copy.opacity = 1;
                            if (copy.autoAlpha) {
                                copy.visibility = 1;
                            }
                        }
                        if (lookup.className && (pt = this._classNamePT)) { //for className tweens, we need to kill any associated CSSPropTweens too; a linked list starts at the className's "xfirst".
                            xfirst = pt.xfirst;
                            if (xfirst && xfirst._prev) {
                                this._linkCSSP(xfirst._prev, pt._next, xfirst._prev._prev); //break off the prev
                            } else if (xfirst === this._firstPT) {
                                this._firstPT = pt._next;
                            }
                            if (pt._next) {
                                this._linkCSSP(pt._next, pt._next._next, xfirst._prev);
                            }
                            this._classNamePT = null;
                        }
                        pt = this._firstPT;
                        while (pt) {
                            if (pt.plugin && pt.plugin !== p && pt.plugin._kill) { //for plugins that are registered with CSSPlugin, we should notify them of the kill.
                                pt.plugin._kill(lookup);
                                p = pt.plugin;
                            }
                            pt = pt._next;
                        }
                        return TweenPlugin.prototype._kill.call(this, copy);
                    };



                    //used by cascadeTo() for gathering all the style properties of each child element into an array for comparison.
                    var _getChildStyles = function(e, props, targets) {
                        var children, i, child, type;
                        if (e.slice) {
                            i = e.length;
                            while (--i > -1) {
                                _getChildStyles(e[i], props, targets);
                            }
                            return;
                        }
                        children = e.childNodes;
                        i = children.length;
                        while (--i > -1) {
                            child = children[i];
                            type = child.type;
                            if (child.style) {
                                props.push(_getAllStyles(child));
                                if (targets) {
                                    targets.push(child);
                                }
                            }
                            if ((type === 1 || type === 9 || type === 11) && child.childNodes.length) {
                                _getChildStyles(child, props, targets);
                            }
                        }
                    };

                    /**
                     * Typically only useful for className tweens that may affect child elements, this method creates a TweenLite
                     * and then compares the style properties of all the target's child elements at the tween's start and end, and
                     * if any are different, it also creates tweens for those and returns an array containing ALL of the resulting
                     * tweens (so that you can easily add() them to a TimelineLite, for example). The reason this functionality is
                     * wrapped into a separate static method of CSSPlugin instead of being integrated into all regular className tweens
                     * is because it creates entirely new tweens that may have completely different targets than the original tween,
                     * so if they were all lumped into the original tween instance, it would be inconsistent with the rest of the API
                     * and it would create other problems. For example:
                     *  - If I create a tween of elementA, that tween instance may suddenly change its target to include 50 other elements (unintuitive if I specifically defined the target I wanted)
                     *  - We can't just create new independent tweens because otherwise, what happens if the original/parent tween is reversed or pause or dropped into a TimelineLite for tight control? You'd expect that tween's behavior to affect all the others.
                     *  - Analyzing every style property of every child before and after the tween is an expensive operation when there are many children, so this behavior shouldn't be imposed on all className tweens by default, especially since it's probably rare that this extra functionality is needed.
                     *
                     * @param {Object} target object to be tweened
                     * @param {number} Duration in seconds (or frames for frames-based tweens)
                     * @param {Object} Object containing the end values, like {className:"newClass", ease:Linear.easeNone}
                     * @return {Array} An array of TweenLite instances
                     */
                    CSSPlugin.cascadeTo = function(target, duration, vars) {
                        var tween = TweenLite.to(target, duration, vars),
                            results = [tween],
                            b = [],
                            e = [],
                            targets = [],
                            _reservedProps = TweenLite._internals.reservedProps,
                            i, difs, p, from;
                        target = tween._targets || tween.target;
                        _getChildStyles(target, b, targets);
                        tween.render(duration, true, true);
                        _getChildStyles(target, e);
                        tween.render(0, true, true);
                        tween._enabled(true);
                        i = targets.length;
                        while (--i > -1) {
                            difs = _cssDif(targets[i], b[i], e[i]);
                            if (difs.firstMPT) {
                                difs = difs.difs;
                                for (p in vars) {
                                    if (_reservedProps[p]) {
                                        difs[p] = vars[p];
                                    }
                                }
                                from = {};
                                for (p in difs) {
                                    from[p] = b[i][p];
                                }
                                results.push(TweenLite.fromTo(targets[i], duration, from, difs));
                            }
                        }
                        return results;
                    };

                    TweenPlugin.activate([CSSPlugin]);
                    return CSSPlugin;

                }, true);











                /*
                 * ----------------------------------------------------------------
                 * RoundPropsPlugin
                 * ----------------------------------------------------------------
                 */
                (function() {

                    var RoundPropsPlugin = _gsScope._gsDefine.plugin({
                            propName: "roundProps",
                            version: "1.6.0",
                            priority: -1,
                            API: 2,

                            //called when the tween renders for the first time. This is where initial values should be recorded and any setup routines should run.
                            init: function(target, value, tween) {
                                this._tween = tween;
                                return true;
                            }

                        }),
                        _roundLinkedList = function(node) {
                            while (node) {
                                if (!node.f && !node.blob) {
                                    node.m = Math.round;
                                }
                                node = node._next;
                            }
                        },
                        p = RoundPropsPlugin.prototype;

                    p._onInitAllProps = function() {
                        var tween = this._tween,
                            rp = (tween.vars.roundProps.join) ? tween.vars.roundProps : tween.vars.roundProps.split(","),
                            i = rp.length,
                            lookup = {},
                            rpt = tween._propLookup.roundProps,
                            prop, pt, next;
                        while (--i > -1) {
                            lookup[rp[i]] = Math.round;
                        }
                        i = rp.length;
                        while (--i > -1) {
                            prop = rp[i];
                            pt = tween._firstPT;
                            while (pt) {
                                next = pt._next; //record here, because it may get removed
                                if (pt.pg) {
                                    pt.t._mod(lookup);
                                } else if (pt.n === prop) {
                                    if (pt.f === 2 && pt.t) { //a blob (text containing multiple numeric values)
                                        _roundLinkedList(pt.t._firstPT);
                                    } else {
                                        this._add(pt.t, prop, pt.s, pt.c);
                                        //remove from linked list
                                        if (next) {
                                            next._prev = pt._prev;
                                        }
                                        if (pt._prev) {
                                            pt._prev._next = next;
                                        } else if (tween._firstPT === pt) {
                                            tween._firstPT = next;
                                        }
                                        pt._next = pt._prev = null;
                                        tween._propLookup[prop] = rpt;
                                    }
                                }
                                pt = next;
                            }
                        }
                        return false;
                    };

                    p._add = function(target, p, s, c) {
                        this._addTween(target, p, s, s + c, p, Math.round);
                        this._overwriteProps.push(p);
                    };

                }());










                /*
                 * ----------------------------------------------------------------
                 * AttrPlugin
                 * ----------------------------------------------------------------
                 */

                (function() {

                    _gsScope._gsDefine.plugin({
                        propName: "attr",
                        API: 2,
                        version: "0.6.1",

                        //called when the tween renders for the first time. This is where initial values should be recorded and any setup routines should run.
                        init: function(target, value, tween, index) {
                            var p, end;
                            if (typeof(target.setAttribute) !== "function") {
                                return false;
                            }
                            for (p in value) {
                                end = value[p];
                                if (typeof(end) === "function") {
                                    end = end(index, target);
                                }
                                this._addTween(target, "setAttribute", target.getAttribute(p) + "", end + "", p, false, p);
                                this._overwriteProps.push(p);
                            }
                            return true;
                        }

                    });

                }());










                /*
                 * ----------------------------------------------------------------
                 * DirectionalRotationPlugin
                 * ----------------------------------------------------------------
                 */
                _gsScope._gsDefine.plugin({
                    propName: "directionalRotation",
                    version: "0.3.1",
                    API: 2,

                    //called when the tween renders for the first time. This is where initial values should be recorded and any setup routines should run.
                    init: function(target, value, tween, index) {
                        if (typeof(value) !== "object") {
                            value = { rotation: value };
                        }
                        this.finals = {};
                        var cap = (value.useRadians === true) ? Math.PI * 2 : 360,
                            min = 0.000001,
                            p, v, start, end, dif, split;
                        for (p in value) {
                            if (p !== "useRadians") {
                                end = value[p];
                                if (typeof(end) === "function") {
                                    end = end(index, target);
                                }
                                split = (end + "").split("_");
                                v = split[0];
                                start = parseFloat((typeof(target[p]) !== "function") ? target[p] : target[((p.indexOf("set") || typeof(target["get" + p.substr(3)]) !== "function") ? p : "get" + p.substr(3))]());
                                end = this.finals[p] = (typeof(v) === "string" && v.charAt(1) === "=") ? start + parseInt(v.charAt(0) + "1", 10) * Number(v.substr(2)) : Number(v) || 0;
                                dif = end - start;
                                if (split.length) {
                                    v = split.join("_");
                                    if (v.indexOf("short") !== -1) {
                                        dif = dif % cap;
                                        if (dif !== dif % (cap / 2)) {
                                            dif = (dif < 0) ? dif + cap : dif - cap;
                                        }
                                    }
                                    if (v.indexOf("_cw") !== -1 && dif < 0) {
                                        dif = ((dif + cap * 9999999999) % cap) - ((dif / cap) | 0) * cap;
                                    } else if (v.indexOf("ccw") !== -1 && dif > 0) {
                                        dif = ((dif - cap * 9999999999) % cap) - ((dif / cap) | 0) * cap;
                                    }
                                }
                                if (dif > min || dif < -min) {
                                    this._addTween(target, p, start, start + dif, p);
                                    this._overwriteProps.push(p);
                                }
                            }
                        }
                        return true;
                    },

                    //called each time the values should be updated, and the ratio gets passed as the only parameter (typically it's a value between 0 and 1, but it can exceed those when using an ease like Elastic.easeOut or Back.easeOut, etc.)
                    set: function(ratio) {
                        var pt;
                        if (ratio !== 1) {
                            this._super.setRatio.call(this, ratio);
                        } else {
                            pt = this._firstPT;
                            while (pt) {
                                if (pt.f) {
                                    pt.t[pt.p](this.finals[pt.p]);
                                } else {
                                    pt.t[pt.p] = this.finals[pt.p];
                                }
                                pt = pt._next;
                            }
                        }
                    }

                })._autoCSS = true;











                /*
                 * ----------------------------------------------------------------
                 * EasePack
                 * ----------------------------------------------------------------
                 */
                _gsScope._gsDefine("easing.Back", ["easing.Ease"], function(Ease) {

                    var w = (_gsScope.GreenSockGlobals || _gsScope),
                        gs = w.com.greensock,
                        _2PI = Math.PI * 2,
                        _HALF_PI = Math.PI / 2,
                        _class = gs._class,
                        _create = function(n, f) {
                            var C = _class("easing." + n, function() {}, true),
                                p = C.prototype = new Ease();
                            p.constructor = C;
                            p.getRatio = f;
                            return C;
                        },
                        _easeReg = Ease.register || function() {}, //put an empty function in place just as a safety measure in case someone loads an OLD version of TweenLite.js where Ease.register doesn't exist.
                        _wrap = function(name, EaseOut, EaseIn, EaseInOut, aliases) {
                            var C = _class("easing." + name, {
                                easeOut: new EaseOut(),
                                easeIn: new EaseIn(),
                                easeInOut: new EaseInOut()
                            }, true);
                            _easeReg(C, name);
                            return C;
                        },
                        EasePoint = function(time, value, next) {
                            this.t = time;
                            this.v = value;
                            if (next) {
                                this.next = next;
                                next.prev = this;
                                this.c = next.v - value;
                                this.gap = next.t - time;
                            }
                        },

                        //Back
                        _createBack = function(n, f) {
                            var C = _class("easing." + n, function(overshoot) {
                                    this._p1 = (overshoot || overshoot === 0) ? overshoot : 1.70158;
                                    this._p2 = this._p1 * 1.525;
                                }, true),
                                p = C.prototype = new Ease();
                            p.constructor = C;
                            p.getRatio = f;
                            p.config = function(overshoot) {
                                return new C(overshoot);
                            };
                            return C;
                        },

                        Back = _wrap("Back",
                            _createBack("BackOut", function(p) {
                                return ((p = p - 1) * p * ((this._p1 + 1) * p + this._p1) + 1);
                            }),
                            _createBack("BackIn", function(p) {
                                return p * p * ((this._p1 + 1) * p - this._p1);
                            }),
                            _createBack("BackInOut", function(p) {
                                return ((p *= 2) < 1) ? 0.5 * p * p * ((this._p2 + 1) * p - this._p2) : 0.5 * ((p -= 2) * p * ((this._p2 + 1) * p + this._p2) + 2);
                            })
                        ),


                        //SlowMo
                        SlowMo = _class("easing.SlowMo", function(linearRatio, power, yoyoMode) {
                            power = (power || power === 0) ? power : 0.7;
                            if (linearRatio == null) {
                                linearRatio = 0.7;
                            } else if (linearRatio > 1) {
                                linearRatio = 1;
                            }
                            this._p = (linearRatio !== 1) ? power : 0;
                            this._p1 = (1 - linearRatio) / 2;
                            this._p2 = linearRatio;
                            this._p3 = this._p1 + this._p2;
                            this._calcEnd = (yoyoMode === true);
                        }, true),
                        p = SlowMo.prototype = new Ease(),
                        SteppedEase, RoughEase, _createElastic;

                    p.constructor = SlowMo;
                    p.getRatio = function(p) {
                        var r = p + (0.5 - p) * this._p;
                        if (p < this._p1) {
                            return this._calcEnd ? 1 - ((p = 1 - (p / this._p1)) * p) : r - ((p = 1 - (p / this._p1)) * p * p * p * r);
                        } else if (p > this._p3) {
                            return this._calcEnd ? 1 - (p = (p - this._p3) / this._p1) * p : r + ((p - r) * (p = (p - this._p3) / this._p1) * p * p * p);
                        }
                        return this._calcEnd ? 1 : r;
                    };
                    SlowMo.ease = new SlowMo(0.7, 0.7);

                    p.config = SlowMo.config = function(linearRatio, power, yoyoMode) {
                        return new SlowMo(linearRatio, power, yoyoMode);
                    };


                    //SteppedEase
                    SteppedEase = _class("easing.SteppedEase", function(steps, immediateStart) {
                        steps = steps || 1;
                        this._p1 = 1 / steps;
                        this._p2 = steps + (immediateStart ? 0 : 1);
                        this._p3 = immediateStart ? 1 : 0;
                    }, true);
                    p = SteppedEase.prototype = new Ease();
                    p.constructor = SteppedEase;
                    p.getRatio = function(p) {
                        if (p < 0) {
                            p = 0;
                        } else if (p >= 1) {
                            p = 0.999999999;
                        }
                        return (((this._p2 * p) | 0) + this._p3) * this._p1;
                    };
                    p.config = SteppedEase.config = function(steps, immediateStart) {
                        return new SteppedEase(steps, immediateStart);
                    };


                    //RoughEase
                    RoughEase = _class("easing.RoughEase", function(vars) {
                        vars = vars || {};
                        var taper = vars.taper || "none",
                            a = [],
                            cnt = 0,
                            points = (vars.points || 20) | 0,
                            i = points,
                            randomize = (vars.randomize !== false),
                            clamp = (vars.clamp === true),
                            template = (vars.template instanceof Ease) ? vars.template : null,
                            strength = (typeof(vars.strength) === "number") ? vars.strength * 0.4 : 0.4,
                            x, y, bump, invX, obj, pnt;
                        while (--i > -1) {
                            x = randomize ? Math.random() : (1 / points) * i;
                            y = template ? template.getRatio(x) : x;
                            if (taper === "none") {
                                bump = strength;
                            } else if (taper === "out") {
                                invX = 1 - x;
                                bump = invX * invX * strength;
                            } else if (taper === "in") {
                                bump = x * x * strength;
                            } else if (x < 0.5) { //"both" (start)
                                invX = x * 2;
                                bump = invX * invX * 0.5 * strength;
                            } else { //"both" (end)
                                invX = (1 - x) * 2;
                                bump = invX * invX * 0.5 * strength;
                            }
                            if (randomize) {
                                y += (Math.random() * bump) - (bump * 0.5);
                            } else if (i % 2) {
                                y += bump * 0.5;
                            } else {
                                y -= bump * 0.5;
                            }
                            if (clamp) {
                                if (y > 1) {
                                    y = 1;
                                } else if (y < 0) {
                                    y = 0;
                                }
                            }
                            a[cnt++] = { x: x, y: y };
                        }
                        a.sort(function(a, b) {
                            return a.x - b.x;
                        });

                        pnt = new EasePoint(1, 1, null);
                        i = points;
                        while (--i > -1) {
                            obj = a[i];
                            pnt = new EasePoint(obj.x, obj.y, pnt);
                        }

                        this._prev = new EasePoint(0, 0, (pnt.t !== 0) ? pnt : pnt.next);
                    }, true);
                    p = RoughEase.prototype = new Ease();
                    p.constructor = RoughEase;
                    p.getRatio = function(p) {
                        var pnt = this._prev;
                        if (p > pnt.t) {
                            while (pnt.next && p >= pnt.t) {
                                pnt = pnt.next;
                            }
                            pnt = pnt.prev;
                        } else {
                            while (pnt.prev && p <= pnt.t) {
                                pnt = pnt.prev;
                            }
                        }
                        this._prev = pnt;
                        return (pnt.v + ((p - pnt.t) / pnt.gap) * pnt.c);
                    };
                    p.config = function(vars) {
                        return new RoughEase(vars);
                    };
                    RoughEase.ease = new RoughEase();


                    //Bounce
                    _wrap("Bounce",
                        _create("BounceOut", function(p) {
                            if (p < 1 / 2.75) {
                                return 7.5625 * p * p;
                            } else if (p < 2 / 2.75) {
                                return 7.5625 * (p -= 1.5 / 2.75) * p + 0.75;
                            } else if (p < 2.5 / 2.75) {
                                return 7.5625 * (p -= 2.25 / 2.75) * p + 0.9375;
                            }
                            return 7.5625 * (p -= 2.625 / 2.75) * p + 0.984375;
                        }),
                        _create("BounceIn", function(p) {
                            if ((p = 1 - p) < 1 / 2.75) {
                                return 1 - (7.5625 * p * p);
                            } else if (p < 2 / 2.75) {
                                return 1 - (7.5625 * (p -= 1.5 / 2.75) * p + 0.75);
                            } else if (p < 2.5 / 2.75) {
                                return 1 - (7.5625 * (p -= 2.25 / 2.75) * p + 0.9375);
                            }
                            return 1 - (7.5625 * (p -= 2.625 / 2.75) * p + 0.984375);
                        }),
                        _create("BounceInOut", function(p) {
                            var invert = (p < 0.5);
                            if (invert) {
                                p = 1 - (p * 2);
                            } else {
                                p = (p * 2) - 1;
                            }
                            if (p < 1 / 2.75) {
                                p = 7.5625 * p * p;
                            } else if (p < 2 / 2.75) {
                                p = 7.5625 * (p -= 1.5 / 2.75) * p + 0.75;
                            } else if (p < 2.5 / 2.75) {
                                p = 7.5625 * (p -= 2.25 / 2.75) * p + 0.9375;
                            } else {
                                p = 7.5625 * (p -= 2.625 / 2.75) * p + 0.984375;
                            }
                            return invert ? (1 - p) * 0.5 : p * 0.5 + 0.5;
                        })
                    );


                    //CIRC
                    _wrap("Circ",
                        _create("CircOut", function(p) {
                            return Math.sqrt(1 - (p = p - 1) * p);
                        }),
                        _create("CircIn", function(p) {
                            return -(Math.sqrt(1 - (p * p)) - 1);
                        }),
                        _create("CircInOut", function(p) {
                            return ((p *= 2) < 1) ? -0.5 * (Math.sqrt(1 - p * p) - 1) : 0.5 * (Math.sqrt(1 - (p -= 2) * p) + 1);
                        })
                    );


                    //Elastic
                    _createElastic = function(n, f, def) {
                        var C = _class("easing." + n, function(amplitude, period) {
                                this._p1 = (amplitude >= 1) ? amplitude : 1; //note: if amplitude is < 1, we simply adjust the period for a more natural feel. Otherwise the math doesn't work right and the curve starts at 1.
                                this._p2 = (period || def) / (amplitude < 1 ? amplitude : 1);
                                this._p3 = this._p2 / _2PI * (Math.asin(1 / this._p1) || 0);
                                this._p2 = _2PI / this._p2; //precalculate to optimize
                            }, true),
                            p = C.prototype = new Ease();
                        p.constructor = C;
                        p.getRatio = f;
                        p.config = function(amplitude, period) {
                            return new C(amplitude, period);
                        };
                        return C;
                    };
                    _wrap("Elastic",
                        _createElastic("ElasticOut", function(p) {
                            return this._p1 * Math.pow(2, -10 * p) * Math.sin((p - this._p3) * this._p2) + 1;
                        }, 0.3),
                        _createElastic("ElasticIn", function(p) {
                            return -(this._p1 * Math.pow(2, 10 * (p -= 1)) * Math.sin((p - this._p3) * this._p2));
                        }, 0.3),
                        _createElastic("ElasticInOut", function(p) {
                            return ((p *= 2) < 1) ? -0.5 * (this._p1 * Math.pow(2, 10 * (p -= 1)) * Math.sin((p - this._p3) * this._p2)) : this._p1 * Math.pow(2, -10 * (p -= 1)) * Math.sin((p - this._p3) * this._p2) * 0.5 + 1;
                        }, 0.45)
                    );


                    //Expo
                    _wrap("Expo",
                        _create("ExpoOut", function(p) {
                            return 1 - Math.pow(2, -10 * p);
                        }),
                        _create("ExpoIn", function(p) {
                            return Math.pow(2, 10 * (p - 1)) - 0.001;
                        }),
                        _create("ExpoInOut", function(p) {
                            return ((p *= 2) < 1) ? 0.5 * Math.pow(2, 10 * (p - 1)) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));
                        })
                    );


                    //Sine
                    _wrap("Sine",
                        _create("SineOut", function(p) {
                            return Math.sin(p * _HALF_PI);
                        }),
                        _create("SineIn", function(p) {
                            return -Math.cos(p * _HALF_PI) + 1;
                        }),
                        _create("SineInOut", function(p) {
                            return -0.5 * (Math.cos(Math.PI * p) - 1);
                        })
                    );

                    _class("easing.EaseLookup", {
                        find: function(s) {
                            return Ease.map[s];
                        }
                    }, true);

                    //register the non-standard eases
                    _easeReg(w.SlowMo, "SlowMo", "ease,");
                    _easeReg(RoughEase, "RoughEase", "ease,");
                    _easeReg(SteppedEase, "SteppedEase", "ease,");

                    return Back;

                }, true);


            });

            if (_gsScope._gsDefine) { _gsScope._gsQueue.pop()(); } //necessary in case TweenLite was already loaded separately.











            /*
             * ----------------------------------------------------------------
             * Base classes like TweenLite, SimpleTimeline, Ease, Ticker, etc.
             * ----------------------------------------------------------------
             */
            (function(window, moduleName) {

                "use strict";
                var _exports = {},
                    _doc = window.document,
                    _globals = window.GreenSockGlobals = window.GreenSockGlobals || window;
                if (_globals.TweenLite) {
                    return; //in case the core set of classes is already loaded, don't instantiate twice.
                }
                var _namespace = function(ns) {
                        var a = ns.split("."),
                            p = _globals,
                            i;
                        for (i = 0; i < a.length; i++) {
                            p[a[i]] = p = p[a[i]] || {};
                        }
                        return p;
                    },
                    gs = _namespace("com.greensock"),
                    _tinyNum = 0.0000000001,
                    _slice = function(a) { //don't use Array.prototype.slice.call(target, 0) because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()
                        var b = [],
                            l = a.length,
                            i;
                        for (i = 0; i !== l; b.push(a[i++])) {}
                        return b;
                    },
                    _emptyFunc = function() {},
                    _isArray = (function() { //works around issues in iframe environments where the Array global isn't shared, thus if the object originates in a different window/iframe, "(obj instanceof Array)" will evaluate false. We added some speed optimizations to avoid Object.prototype.toString.call() unless it's absolutely necessary because it's VERY slow (like 20x slower)
                        var toString = Object.prototype.toString,
                            array = toString.call([]);
                        return function(obj) {
                            return obj != null && (obj instanceof Array || (typeof(obj) === "object" && !!obj.push && toString.call(obj) === array));
                        };
                    }()),
                    a, i, p, _ticker, _tickerActive,
                    _defLookup = {},

                    /**
                     * @constructor
                     * Defines a GreenSock class, optionally with an array of dependencies that must be instantiated first and passed into the definition.
                     * This allows users to load GreenSock JS files in any order even if they have interdependencies (like CSSPlugin extends TweenPlugin which is
                     * inside TweenLite.js, but if CSSPlugin is loaded first, it should wait to run its code until TweenLite.js loads and instantiates TweenPlugin
                     * and then pass TweenPlugin to CSSPlugin's definition). This is all done automatically and internally.
                     *
                     * Every definition will be added to a "com.greensock" global object (typically window, but if a window.GreenSockGlobals object is found,
                     * it will go there as of v1.7). For example, TweenLite will be found at window.com.greensock.TweenLite and since it's a global class that should be available anywhere,
                     * it is ALSO referenced at window.TweenLite. However some classes aren't considered global, like the base com.greensock.core.Animation class, so
                     * those will only be at the package like window.com.greensock.core.Animation. Again, if you define a GreenSockGlobals object on the window, everything
                     * gets tucked neatly inside there instead of on the window directly. This allows you to do advanced things like load multiple versions of GreenSock
                     * files and put them into distinct objects (imagine a banner ad uses a newer version but the main site uses an older one). In that case, you could
                     * sandbox the banner one like:
                     *
                     * <script>
                     *     var gs = window.GreenSockGlobals = {}; //the newer version we're about to load could now be referenced in a "gs" object, like gs.TweenLite.to(...). Use whatever alias you want as long as it's unique, "gs" or "banner" or whatever.
                     * </script>
                     * <script src="js/greensock/v1.7/TweenMax.js"></script>
                     * <script>
                     *     window.GreenSockGlobals = window._gsQueue = window._gsDefine = null; //reset it back to null (along with the special _gsQueue variable) so that the next load of TweenMax affects the window and we can reference things directly like TweenLite.to(...)
                     * </script>
                     * <script src="js/greensock/v1.6/TweenMax.js"></script>
                     * <script>
                     *     gs.TweenLite.to(...); //would use v1.7
                     *     TweenLite.to(...); //would use v1.6
                     * </script>
                     *
                     * @param {!string} ns The namespace of the class definition, leaving off "com.greensock." as that's assumed. For example, "TweenLite" or "plugins.CSSPlugin" or "easing.Back".
                     * @param {!Array.<string>} dependencies An array of dependencies (described as their namespaces minus "com.greensock." prefix). For example ["TweenLite","plugins.TweenPlugin","core.Animation"]
                     * @param {!function():Object} func The function that should be called and passed the resolved dependencies which will return the actual class for this definition.
                     * @param {boolean=} global If true, the class will be added to the global scope (typically window unless you define a window.GreenSockGlobals object)
                     */
                    Definition = function(ns, dependencies, func, global) {
                        this.sc = (_defLookup[ns]) ? _defLookup[ns].sc : []; //subclasses
                        _defLookup[ns] = this;
                        this.gsClass = null;
                        this.func = func;
                        var _classes = [];
                        this.check = function(init) {
                            var i = dependencies.length,
                                missing = i,
                                cur, a, n, cl;
                            while (--i > -1) {
                                if ((cur = _defLookup[dependencies[i]] || new Definition(dependencies[i], [])).gsClass) {
                                    _classes[i] = cur.gsClass;
                                    missing--;
                                } else if (init) {
                                    cur.sc.push(this);
                                }
                            }
                            if (missing === 0 && func) {
                                a = ("com.greensock." + ns).split(".");
                                n = a.pop();
                                cl = _namespace(a.join("."))[n] = this.gsClass = func.apply(func, _classes);

                                //exports to multiple environments
                                if (global) {
                                    _globals[n] = _exports[n] = cl; //provides a way to avoid global namespace pollution. By default, the main classes like TweenLite, Power1, Strong, etc. are added to window unless a GreenSockGlobals is defined. So if you want to have things added to a custom object instead, just do something like window.GreenSockGlobals = {} before loading any GreenSock files. You can even set up an alias like window.GreenSockGlobals = windows.gs = {} so that you can access everything like gs.TweenLite. Also remember that ALL classes are added to the window.com.greensock object (in their respective packages, like com.greensock.easing.Power1, com.greensock.TweenLite, etc.)
                                    if (typeof(module) !== "undefined" && module.exports) { //node
                                        if (ns === moduleName) {
                                            module.exports = _exports[moduleName] = cl;
                                            for (i in _exports) {
                                                cl[i] = _exports[i];
                                            }
                                        } else if (_exports[moduleName]) {
                                            _exports[moduleName][n] = cl;
                                        }
                                    } else if (true) { //AMD
                                        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() { return cl; }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
                                    }
                                }
                                for (i = 0; i < this.sc.length; i++) {
                                    this.sc[i].check();
                                }
                            }
                        };
                        this.check(true);
                    },

                    //used to create Definition instances (which basically registers a class that has dependencies).
                    _gsDefine = window._gsDefine = function(ns, dependencies, func, global) {
                        return new Definition(ns, dependencies, func, global);
                    },

                    //a quick way to create a class that doesn't have any dependencies. Returns the class, but first registers it in the GreenSock namespace so that other classes can grab it (other classes might be dependent on the class).
                    _class = gs._class = function(ns, func, global) {
                        func = func || function() {};
                        _gsDefine(ns, [], function() { return func; }, global);
                        return func;
                    };

                _gsDefine.globals = _globals;



                /*
                 * ----------------------------------------------------------------
                 * Ease
                 * ----------------------------------------------------------------
                 */
                var _baseParams = [0, 0, 1, 1],
                    Ease = _class("easing.Ease", function(func, extraParams, type, power) {
                        this._func = func;
                        this._type = type || 0;
                        this._power = power || 0;
                        this._params = extraParams ? _baseParams.concat(extraParams) : _baseParams;
                    }, true),
                    _easeMap = Ease.map = {},
                    _easeReg = Ease.register = function(ease, names, types, create) {
                        var na = names.split(","),
                            i = na.length,
                            ta = (types || "easeIn,easeOut,easeInOut").split(","),
                            e, name, j, type;
                        while (--i > -1) {
                            name = na[i];
                            e = create ? _class("easing." + name, null, true) : gs.easing[name] || {};
                            j = ta.length;
                            while (--j > -1) {
                                type = ta[j];
                                _easeMap[name + "." + type] = _easeMap[type + name] = e[type] = ease.getRatio ? ease : ease[type] || new ease();
                            }
                        }
                    };

                p = Ease.prototype;
                p._calcEnd = false;
                p.getRatio = function(p) {
                    if (this._func) {
                        this._params[0] = p;
                        return this._func.apply(null, this._params);
                    }
                    var t = this._type,
                        pw = this._power,
                        r = (t === 1) ? 1 - p : (t === 2) ? p : (p < 0.5) ? p * 2 : (1 - p) * 2;
                    if (pw === 1) {
                        r *= r;
                    } else if (pw === 2) {
                        r *= r * r;
                    } else if (pw === 3) {
                        r *= r * r * r;
                    } else if (pw === 4) {
                        r *= r * r * r * r;
                    }
                    return (t === 1) ? 1 - r : (t === 2) ? r : (p < 0.5) ? r / 2 : 1 - (r / 2);
                };

                //create all the standard eases like Linear, Quad, Cubic, Quart, Quint, Strong, Power0, Power1, Power2, Power3, and Power4 (each with easeIn, easeOut, and easeInOut)
                a = ["Linear", "Quad", "Cubic", "Quart", "Quint,Strong"];
                i = a.length;
                while (--i > -1) {
                    p = a[i] + ",Power" + i;
                    _easeReg(new Ease(null, null, 1, i), p, "easeOut", true);
                    _easeReg(new Ease(null, null, 2, i), p, "easeIn" + ((i === 0) ? ",easeNone" : ""));
                    _easeReg(new Ease(null, null, 3, i), p, "easeInOut");
                }
                _easeMap.linear = gs.easing.Linear.easeIn;
                _easeMap.swing = gs.easing.Quad.easeInOut; //for jQuery folks


                /*
                 * ----------------------------------------------------------------
                 * EventDispatcher
                 * ----------------------------------------------------------------
                 */
                var EventDispatcher = _class("events.EventDispatcher", function(target) {
                    this._listeners = {};
                    this._eventTarget = target || this;
                });
                p = EventDispatcher.prototype;

                p.addEventListener = function(type, callback, scope, useParam, priority) {
                    priority = priority || 0;
                    var list = this._listeners[type],
                        index = 0,
                        listener, i;
                    if (this === _ticker && !_tickerActive) {
                        _ticker.wake();
                    }
                    if (list == null) {
                        this._listeners[type] = list = [];
                    }
                    i = list.length;
                    while (--i > -1) {
                        listener = list[i];
                        if (listener.c === callback && listener.s === scope) {
                            list.splice(i, 1);
                        } else if (index === 0 && listener.pr < priority) {
                            index = i + 1;
                        }
                    }
                    list.splice(index, 0, { c: callback, s: scope, up: useParam, pr: priority });
                };

                p.removeEventListener = function(type, callback) {
                    var list = this._listeners[type],
                        i;
                    if (list) {
                        i = list.length;
                        while (--i > -1) {
                            if (list[i].c === callback) {
                                list.splice(i, 1);
                                return;
                            }
                        }
                    }
                };

                p.dispatchEvent = function(type) {
                    var list = this._listeners[type],
                        i, t, listener;
                    if (list) {
                        i = list.length;
                        if (i > 1) {
                            list = list.slice(0); //in case addEventListener() is called from within a listener/callback (otherwise the index could change, resulting in a skip)
                        }
                        t = this._eventTarget;
                        while (--i > -1) {
                            listener = list[i];
                            if (listener) {
                                if (listener.up) {
                                    listener.c.call(listener.s || t, { type: type, target: t });
                                } else {
                                    listener.c.call(listener.s || t);
                                }
                            }
                        }
                    }
                };


                /*
                 * ----------------------------------------------------------------
                 * Ticker
                 * ----------------------------------------------------------------
                 */
                var _reqAnimFrame = window.requestAnimationFrame,
                    _cancelAnimFrame = window.cancelAnimationFrame,
                    _getTime = Date.now || function() { return new Date().getTime(); },
                    _lastUpdate = _getTime();

                //now try to determine the requestAnimationFrame and cancelAnimationFrame functions and if none are found, we'll use a setTimeout()/clearTimeout() polyfill.
                a = ["ms", "moz", "webkit", "o"];
                i = a.length;
                while (--i > -1 && !_reqAnimFrame) {
                    _reqAnimFrame = window[a[i] + "RequestAnimationFrame"];
                    _cancelAnimFrame = window[a[i] + "CancelAnimationFrame"] || window[a[i] + "CancelRequestAnimationFrame"];
                }

                _class("Ticker", function(fps, useRAF) {
                    var _self = this,
                        _startTime = _getTime(),
                        _useRAF = (useRAF !== false && _reqAnimFrame) ? "auto" : false,
                        _lagThreshold = 500,
                        _adjustedLag = 33,
                        _tickWord = "tick", //helps reduce gc burden
                        _fps, _req, _id, _gap, _nextTime,
                        _tick = function(manual) {
                            var elapsed = _getTime() - _lastUpdate,
                                overlap, dispatch;
                            if (elapsed > _lagThreshold) {
                                _startTime += elapsed - _adjustedLag;
                            }
                            _lastUpdate += elapsed;
                            _self.time = (_lastUpdate - _startTime) / 1000;
                            overlap = _self.time - _nextTime;
                            if (!_fps || overlap > 0 || manual === true) {
                                _self.frame++;
                                _nextTime += overlap + (overlap >= _gap ? 0.004 : _gap - overlap);
                                dispatch = true;
                            }
                            if (manual !== true) { //make sure the request is made before we dispatch the "tick" event so that timing is maintained. Otherwise, if processing the "tick" requires a bunch of time (like 15ms) and we're using a setTimeout() that's based on 16.7ms, it'd technically take 31.7ms between frames otherwise.
                                _id = _req(_tick);
                            }
                            if (dispatch) {
                                _self.dispatchEvent(_tickWord);
                            }
                        };

                    EventDispatcher.call(_self);
                    _self.time = _self.frame = 0;
                    _self.tick = function() {
                        _tick(true);
                    };

                    _self.lagSmoothing = function(threshold, adjustedLag) {
                        _lagThreshold = threshold || (1 / _tinyNum); //zero should be interpreted as basically unlimited
                        _adjustedLag = Math.min(adjustedLag, _lagThreshold, 0);
                    };

                    _self.sleep = function() {
                        if (_id == null) {
                            return;
                        }
                        if (!_useRAF || !_cancelAnimFrame) {
                            clearTimeout(_id);
                        } else {
                            _cancelAnimFrame(_id);
                        }
                        _req = _emptyFunc;
                        _id = null;
                        if (_self === _ticker) {
                            _tickerActive = false;
                        }
                    };

                    _self.wake = function(seamless) {
                        if (_id !== null) {
                            _self.sleep();
                        } else if (seamless) {
                            _startTime += -_lastUpdate + (_lastUpdate = _getTime());
                        } else if (_self.frame > 10) { //don't trigger lagSmoothing if we're just waking up, and make sure that at least 10 frames have elapsed because of the iOS bug that we work around below with the 1.5-second setTimout().
                            _lastUpdate = _getTime() - _lagThreshold + 5;
                        }
                        _req = (_fps === 0) ? _emptyFunc : (!_useRAF || !_reqAnimFrame) ? function(f) { return setTimeout(f, ((_nextTime - _self.time) * 1000 + 1) | 0); } : _reqAnimFrame;
                        if (_self === _ticker) {
                            _tickerActive = true;
                        }
                        _tick(2);
                    };

                    _self.fps = function(value) {
                        if (!arguments.length) {
                            return _fps;
                        }
                        _fps = value;
                        _gap = 1 / (_fps || 60);
                        _nextTime = this.time + _gap;
                        _self.wake();
                    };

                    _self.useRAF = function(value) {
                        if (!arguments.length) {
                            return _useRAF;
                        }
                        _self.sleep();
                        _useRAF = value;
                        _self.fps(_fps);
                    };
                    _self.fps(fps);

                    //a bug in iOS 6 Safari occasionally prevents the requestAnimationFrame from working initially, so we use a 1.5-second timeout that automatically falls back to setTimeout() if it senses this condition.
                    setTimeout(function() {
                        if (_useRAF === "auto" && _self.frame < 5 && _doc.visibilityState !== "hidden") {
                            _self.useRAF(false);
                        }
                    }, 1500);
                });

                p = gs.Ticker.prototype = new gs.events.EventDispatcher();
                p.constructor = gs.Ticker;


                /*
                 * ----------------------------------------------------------------
                 * Animation
                 * ----------------------------------------------------------------
                 */
                var Animation = _class("core.Animation", function(duration, vars) {
                    this.vars = vars = vars || {};
                    this._duration = this._totalDuration = duration || 0;
                    this._delay = Number(vars.delay) || 0;
                    this._timeScale = 1;
                    this._active = (vars.immediateRender === true);
                    this.data = vars.data;
                    this._reversed = (vars.reversed === true);

                    if (!_rootTimeline) {
                        return;
                    }
                    if (!_tickerActive) { //some browsers (like iOS 6 Safari) shut down JavaScript execution when the tab is disabled and they [occasionally] neglect to start up requestAnimationFrame again when returning - this code ensures that the engine starts up again properly.
                        _ticker.wake();
                    }

                    var tl = this.vars.useFrames ? _rootFramesTimeline : _rootTimeline;
                    tl.add(this, tl._time);

                    if (this.vars.paused) {
                        this.paused(true);
                    }
                });

                _ticker = Animation.ticker = new gs.Ticker();
                p = Animation.prototype;
                p._dirty = p._gc = p._initted = p._paused = false;
                p._totalTime = p._time = 0;
                p._rawPrevTime = -1;
                p._next = p._last = p._onUpdate = p._timeline = p.timeline = null;
                p._paused = false;


                //some browsers (like iOS) occasionally drop the requestAnimationFrame event when the user switches to a different tab and then comes back again, so we use a 2-second setTimeout() to sense if/when that condition occurs and then wake() the ticker.
                var _checkTimeout = function() {
                    if (_tickerActive && _getTime() - _lastUpdate > 2000 && _doc.visibilityState !== "hidden") {
                        _ticker.wake();
                    }
                    var t = setTimeout(_checkTimeout, 2000);
                    if (t.unref) {
                        // allows a node process to exit even if the timeout’s callback hasn't been invoked. Without it, the node process could hang as this function is called every two seconds.
                        t.unref();
                    }
                };
                _checkTimeout();


                p.play = function(from, suppressEvents) {
                    if (from != null) {
                        this.seek(from, suppressEvents);
                    }
                    return this.reversed(false).paused(false);
                };

                p.pause = function(atTime, suppressEvents) {
                    if (atTime != null) {
                        this.seek(atTime, suppressEvents);
                    }
                    return this.paused(true);
                };

                p.resume = function(from, suppressEvents) {
                    if (from != null) {
                        this.seek(from, suppressEvents);
                    }
                    return this.paused(false);
                };

                p.seek = function(time, suppressEvents) {
                    return this.totalTime(Number(time), suppressEvents !== false);
                };

                p.restart = function(includeDelay, suppressEvents) {
                    return this.reversed(false).paused(false).totalTime(includeDelay ? -this._delay : 0, (suppressEvents !== false), true);
                };

                p.reverse = function(from, suppressEvents) {
                    if (from != null) {
                        this.seek((from || this.totalDuration()), suppressEvents);
                    }
                    return this.reversed(true).paused(false);
                };

                p.render = function(time, suppressEvents, force) {
                    //stub - we override this method in subclasses.
                };

                p.invalidate = function() {
                    this._time = this._totalTime = 0;
                    this._initted = this._gc = false;
                    this._rawPrevTime = -1;
                    if (this._gc || !this.timeline) {
                        this._enabled(true);
                    }
                    return this;
                };

                p.isActive = function() {
                    var tl = this._timeline, //the 2 root timelines won't have a _timeline; they're always active.
                        startTime = this._startTime,
                        rawTime;
                    return (!tl || (!this._gc && !this._paused && tl.isActive() && (rawTime = tl.rawTime(true)) >= startTime && rawTime < startTime + this.totalDuration() / this._timeScale - 0.0000001));
                };

                p._enabled = function(enabled, ignoreTimeline) {
                    if (!_tickerActive) {
                        _ticker.wake();
                    }
                    this._gc = !enabled;
                    this._active = this.isActive();
                    if (ignoreTimeline !== true) {
                        if (enabled && !this.timeline) {
                            this._timeline.add(this, this._startTime - this._delay);
                        } else if (!enabled && this.timeline) {
                            this._timeline._remove(this, true);
                        }
                    }
                    return false;
                };


                p._kill = function(vars, target) {
                    return this._enabled(false, false);
                };

                p.kill = function(vars, target) {
                    this._kill(vars, target);
                    return this;
                };

                p._uncache = function(includeSelf) {
                    var tween = includeSelf ? this : this.timeline;
                    while (tween) {
                        tween._dirty = true;
                        tween = tween.timeline;
                    }
                    return this;
                };

                p._swapSelfInParams = function(params) {
                    var i = params.length,
                        copy = params.concat();
                    while (--i > -1) {
                        if (params[i] === "{self}") {
                            copy[i] = this;
                        }
                    }
                    return copy;
                };

                p._callback = function(type) {
                    var v = this.vars,
                        callback = v[type],
                        params = v[type + "Params"],
                        scope = v[type + "Scope"] || v.callbackScope || this,
                        l = params ? params.length : 0;
                    switch (l) { //speed optimization; call() is faster than apply() so use it when there are only a few parameters (which is by far most common). Previously we simply did var v = this.vars; v[type].apply(v[type + "Scope"] || v.callbackScope || this, v[type + "Params"] || _blankArray);
                        case 0:
                            callback.call(scope);
                            break;
                        case 1:
                            callback.call(scope, params[0]);
                            break;
                        case 2:
                            callback.call(scope, params[0], params[1]);
                            break;
                        default:
                            callback.apply(scope, params);
                    }
                };

                //----Animation getters/setters --------------------------------------------------------

                p.eventCallback = function(type, callback, params, scope) {
                    if ((type || "").substr(0, 2) === "on") {
                        var v = this.vars;
                        if (arguments.length === 1) {
                            return v[type];
                        }
                        if (callback == null) {
                            delete v[type];
                        } else {
                            v[type] = callback;
                            v[type + "Params"] = (_isArray(params) && params.join("").indexOf("{self}") !== -1) ? this._swapSelfInParams(params) : params;
                            v[type + "Scope"] = scope;
                        }
                        if (type === "onUpdate") {
                            this._onUpdate = callback;
                        }
                    }
                    return this;
                };

                p.delay = function(value) {
                    if (!arguments.length) {
                        return this._delay;
                    }
                    if (this._timeline.smoothChildTiming) {
                        this.startTime(this._startTime + value - this._delay);
                    }
                    this._delay = value;
                    return this;
                };

                p.duration = function(value) {
                    if (!arguments.length) {
                        this._dirty = false;
                        return this._duration;
                    }
                    this._duration = this._totalDuration = value;
                    this._uncache(true); //true in case it's a TweenMax or TimelineMax that has a repeat - we'll need to refresh the totalDuration.
                    if (this._timeline.smoothChildTiming)
                        if (this._time > 0)
                            if (this._time < this._duration)
                                if (value !== 0) {
                                    this.totalTime(this._totalTime * (value / this._duration), true);
                                }
                    return this;
                };

                p.totalDuration = function(value) {
                    this._dirty = false;
                    return (!arguments.length) ? this._totalDuration : this.duration(value);
                };

                p.time = function(value, suppressEvents) {
                    if (!arguments.length) {
                        return this._time;
                    }
                    if (this._dirty) {
                        this.totalDuration();
                    }
                    return this.totalTime((value > this._duration) ? this._duration : value, suppressEvents);
                };

                p.totalTime = function(time, suppressEvents, uncapped) {
                    if (!_tickerActive) {
                        _ticker.wake();
                    }
                    if (!arguments.length) {
                        return this._totalTime;
                    }
                    if (this._timeline) {
                        if (time < 0 && !uncapped) {
                            time += this.totalDuration();
                        }
                        if (this._timeline.smoothChildTiming) {
                            if (this._dirty) {
                                this.totalDuration();
                            }
                            var totalDuration = this._totalDuration,
                                tl = this._timeline;
                            if (time > totalDuration && !uncapped) {
                                time = totalDuration;
                            }
                            this._startTime = (this._paused ? this._pauseTime : tl._time) - ((!this._reversed ? time : totalDuration - time) / this._timeScale);
                            if (!tl._dirty) { //for performance improvement. If the parent's cache is already dirty, it already took care of marking the ancestors as dirty too, so skip the function call here.
                                this._uncache(false);
                            }
                            //in case any of the ancestor timelines had completed but should now be enabled, we should reset their totalTime() which will also ensure that they're lined up properly and enabled. Skip for animations that are on the root (wasteful). Example: a TimelineLite.exportRoot() is performed when there's a paused tween on the root, the export will not complete until that tween is unpaused, but imagine a child gets restarted later, after all [unpaused] tweens have completed. The startTime of that child would get pushed out, but one of the ancestors may have completed.
                            if (tl._timeline) {
                                while (tl._timeline) {
                                    if (tl._timeline._time !== (tl._startTime + tl._totalTime) / tl._timeScale) {
                                        tl.totalTime(tl._totalTime, true);
                                    }
                                    tl = tl._timeline;
                                }
                            }
                        }
                        if (this._gc) {
                            this._enabled(true, false);
                        }
                        if (this._totalTime !== time || this._duration === 0) {
                            if (_lazyTweens.length) {
                                _lazyRender();
                            }
                            this.render(time, suppressEvents, false);
                            if (_lazyTweens.length) { //in case rendering caused any tweens to lazy-init, we should render them because typically when someone calls seek() or time() or progress(), they expect an immediate render.
                                _lazyRender();
                            }
                        }
                    }
                    return this;
                };

                p.progress = p.totalProgress = function(value, suppressEvents) {
                    var duration = this.duration();
                    return (!arguments.length) ? (duration ? this._time / duration : this.ratio) : this.totalTime(duration * value, suppressEvents);
                };

                p.startTime = function(value) {
                    if (!arguments.length) {
                        return this._startTime;
                    }
                    if (value !== this._startTime) {
                        this._startTime = value;
                        if (this.timeline)
                            if (this.timeline._sortChildren) {
                                this.timeline.add(this, value - this._delay); //ensures that any necessary re-sequencing of Animations in the timeline occurs to make sure the rendering order is correct.
                            }
                    }
                    return this;
                };

                p.endTime = function(includeRepeats) {
                    return this._startTime + ((includeRepeats != false) ? this.totalDuration() : this.duration()) / this._timeScale;
                };

                p.timeScale = function(value) {
                    if (!arguments.length) {
                        return this._timeScale;
                    }
                    value = value || _tinyNum; //can't allow zero because it'll throw the math off
                    if (this._timeline && this._timeline.smoothChildTiming) {
                        var pauseTime = this._pauseTime,
                            t = (pauseTime || pauseTime === 0) ? pauseTime : this._timeline.totalTime();
                        this._startTime = t - ((t - this._startTime) * this._timeScale / value);
                    }
                    this._timeScale = value;
                    return this._uncache(false);
                };

                p.reversed = function(value) {
                    if (!arguments.length) {
                        return this._reversed;
                    }
                    if (value != this._reversed) {
                        this._reversed = value;
                        this.totalTime(((this._timeline && !this._timeline.smoothChildTiming) ? this.totalDuration() - this._totalTime : this._totalTime), true);
                    }
                    return this;
                };

                p.paused = function(value) {
                    if (!arguments.length) {
                        return this._paused;
                    }
                    var tl = this._timeline,
                        raw, elapsed;
                    if (value != this._paused)
                        if (tl) {
                            if (!_tickerActive && !value) {
                                _ticker.wake();
                            }
                            raw = tl.rawTime();
                            elapsed = raw - this._pauseTime;
                            if (!value && tl.smoothChildTiming) {
                                this._startTime += elapsed;
                                this._uncache(false);
                            }
                            this._pauseTime = value ? raw : null;
                            this._paused = value;
                            this._active = this.isActive();
                            if (!value && elapsed !== 0 && this._initted && this.duration()) {
                                raw = tl.smoothChildTiming ? this._totalTime : (raw - this._startTime) / this._timeScale;
                                this.render(raw, (raw === this._totalTime), true); //in case the target's properties changed via some other tween or manual update by the user, we should force a render.
                            }
                        }
                    if (this._gc && !value) {
                        this._enabled(true, false);
                    }
                    return this;
                };


                /*
                 * ----------------------------------------------------------------
                 * SimpleTimeline
                 * ----------------------------------------------------------------
                 */
                var SimpleTimeline = _class("core.SimpleTimeline", function(vars) {
                    Animation.call(this, 0, vars);
                    this.autoRemoveChildren = this.smoothChildTiming = true;
                });

                p = SimpleTimeline.prototype = new Animation();
                p.constructor = SimpleTimeline;
                p.kill()._gc = false;
                p._first = p._last = p._recent = null;
                p._sortChildren = false;

                p.add = p.insert = function(child, position, align, stagger) {
                    var prevTween, st;
                    child._startTime = Number(position || 0) + child._delay;
                    if (child._paused)
                        if (this !== child._timeline) { //we only adjust the _pauseTime if it wasn't in this timeline already. Remember, sometimes a tween will be inserted again into the same timeline when its startTime is changed so that the tweens in the TimelineLite/Max are re-ordered properly in the linked list (so everything renders in the proper order).
                            child._pauseTime = child._startTime + ((this.rawTime() - child._startTime) / child._timeScale);
                        }
                    if (child.timeline) {
                        child.timeline._remove(child, true); //removes from existing timeline so that it can be properly added to this one.
                    }
                    child.timeline = child._timeline = this;
                    if (child._gc) {
                        child._enabled(true, true);
                    }
                    prevTween = this._last;
                    if (this._sortChildren) {
                        st = child._startTime;
                        while (prevTween && prevTween._startTime > st) {
                            prevTween = prevTween._prev;
                        }
                    }
                    if (prevTween) {
                        child._next = prevTween._next;
                        prevTween._next = child;
                    } else {
                        child._next = this._first;
                        this._first = child;
                    }
                    if (child._next) {
                        child._next._prev = child;
                    } else {
                        this._last = child;
                    }
                    child._prev = prevTween;
                    this._recent = child;
                    if (this._timeline) {
                        this._uncache(true);
                    }
                    return this;
                };

                p._remove = function(tween, skipDisable) {
                    if (tween.timeline === this) {
                        if (!skipDisable) {
                            tween._enabled(false, true);
                        }

                        if (tween._prev) {
                            tween._prev._next = tween._next;
                        } else if (this._first === tween) {
                            this._first = tween._next;
                        }
                        if (tween._next) {
                            tween._next._prev = tween._prev;
                        } else if (this._last === tween) {
                            this._last = tween._prev;
                        }
                        tween._next = tween._prev = tween.timeline = null;
                        if (tween === this._recent) {
                            this._recent = this._last;
                        }

                        if (this._timeline) {
                            this._uncache(true);
                        }
                    }
                    return this;
                };

                p.render = function(time, suppressEvents, force) {
                    var tween = this._first,
                        next;
                    this._totalTime = this._time = this._rawPrevTime = time;
                    while (tween) {
                        next = tween._next; //record it here because the value could change after rendering...
                        if (tween._active || (time >= tween._startTime && !tween._paused && !tween._gc)) {
                            if (!tween._reversed) {
                                tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);
                            } else {
                                tween.render(((!tween._dirty) ? tween._totalDuration : tween.totalDuration()) - ((time - tween._startTime) * tween._timeScale), suppressEvents, force);
                            }
                        }
                        tween = next;
                    }
                };

                p.rawTime = function() {
                    if (!_tickerActive) {
                        _ticker.wake();
                    }
                    return this._totalTime;
                };

                /*
                 * ----------------------------------------------------------------
                 * TweenLite
                 * ----------------------------------------------------------------
                 */
                var TweenLite = _class("TweenLite", function(target, duration, vars) {
                        Animation.call(this, duration, vars);
                        this.render = TweenLite.prototype.render; //speed optimization (avoid prototype lookup on this "hot" method)

                        if (target == null) {
                            throw "Cannot tween a null target.";
                        }

                        this.target = target = (typeof(target) !== "string") ? target : TweenLite.selector(target) || target;

                        var isSelector = (target.jquery || (target.length && target !== window && target[0] && (target[0] === window || (target[0].nodeType && target[0].style && !target.nodeType)))),
                            overwrite = this.vars.overwrite,
                            i, targ, targets;

                        this._overwrite = overwrite = (overwrite == null) ? _overwriteLookup[TweenLite.defaultOverwrite] : (typeof(overwrite) === "number") ? overwrite >> 0 : _overwriteLookup[overwrite];

                        if ((isSelector || target instanceof Array || (target.push && _isArray(target))) && typeof(target[0]) !== "number") {
                            this._targets = targets = _slice(target); //don't use Array.prototype.slice.call(target, 0) because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()
                            this._propLookup = [];
                            this._siblings = [];
                            for (i = 0; i < targets.length; i++) {
                                targ = targets[i];
                                if (!targ) {
                                    targets.splice(i--, 1);
                                    continue;
                                } else if (typeof(targ) === "string") {
                                    targ = targets[i--] = TweenLite.selector(targ); //in case it's an array of strings
                                    if (typeof(targ) === "string") {
                                        targets.splice(i + 1, 1); //to avoid an endless loop (can't imagine why the selector would return a string, but just in case)
                                    }
                                    continue;
                                } else if (targ.length && targ !== window && targ[0] && (targ[0] === window || (targ[0].nodeType && targ[0].style && !targ.nodeType))) { //in case the user is passing in an array of selector objects (like jQuery objects), we need to check one more level and pull things out if necessary. Also note that <select> elements pass all the criteria regarding length and the first child having style, so we must also check to ensure the target isn't an HTML node itself.
                                    targets.splice(i--, 1);
                                    this._targets = targets = targets.concat(_slice(targ));
                                    continue;
                                }
                                this._siblings[i] = _register(targ, this, false);
                                if (overwrite === 1)
                                    if (this._siblings[i].length > 1) {
                                        _applyOverwrite(targ, this, null, 1, this._siblings[i]);
                                    }
                            }

                        } else {
                            this._propLookup = {};
                            this._siblings = _register(target, this, false);
                            if (overwrite === 1)
                                if (this._siblings.length > 1) {
                                    _applyOverwrite(target, this, null, 1, this._siblings);
                                }
                        }
                        if (this.vars.immediateRender || (duration === 0 && this._delay === 0 && this.vars.immediateRender !== false)) {
                            this._time = -_tinyNum; //forces a render without having to set the render() "force" parameter to true because we want to allow lazying by default (using the "force" parameter always forces an immediate full render)
                            this.render(Math.min(0, -this._delay)); //in case delay is negative
                        }
                    }, true),
                    _isSelector = function(v) {
                        return (v && v.length && v !== window && v[0] && (v[0] === window || (v[0].nodeType && v[0].style && !v.nodeType))); //we cannot check "nodeType" if the target is window from within an iframe, otherwise it will trigger a security error in some browsers like Firefox.
                    },
                    _autoCSS = function(vars, target) {
                        var css = {},
                            p;
                        for (p in vars) {
                            if (!_reservedProps[p] && (!(p in target) || p === "transform" || p === "x" || p === "y" || p === "width" || p === "height" || p === "className" || p === "border") && (!_plugins[p] || (_plugins[p] && _plugins[p]._autoCSS))) { //note: <img> elements contain read-only "x" and "y" properties. We should also prioritize editing css width/height rather than the element's properties.
                                css[p] = vars[p];
                                delete vars[p];
                            }
                        }
                        vars.css = css;
                    };

                p = TweenLite.prototype = new Animation();
                p.constructor = TweenLite;
                p.kill()._gc = false;

                //----TweenLite defaults, overwrite management, and root updates ----------------------------------------------------

                p.ratio = 0;
                p._firstPT = p._targets = p._overwrittenProps = p._startAt = null;
                p._notifyPluginsOfEnabled = p._lazy = false;

                TweenLite.version = "1.20.2";
                TweenLite.defaultEase = p._ease = new Ease(null, null, 1, 1);
                TweenLite.defaultOverwrite = "auto";
                TweenLite.ticker = _ticker;
                TweenLite.autoSleep = 120;
                TweenLite.lagSmoothing = function(threshold, adjustedLag) {
                    _ticker.lagSmoothing(threshold, adjustedLag);
                };

                TweenLite.selector = window.$ || window.jQuery || function(e) {
                    var selector = window.$ || window.jQuery;
                    if (selector) {
                        TweenLite.selector = selector;
                        return selector(e);
                    }
                    return (typeof(_doc) === "undefined") ? e : (_doc.querySelectorAll ? _doc.querySelectorAll(e) : _doc.getElementById((e.charAt(0) === "#") ? e.substr(1) : e));
                };

                var _lazyTweens = [],
                    _lazyLookup = {},
                    _numbersExp = /(?:(-|-=|\+=)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/ig,
                    _relExp = /[\+-]=-?[\.\d]/,
                    //_nonNumbersExp = /(?:([\-+](?!(\d|=)))|[^\d\-+=e]|(e(?![\-+][\d])))+/ig,
                    _setRatio = function(v) {
                        var pt = this._firstPT,
                            min = 0.000001,
                            val;
                        while (pt) {
                            val = !pt.blob ? pt.c * v + pt.s : (v === 1 && this.end) ? this.end : v ? this.join("") : this.start;
                            if (pt.m) {
                                val = pt.m(val, this._target || pt.t);
                            } else if (val < min)
                                if (val > -min && !pt.blob) { //prevents issues with converting very small numbers to strings in the browser
                                    val = 0;
                                }
                            if (!pt.f) {
                                pt.t[pt.p] = val;
                            } else if (pt.fp) {
                                pt.t[pt.p](pt.fp, val);
                            } else {
                                pt.t[pt.p](val);
                            }
                            pt = pt._next;
                        }
                    },
                    //compares two strings (start/end), finds the numbers that are different and spits back an array representing the whole value but with the changing values isolated as elements. For example, "rgb(0,0,0)" and "rgb(100,50,0)" would become ["rgb(", 0, ",", 50, ",0)"]. Notice it merges the parts that are identical (performance optimization). The array also has a linked list of PropTweens attached starting with _firstPT that contain the tweening data (t, p, s, c, f, etc.). It also stores the starting value as a "start" property so that we can revert to it if/when necessary, like when a tween rewinds fully. If the quantity of numbers differs between the start and end, it will always prioritize the end value(s). The pt parameter is optional - it's for a PropTween that will be appended to the end of the linked list and is typically for actually setting the value after all of the elements have been updated (with array.join("")).
                    _blobDif = function(start, end, filter, pt) {
                        var a = [],
                            charIndex = 0,
                            s = "",
                            color = 0,
                            startNums, endNums, num, i, l, nonNumbers, currentNum;
                        a.start = start;
                        a.end = end;
                        start = a[0] = start + ""; //ensure values are strings
                        end = a[1] = end + "";
                        if (filter) {
                            filter(a); //pass an array with the starting and ending values and let the filter do whatever it needs to the values.
                            start = a[0];
                            end = a[1];
                        }
                        a.length = 0;
                        startNums = start.match(_numbersExp) || [];
                        endNums = end.match(_numbersExp) || [];
                        if (pt) {
                            pt._next = null;
                            pt.blob = 1;
                            a._firstPT = a._applyPT = pt; //apply last in the linked list (which means inserting it first)
                        }
                        l = endNums.length;
                        for (i = 0; i < l; i++) {
                            currentNum = endNums[i];
                            nonNumbers = end.substr(charIndex, end.indexOf(currentNum, charIndex) - charIndex);
                            s += (nonNumbers || !i) ? nonNumbers : ","; //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.
                            charIndex += nonNumbers.length;
                            if (color) { //sense rgba() values and round them.
                                color = (color + 1) % 5;
                            } else if (nonNumbers.substr(-5) === "rgba(") {
                                color = 1;
                            }
                            if (currentNum === startNums[i] || startNums.length <= i) {
                                s += currentNum;
                            } else {
                                if (s) {
                                    a.push(s);
                                    s = "";
                                }
                                num = parseFloat(startNums[i]);
                                a.push(num);
                                a._firstPT = { _next: a._firstPT, t: a, p: a.length - 1, s: num, c: ((currentNum.charAt(1) === "=") ? parseInt(currentNum.charAt(0) + "1", 10) * parseFloat(currentNum.substr(2)) : (parseFloat(currentNum) - num)) || 0, f: 0, m: (color && color < 4) ? Math.round : 0 };
                                //note: we don't set _prev because we'll never need to remove individual PropTweens from this list.
                            }
                            charIndex += currentNum.length;
                        }
                        s += end.substr(charIndex);
                        if (s) {
                            a.push(s);
                        }
                        a.setRatio = _setRatio;
                        if (_relExp.test(end)) { //if the end string contains relative values, delete it so that on the final render (in _setRatio()), we don't actually set it to the string with += or -= characters (forces it to use the calculated value).
                            a.end = 0;
                        }
                        return a;
                    },
                    //note: "funcParam" is only necessary for function-based getters/setters that require an extra parameter like getAttribute("width") and setAttribute("width", value). In this example, funcParam would be "width". Used by AttrPlugin for example.
                    _addPropTween = function(target, prop, start, end, overwriteProp, mod, funcParam, stringFilter, index) {
                        if (typeof(end) === "function") {
                            end = end(index || 0, target);
                        }
                        var type = typeof(target[prop]),
                            getterName = (type !== "function") ? "" : ((prop.indexOf("set") || typeof(target["get" + prop.substr(3)]) !== "function") ? prop : "get" + prop.substr(3)),
                            s = (start !== "get") ? start : !getterName ? target[prop] : funcParam ? target[getterName](funcParam) : target[getterName](),
                            isRelative = (typeof(end) === "string" && end.charAt(1) === "="),
                            pt = { t: target, p: prop, s: s, f: (type === "function"), pg: 0, n: overwriteProp || prop, m: (!mod ? 0 : (typeof(mod) === "function") ? mod : Math.round), pr: 0, c: isRelative ? parseInt(end.charAt(0) + "1", 10) * parseFloat(end.substr(2)) : (parseFloat(end) - s) || 0 },
                            blob;

                        if (typeof(s) !== "number" || (typeof(end) !== "number" && !isRelative)) {
                            if (funcParam || isNaN(s) || (!isRelative && isNaN(end)) || typeof(s) === "boolean" || typeof(end) === "boolean") {
                                //a blob (string that has multiple numbers in it)
                                pt.fp = funcParam;
                                blob = _blobDif(s, (isRelative ? parseFloat(pt.s) + pt.c : end), stringFilter || TweenLite.defaultStringFilter, pt);
                                pt = { t: blob, p: "setRatio", s: 0, c: 1, f: 2, pg: 0, n: overwriteProp || prop, pr: 0, m: 0 }; //"2" indicates it's a Blob property tween. Needed for RoundPropsPlugin for example.
                            } else {
                                pt.s = parseFloat(s);
                                if (!isRelative) {
                                    pt.c = (parseFloat(end) - pt.s) || 0;
                                }
                            }
                        }
                        if (pt.c) { //only add it to the linked list if there's a change.
                            if ((pt._next = this._firstPT)) {
                                pt._next._prev = pt;
                            }
                            this._firstPT = pt;
                            return pt;
                        }
                    },
                    _internals = TweenLite._internals = { isArray: _isArray, isSelector: _isSelector, lazyTweens: _lazyTweens, blobDif: _blobDif }, //gives us a way to expose certain private values to other GreenSock classes without contaminating tha main TweenLite object.
                    _plugins = TweenLite._plugins = {},
                    _tweenLookup = _internals.tweenLookup = {},
                    _tweenLookupNum = 0,
                    _reservedProps = _internals.reservedProps = { ease: 1, delay: 1, overwrite: 1, onComplete: 1, onCompleteParams: 1, onCompleteScope: 1, useFrames: 1, runBackwards: 1, startAt: 1, onUpdate: 1, onUpdateParams: 1, onUpdateScope: 1, onStart: 1, onStartParams: 1, onStartScope: 1, onReverseComplete: 1, onReverseCompleteParams: 1, onReverseCompleteScope: 1, onRepeat: 1, onRepeatParams: 1, onRepeatScope: 1, easeParams: 1, yoyo: 1, immediateRender: 1, repeat: 1, repeatDelay: 1, data: 1, paused: 1, reversed: 1, autoCSS: 1, lazy: 1, onOverwrite: 1, callbackScope: 1, stringFilter: 1, id: 1, yoyoEase: 1 },
                    _overwriteLookup = { none: 0, all: 1, auto: 2, concurrent: 3, allOnStart: 4, preexisting: 5, "true": 1, "false": 0 },
                    _rootFramesTimeline = Animation._rootFramesTimeline = new SimpleTimeline(),
                    _rootTimeline = Animation._rootTimeline = new SimpleTimeline(),
                    _nextGCFrame = 30,
                    _lazyRender = _internals.lazyRender = function() {
                        var i = _lazyTweens.length,
                            tween;
                        _lazyLookup = {};
                        while (--i > -1) {
                            tween = _lazyTweens[i];
                            if (tween && tween._lazy !== false) {
                                tween.render(tween._lazy[0], tween._lazy[1], true);
                                tween._lazy = false;
                            }
                        }
                        _lazyTweens.length = 0;
                    };

                _rootTimeline._startTime = _ticker.time;
                _rootFramesTimeline._startTime = _ticker.frame;
                _rootTimeline._active = _rootFramesTimeline._active = true;
                setTimeout(_lazyRender, 1); //on some mobile devices, there isn't a "tick" before code runs which means any lazy renders wouldn't run before the next official "tick".

                Animation._updateRoot = TweenLite.render = function() {
                    var i, a, p;
                    if (_lazyTweens.length) { //if code is run outside of the requestAnimationFrame loop, there may be tweens queued AFTER the engine refreshed, so we need to ensure any pending renders occur before we refresh again.
                        _lazyRender();
                    }
                    _rootTimeline.render((_ticker.time - _rootTimeline._startTime) * _rootTimeline._timeScale, false, false);
                    _rootFramesTimeline.render((_ticker.frame - _rootFramesTimeline._startTime) * _rootFramesTimeline._timeScale, false, false);
                    if (_lazyTweens.length) {
                        _lazyRender();
                    }
                    if (_ticker.frame >= _nextGCFrame) { //dump garbage every 120 frames or whatever the user sets TweenLite.autoSleep to
                        _nextGCFrame = _ticker.frame + (parseInt(TweenLite.autoSleep, 10) || 120);
                        for (p in _tweenLookup) {
                            a = _tweenLookup[p].tweens;
                            i = a.length;
                            while (--i > -1) {
                                if (a[i]._gc) {
                                    a.splice(i, 1);
                                }
                            }
                            if (a.length === 0) {
                                delete _tweenLookup[p];
                            }
                        }
                        //if there are no more tweens in the root timelines, or if they're all paused, make the _timer sleep to reduce load on the CPU slightly
                        p = _rootTimeline._first;
                        if (!p || p._paused)
                            if (TweenLite.autoSleep && !_rootFramesTimeline._first && _ticker._listeners.tick.length === 1) {
                                while (p && p._paused) {
                                    p = p._next;
                                }
                                if (!p) {
                                    _ticker.sleep();
                                }
                            }
                    }
                };

                _ticker.addEventListener("tick", Animation._updateRoot);

                var _register = function(target, tween, scrub) {
                        var id = target._gsTweenID,
                            a, i;
                        if (!_tweenLookup[id || (target._gsTweenID = id = "t" + (_tweenLookupNum++))]) {
                            _tweenLookup[id] = { target: target, tweens: [] };
                        }
                        if (tween) {
                            a = _tweenLookup[id].tweens;
                            a[(i = a.length)] = tween;
                            if (scrub) {
                                while (--i > -1) {
                                    if (a[i] === tween) {
                                        a.splice(i, 1);
                                    }
                                }
                            }
                        }
                        return _tweenLookup[id].tweens;
                    },
                    _onOverwrite = function(overwrittenTween, overwritingTween, target, killedProps) {
                        var func = overwrittenTween.vars.onOverwrite,
                            r1, r2;
                        if (func) {
                            r1 = func(overwrittenTween, overwritingTween, target, killedProps);
                        }
                        func = TweenLite.onOverwrite;
                        if (func) {
                            r2 = func(overwrittenTween, overwritingTween, target, killedProps);
                        }
                        return (r1 !== false && r2 !== false);
                    },
                    _applyOverwrite = function(target, tween, props, mode, siblings) {
                        var i, changed, curTween, l;
                        if (mode === 1 || mode >= 4) {
                            l = siblings.length;
                            for (i = 0; i < l; i++) {
                                if ((curTween = siblings[i]) !== tween) {
                                    if (!curTween._gc) {
                                        if (curTween._kill(null, target, tween)) {
                                            changed = true;
                                        }
                                    }
                                } else if (mode === 5) {
                                    break;
                                }
                            }
                            return changed;
                        }
                        //NOTE: Add 0.0000000001 to overcome floating point errors that can cause the startTime to be VERY slightly off (when a tween's time() is set for example)
                        var startTime = tween._startTime + _tinyNum,
                            overlaps = [],
                            oCount = 0,
                            zeroDur = (tween._duration === 0),
                            globalStart;
                        i = siblings.length;
                        while (--i > -1) {
                            if ((curTween = siblings[i]) === tween || curTween._gc || curTween._paused) {
                                //ignore
                            } else if (curTween._timeline !== tween._timeline) {
                                globalStart = globalStart || _checkOverlap(tween, 0, zeroDur);
                                if (_checkOverlap(curTween, globalStart, zeroDur) === 0) {
                                    overlaps[oCount++] = curTween;
                                }
                            } else if (curTween._startTime <= startTime)
                                if (curTween._startTime + curTween.totalDuration() / curTween._timeScale > startTime)
                                    if (!((zeroDur || !curTween._initted) && startTime - curTween._startTime <= 0.0000000002)) {
                                        overlaps[oCount++] = curTween;
                                    }
                        }

                        i = oCount;
                        while (--i > -1) {
                            curTween = overlaps[i];
                            if (mode === 2)
                                if (curTween._kill(props, target, tween)) {
                                    changed = true;
                                }
                            if (mode !== 2 || (!curTween._firstPT && curTween._initted)) {
                                if (mode !== 2 && !_onOverwrite(curTween, tween)) {
                                    continue;
                                }
                                if (curTween._enabled(false, false)) { //if all property tweens have been overwritten, kill the tween.
                                    changed = true;
                                }
                            }
                        }
                        return changed;
                    },
                    _checkOverlap = function(tween, reference, zeroDur) {
                        var tl = tween._timeline,
                            ts = tl._timeScale,
                            t = tween._startTime;
                        while (tl._timeline) {
                            t += tl._startTime;
                            ts *= tl._timeScale;
                            if (tl._paused) {
                                return -100;
                            }
                            tl = tl._timeline;
                        }
                        t /= ts;
                        return (t > reference) ? t - reference : ((zeroDur && t === reference) || (!tween._initted && t - reference < 2 * _tinyNum)) ? _tinyNum : ((t += tween.totalDuration() / tween._timeScale / ts) > reference + _tinyNum) ? 0 : t - reference - _tinyNum;
                    };


                //---- TweenLite instance methods -----------------------------------------------------------------------------

                p._init = function() {
                    var v = this.vars,
                        op = this._overwrittenProps,
                        dur = this._duration,
                        immediate = !!v.immediateRender,
                        ease = v.ease,
                        i, initPlugins, pt, p, startVars, l;
                    if (v.startAt) {
                        if (this._startAt) {
                            this._startAt.render(-1, true); //if we've run a startAt previously (when the tween instantiated), we should revert it so that the values re-instantiate correctly particularly for relative tweens. Without this, a TweenLite.fromTo(obj, 1, {x:"+=100"}, {x:"-=100"}), for example, would actually jump to +=200 because the startAt would run twice, doubling the relative change.
                            this._startAt.kill();
                        }
                        startVars = {};
                        for (p in v.startAt) { //copy the properties/values into a new object to avoid collisions, like var to = {x:0}, from = {x:500}; timeline.fromTo(e, 1, from, to).fromTo(e, 1, to, from);
                            startVars[p] = v.startAt[p];
                        }
                        startVars.overwrite = false;
                        startVars.immediateRender = true;
                        startVars.lazy = (immediate && v.lazy !== false);
                        startVars.startAt = startVars.delay = null; //no nesting of startAt objects allowed (otherwise it could cause an infinite loop).
                        startVars.onUpdate = v.onUpdate;
                        startVars.onUpdateScope = v.onUpdateScope || v.callbackScope || this;
                        this._startAt = TweenLite.to(this.target, 0, startVars);
                        if (immediate) {
                            if (this._time > 0) {
                                this._startAt = null; //tweens that render immediately (like most from() and fromTo() tweens) shouldn't revert when their parent timeline's playhead goes backward past the startTime because the initial render could have happened anytime and it shouldn't be directly correlated to this tween's startTime. Imagine setting up a complex animation where the beginning states of various objects are rendered immediately but the tween doesn't happen for quite some time - if we revert to the starting values as soon as the playhead goes backward past the tween's startTime, it will throw things off visually. Reversion should only happen in TimelineLite/Max instances where immediateRender was false (which is the default in the convenience methods like from()).
                            } else if (dur !== 0) {
                                return; //we skip initialization here so that overwriting doesn't occur until the tween actually begins. Otherwise, if you create several immediateRender:true tweens of the same target/properties to drop into a TimelineLite or TimelineMax, the last one created would overwrite the first ones because they didn't get placed into the timeline yet before the first render occurs and kicks in overwriting.
                            }
                        }
                    } else if (v.runBackwards && dur !== 0) {
                        //from() tweens must be handled uniquely: their beginning values must be rendered but we don't want overwriting to occur yet (when time is still 0). Wait until the tween actually begins before doing all the routines like overwriting. At that time, we should render at the END of the tween to ensure that things initialize correctly (remember, from() tweens go backwards)
                        if (this._startAt) {
                            this._startAt.render(-1, true);
                            this._startAt.kill();
                            this._startAt = null;
                        } else {
                            if (this._time !== 0) { //in rare cases (like if a from() tween runs and then is invalidate()-ed), immediateRender could be true but the initial forced-render gets skipped, so there's no need to force the render in this context when the _time is greater than 0
                                immediate = false;
                            }
                            pt = {};
                            for (p in v) { //copy props into a new object and skip any reserved props, otherwise onComplete or onUpdate or onStart could fire. We should, however, permit autoCSS to go through.
                                if (!_reservedProps[p] || p === "autoCSS") {
                                    pt[p] = v[p];
                                }
                            }
                            pt.overwrite = 0;
                            pt.data = "isFromStart"; //we tag the tween with as "isFromStart" so that if [inside a plugin] we need to only do something at the very END of a tween, we have a way of identifying this tween as merely the one that's setting the beginning values for a "from()" tween. For example, clearProps in CSSPlugin should only get applied at the very END of a tween and without this tag, from(...{height:100, clearProps:"height", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in.
                            pt.lazy = (immediate && v.lazy !== false);
                            pt.immediateRender = immediate; //zero-duration tweens render immediately by default, but if we're not specifically instructed to render this tween immediately, we should skip this and merely _init() to record the starting values (rendering them immediately would push them to completion which is wasteful in that case - we'd have to render(-1) immediately after)
                            this._startAt = TweenLite.to(this.target, 0, pt);
                            if (!immediate) {
                                this._startAt._init(); //ensures that the initial values are recorded
                                this._startAt._enabled(false); //no need to have the tween render on the next cycle. Disable it because we'll always manually control the renders of the _startAt tween.
                                if (this.vars.immediateRender) {
                                    this._startAt = null;
                                }
                            } else if (this._time === 0) {
                                return;
                            }
                        }
                    }
                    this._ease = ease = (!ease) ? TweenLite.defaultEase : (ease instanceof Ease) ? ease : (typeof(ease) === "function") ? new Ease(ease, v.easeParams) : _easeMap[ease] || TweenLite.defaultEase;
                    if (v.easeParams instanceof Array && ease.config) {
                        this._ease = ease.config.apply(ease, v.easeParams);
                    }
                    this._easeType = this._ease._type;
                    this._easePower = this._ease._power;
                    this._firstPT = null;

                    if (this._targets) {
                        l = this._targets.length;
                        for (i = 0; i < l; i++) {
                            if (this._initProps(this._targets[i], (this._propLookup[i] = {}), this._siblings[i], (op ? op[i] : null), i)) {
                                initPlugins = true;
                            }
                        }
                    } else {
                        initPlugins = this._initProps(this.target, this._propLookup, this._siblings, op, 0);
                    }

                    if (initPlugins) {
                        TweenLite._onPluginEvent("_onInitAllProps", this); //reorders the array in order of priority. Uses a static TweenPlugin method in order to minimize file size in TweenLite
                    }
                    if (op)
                        if (!this._firstPT)
                            if (typeof(this.target) !== "function") { //if all tweening properties have been overwritten, kill the tween. If the target is a function, it's probably a delayedCall so let it live.
                                this._enabled(false, false);
                            }
                    if (v.runBackwards) {
                        pt = this._firstPT;
                        while (pt) {
                            pt.s += pt.c;
                            pt.c = -pt.c;
                            pt = pt._next;
                        }
                    }
                    this._onUpdate = v.onUpdate;
                    this._initted = true;
                };

                p._initProps = function(target, propLookup, siblings, overwrittenProps, index) {
                    var p, i, initPlugins, plugin, pt, v;
                    if (target == null) {
                        return false;
                    }

                    if (_lazyLookup[target._gsTweenID]) {
                        _lazyRender(); //if other tweens of the same target have recently initted but haven't rendered yet, we've got to force the render so that the starting values are correct (imagine populating a timeline with a bunch of sequential tweens and then jumping to the end)
                    }

                    if (!this.vars.css)
                        if (target.style)
                            if (target !== window && target.nodeType)
                                if (_plugins.css)
                                    if (this.vars.autoCSS !== false) { //it's so common to use TweenLite/Max to animate the css of DOM elements, we assume that if the target is a DOM element, that's what is intended (a convenience so that users don't have to wrap things in css:{}, although we still recommend it for a slight performance boost and better specificity). Note: we cannot check "nodeType" on the window inside an iframe.
                                        _autoCSS(this.vars, target);
                                    }
                    for (p in this.vars) {
                        v = this.vars[p];
                        if (_reservedProps[p]) {
                            if (v)
                                if ((v instanceof Array) || (v.push && _isArray(v)))
                                    if (v.join("").indexOf("{self}") !== -1) {
                                        this.vars[p] = v = this._swapSelfInParams(v, this);
                                    }

                        } else if (_plugins[p] && (plugin = new _plugins[p]())._onInitTween(target, this.vars[p], this, index)) {

                            //t - target 		[object]
                            //p - property 		[string]
                            //s - start			[number]
                            //c - change		[number]
                            //f - isFunction	[boolean]
                            //n - name			[string]
                            //pg - isPlugin 	[boolean]
                            //pr - priority		[number]
                            //m - mod           [function | 0]
                            this._firstPT = pt = { _next: this._firstPT, t: plugin, p: "setRatio", s: 0, c: 1, f: 1, n: p, pg: 1, pr: plugin._priority, m: 0 };
                            i = plugin._overwriteProps.length;
                            while (--i > -1) {
                                propLookup[plugin._overwriteProps[i]] = this._firstPT;
                            }
                            if (plugin._priority || plugin._onInitAllProps) {
                                initPlugins = true;
                            }
                            if (plugin._onDisable || plugin._onEnable) {
                                this._notifyPluginsOfEnabled = true;
                            }
                            if (pt._next) {
                                pt._next._prev = pt;
                            }

                        } else {
                            propLookup[p] = _addPropTween.call(this, target, p, "get", v, p, 0, null, this.vars.stringFilter, index);
                        }
                    }

                    if (overwrittenProps)
                        if (this._kill(overwrittenProps, target)) { //another tween may have tried to overwrite properties of this tween before init() was called (like if two tweens start at the same time, the one created second will run first)
                            return this._initProps(target, propLookup, siblings, overwrittenProps, index);
                        }
                    if (this._overwrite > 1)
                        if (this._firstPT)
                            if (siblings.length > 1)
                                if (_applyOverwrite(target, this, propLookup, this._overwrite, siblings)) {
                                    this._kill(propLookup, target);
                                    return this._initProps(target, propLookup, siblings, overwrittenProps, index);
                                }
                    if (this._firstPT)
                        if ((this.vars.lazy !== false && this._duration) || (this.vars.lazy && !this._duration)) { //zero duration tweens don't lazy render by default; everything else does.
                            _lazyLookup[target._gsTweenID] = true;
                        }
                    return initPlugins;
                };

                p.render = function(time, suppressEvents, force) {
                    var prevTime = this._time,
                        duration = this._duration,
                        prevRawPrevTime = this._rawPrevTime,
                        isComplete, callback, pt, rawPrevTime;
                    if (time >= duration - 0.0000001 && time >= 0) { //to work around occasional floating point math artifacts.
                        this._totalTime = this._time = duration;
                        this.ratio = this._ease._calcEnd ? this._ease.getRatio(1) : 1;
                        if (!this._reversed) {
                            isComplete = true;
                            callback = "onComplete";
                            force = (force || this._timeline.autoRemoveChildren); //otherwise, if the animation is unpaused/activated after it's already finished, it doesn't get removed from the parent timeline.
                        }
                        if (duration === 0)
                            if (this._initted || !this.vars.lazy || force) { //zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the "playhead" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's "playhead" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.
                                if (this._startTime === this._timeline._duration) { //if a zero-duration tween is at the VERY end of a timeline and that timeline renders at its end, it will typically add a tiny bit of cushion to the render time to prevent rounding errors from getting in the way of tweens rendering their VERY end. If we then reverse() that timeline, the zero-duration tween will trigger its onReverseComplete even though technically the playhead didn't pass over it again. It's a very specific edge case we must accommodate.
                                    time = 0;
                                }
                                if (prevRawPrevTime < 0 || (time <= 0 && time >= -0.0000001) || (prevRawPrevTime === _tinyNum && this.data !== "isPause"))
                                    if (prevRawPrevTime !== time) { //note: when this.data is "isPause", it's a callback added by addPause() on a timeline that we should not be triggered when LEAVING its exact start time. In other words, tl.addPause(1).play(1) shouldn't pause.
                                        force = true;
                                        if (prevRawPrevTime > _tinyNum) {
                                            callback = "onReverseComplete";
                                        }
                                    }
                                this._rawPrevTime = rawPrevTime = (!suppressEvents || time || prevRawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
                            }

                    } else if (time < 0.0000001) { //to work around occasional floating point math artifacts, round super small values to 0.
                        this._totalTime = this._time = 0;
                        this.ratio = this._ease._calcEnd ? this._ease.getRatio(0) : 0;
                        if (prevTime !== 0 || (duration === 0 && prevRawPrevTime > 0)) {
                            callback = "onReverseComplete";
                            isComplete = this._reversed;
                        }
                        if (time < 0) {
                            this._active = false;
                            if (duration === 0)
                                if (this._initted || !this.vars.lazy || force) { //zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the "playhead" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's "playhead" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.
                                    if (prevRawPrevTime >= 0 && !(prevRawPrevTime === _tinyNum && this.data === "isPause")) {
                                        force = true;
                                    }
                                    this._rawPrevTime = rawPrevTime = (!suppressEvents || time || prevRawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
                                }
                        }
                        if (!this._initted || (this._startAt && this._startAt.progress())) { //if we render the very beginning (time == 0) of a fromTo(), we must force the render (normal tweens wouldn't need to render at a time of 0 when the prevTime was also 0). This is also mandatory to make sure overwriting kicks in immediately. Also, we check progress() because if startAt has already rendered at its end, we should force a render at its beginning. Otherwise, if you put the playhead directly on top of where a fromTo({immediateRender:false}) starts, and then move it backwards, the from() won't revert its values.
                            force = true;
                        }
                    } else {
                        this._totalTime = this._time = time;

                        if (this._easeType) {
                            var r = time / duration,
                                type = this._easeType,
                                pow = this._easePower;
                            if (type === 1 || (type === 3 && r >= 0.5)) {
                                r = 1 - r;
                            }
                            if (type === 3) {
                                r *= 2;
                            }
                            if (pow === 1) {
                                r *= r;
                            } else if (pow === 2) {
                                r *= r * r;
                            } else if (pow === 3) {
                                r *= r * r * r;
                            } else if (pow === 4) {
                                r *= r * r * r * r;
                            }

                            if (type === 1) {
                                this.ratio = 1 - r;
                            } else if (type === 2) {
                                this.ratio = r;
                            } else if (time / duration < 0.5) {
                                this.ratio = r / 2;
                            } else {
                                this.ratio = 1 - (r / 2);
                            }

                        } else {
                            this.ratio = this._ease.getRatio(time / duration);
                        }
                    }

                    if (this._time === prevTime && !force) {
                        return;
                    } else if (!this._initted) {
                        this._init();
                        if (!this._initted || this._gc) { //immediateRender tweens typically won't initialize until the playhead advances (_time is greater than 0) in order to ensure that overwriting occurs properly. Also, if all of the tweening properties have been overwritten (which would cause _gc to be true, as set in _init()), we shouldn't continue otherwise an onStart callback could be called for example.
                            return;
                        } else if (!force && this._firstPT && ((this.vars.lazy !== false && this._duration) || (this.vars.lazy && !this._duration))) {
                            this._time = this._totalTime = prevTime;
                            this._rawPrevTime = prevRawPrevTime;
                            _lazyTweens.push(this);
                            this._lazy = [time, suppressEvents];
                            return;
                        }
                        //_ease is initially set to defaultEase, so now that init() has run, _ease is set properly and we need to recalculate the ratio. Overall this is faster than using conditional logic earlier in the method to avoid having to set ratio twice because we only init() once but renderTime() gets called VERY frequently.
                        if (this._time && !isComplete) {
                            this.ratio = this._ease.getRatio(this._time / duration);
                        } else if (isComplete && this._ease._calcEnd) {
                            this.ratio = this._ease.getRatio((this._time === 0) ? 0 : 1);
                        }
                    }
                    if (this._lazy !== false) { //in case a lazy render is pending, we should flush it because the new render is occurring now (imagine a lazy tween instantiating and then immediately the user calls tween.seek(tween.duration()), skipping to the end - the end render would be forced, and then if we didn't flush the lazy render, it'd fire AFTER the seek(), rendering it at the wrong time.
                        this._lazy = false;
                    }
                    if (!this._active)
                        if (!this._paused && this._time !== prevTime && time >= 0) {
                            this._active = true; //so that if the user renders a tween (as opposed to the timeline rendering it), the timeline is forced to re-render and align it with the proper time/frame on the next rendering cycle. Maybe the tween already finished but the user manually re-renders it as halfway done.
                        }
                    if (prevTime === 0) {
                        if (this._startAt) {
                            if (time >= 0) {
                                this._startAt.render(time, suppressEvents, force);
                            } else if (!callback) {
                                callback = "_dummyGS"; //if no callback is defined, use a dummy value just so that the condition at the end evaluates as true because _startAt should render AFTER the normal render loop when the time is negative. We could handle this in a more intuitive way, of course, but the render loop is the MOST important thing to optimize, so this technique allows us to avoid adding extra conditional logic in a high-frequency area.
                            }
                        }
                        if (this.vars.onStart)
                            if (this._time !== 0 || duration === 0)
                                if (!suppressEvents) {
                                    this._callback("onStart");
                                }
                    }
                    pt = this._firstPT;
                    while (pt) {
                        if (pt.f) {
                            pt.t[pt.p](pt.c * this.ratio + pt.s);
                        } else {
                            pt.t[pt.p] = pt.c * this.ratio + pt.s;
                        }
                        pt = pt._next;
                    }

                    if (this._onUpdate) {
                        if (time < 0)
                            if (this._startAt && time !== -0.0001) { //if the tween is positioned at the VERY beginning (_startTime 0) of its parent timeline, it's illegal for the playhead to go back further, so we should not render the recorded startAt values.
                                this._startAt.render(time, suppressEvents, force); //note: for performance reasons, we tuck this conditional logic inside less traveled areas (most tweens don't have an onUpdate). We'd just have it at the end before the onComplete, but the values should be updated before any onUpdate is called, so we ALSO put it here and then if it's not called, we do so later near the onComplete.
                            }
                        if (!suppressEvents)
                            if (this._time !== prevTime || isComplete || force) {
                                this._callback("onUpdate");
                            }
                    }
                    if (callback)
                        if (!this._gc || force) { //check _gc because there's a chance that kill() could be called in an onUpdate
                            if (time < 0 && this._startAt && !this._onUpdate && time !== -0.0001) { //-0.0001 is a special value that we use when looping back to the beginning of a repeated TimelineMax, in which case we shouldn't render the _startAt values.
                                this._startAt.render(time, suppressEvents, force);
                            }
                            if (isComplete) {
                                if (this._timeline.autoRemoveChildren) {
                                    this._enabled(false, false);
                                }
                                this._active = false;
                            }
                            if (!suppressEvents && this.vars[callback]) {
                                this._callback(callback);
                            }
                            if (duration === 0 && this._rawPrevTime === _tinyNum && rawPrevTime !== _tinyNum) { //the onComplete or onReverseComplete could trigger movement of the playhead and for zero-duration tweens (which must discern direction) that land directly back on their start time, we don't want to fire again on the next render. Think of several addPause()'s in a timeline that forces the playhead to a certain spot, but what if it's already paused and another tween is tweening the "time" of the timeline? Each time it moves [forward] past that spot, it would move back, and since suppressEvents is true, it'd reset _rawPrevTime to _tinyNum so that when it begins again, the callback would fire (so ultimately it could bounce back and forth during that tween). Again, this is a very uncommon scenario, but possible nonetheless.
                                this._rawPrevTime = 0;
                            }
                        }
                };

                p._kill = function(vars, target, overwritingTween) {
                    if (vars === "all") {
                        vars = null;
                    }
                    if (vars == null)
                        if (target == null || target === this.target) {
                            this._lazy = false;
                            return this._enabled(false, false);
                        }
                    target = (typeof(target) !== "string") ? (target || this._targets || this.target) : TweenLite.selector(target) || target;
                    var simultaneousOverwrite = (overwritingTween && this._time && overwritingTween._startTime === this._startTime && this._timeline === overwritingTween._timeline),
                        i, overwrittenProps, p, pt, propLookup, changed, killProps, record, killed;
                    if ((_isArray(target) || _isSelector(target)) && typeof(target[0]) !== "number") {
                        i = target.length;
                        while (--i > -1) {
                            if (this._kill(vars, target[i], overwritingTween)) {
                                changed = true;
                            }
                        }
                    } else {
                        if (this._targets) {
                            i = this._targets.length;
                            while (--i > -1) {
                                if (target === this._targets[i]) {
                                    propLookup = this._propLookup[i] || {};
                                    this._overwrittenProps = this._overwrittenProps || [];
                                    overwrittenProps = this._overwrittenProps[i] = vars ? this._overwrittenProps[i] || {} : "all";
                                    break;
                                }
                            }
                        } else if (target !== this.target) {
                            return false;
                        } else {
                            propLookup = this._propLookup;
                            overwrittenProps = this._overwrittenProps = vars ? this._overwrittenProps || {} : "all";
                        }

                        if (propLookup) {
                            killProps = vars || propLookup;
                            record = (vars !== overwrittenProps && overwrittenProps !== "all" && vars !== propLookup && (typeof(vars) !== "object" || !vars._tempKill)); //_tempKill is a super-secret way to delete a particular tweening property but NOT have it remembered as an official overwritten property (like in BezierPlugin)
                            if (overwritingTween && (TweenLite.onOverwrite || this.vars.onOverwrite)) {
                                for (p in killProps) {
                                    if (propLookup[p]) {
                                        if (!killed) {
                                            killed = [];
                                        }
                                        killed.push(p);
                                    }
                                }
                                if ((killed || !vars) && !_onOverwrite(this, overwritingTween, target, killed)) { //if the onOverwrite returned false, that means the user wants to override the overwriting (cancel it).
                                    return false;
                                }
                            }

                            for (p in killProps) {
                                if ((pt = propLookup[p])) {
                                    if (simultaneousOverwrite) { //if another tween overwrites this one and they both start at exactly the same time, yet this tween has already rendered once (for example, at 0.001) because it's first in the queue, we should revert the values to where they were at 0 so that the starting values aren't contaminated on the overwriting tween.
                                        if (pt.f) {
                                            pt.t[pt.p](pt.s);
                                        } else {
                                            pt.t[pt.p] = pt.s;
                                        }
                                        changed = true;
                                    }
                                    if (pt.pg && pt.t._kill(killProps)) {
                                        changed = true; //some plugins need to be notified so they can perform cleanup tasks first
                                    }
                                    if (!pt.pg || pt.t._overwriteProps.length === 0) {
                                        if (pt._prev) {
                                            pt._prev._next = pt._next;
                                        } else if (pt === this._firstPT) {
                                            this._firstPT = pt._next;
                                        }
                                        if (pt._next) {
                                            pt._next._prev = pt._prev;
                                        }
                                        pt._next = pt._prev = null;
                                    }
                                    delete propLookup[p];
                                }
                                if (record) {
                                    overwrittenProps[p] = 1;
                                }
                            }
                            if (!this._firstPT && this._initted) { //if all tweening properties are killed, kill the tween. Without this line, if there's a tween with multiple targets and then you killTweensOf() each target individually, the tween would technically still remain active and fire its onComplete even though there aren't any more properties tweening.
                                this._enabled(false, false);
                            }
                        }
                    }
                    return changed;
                };

                p.invalidate = function() {
                    if (this._notifyPluginsOfEnabled) {
                        TweenLite._onPluginEvent("_onDisable", this);
                    }
                    this._firstPT = this._overwrittenProps = this._startAt = this._onUpdate = null;
                    this._notifyPluginsOfEnabled = this._active = this._lazy = false;
                    this._propLookup = (this._targets) ? {} : [];
                    Animation.prototype.invalidate.call(this);
                    if (this.vars.immediateRender) {
                        this._time = -_tinyNum; //forces a render without having to set the render() "force" parameter to true because we want to allow lazying by default (using the "force" parameter always forces an immediate full render)
                        this.render(Math.min(0, -this._delay)); //in case delay is negative.
                    }
                    return this;
                };

                p._enabled = function(enabled, ignoreTimeline) {
                    if (!_tickerActive) {
                        _ticker.wake();
                    }
                    if (enabled && this._gc) {
                        var targets = this._targets,
                            i;
                        if (targets) {
                            i = targets.length;
                            while (--i > -1) {
                                this._siblings[i] = _register(targets[i], this, true);
                            }
                        } else {
                            this._siblings = _register(this.target, this, true);
                        }
                    }
                    Animation.prototype._enabled.call(this, enabled, ignoreTimeline);
                    if (this._notifyPluginsOfEnabled)
                        if (this._firstPT) {
                            return TweenLite._onPluginEvent((enabled ? "_onEnable" : "_onDisable"), this);
                        }
                    return false;
                };


                //----TweenLite static methods -----------------------------------------------------

                TweenLite.to = function(target, duration, vars) {
                    return new TweenLite(target, duration, vars);
                };

                TweenLite.from = function(target, duration, vars) {
                    vars.runBackwards = true;
                    vars.immediateRender = (vars.immediateRender != false);
                    return new TweenLite(target, duration, vars);
                };

                TweenLite.fromTo = function(target, duration, fromVars, toVars) {
                    toVars.startAt = fromVars;
                    toVars.immediateRender = (toVars.immediateRender != false && fromVars.immediateRender != false);
                    return new TweenLite(target, duration, toVars);
                };

                TweenLite.delayedCall = function(delay, callback, params, scope, useFrames) {
                    return new TweenLite(callback, 0, { delay: delay, onComplete: callback, onCompleteParams: params, callbackScope: scope, onReverseComplete: callback, onReverseCompleteParams: params, immediateRender: false, lazy: false, useFrames: useFrames, overwrite: 0 });
                };

                TweenLite.set = function(target, vars) {
                    return new TweenLite(target, 0, vars);
                };

                TweenLite.getTweensOf = function(target, onlyActive) {
                    if (target == null) { return []; }
                    target = (typeof(target) !== "string") ? target : TweenLite.selector(target) || target;
                    var i, a, j, t;
                    if ((_isArray(target) || _isSelector(target)) && typeof(target[0]) !== "number") {
                        i = target.length;
                        a = [];
                        while (--i > -1) {
                            a = a.concat(TweenLite.getTweensOf(target[i], onlyActive));
                        }
                        i = a.length;
                        //now get rid of any duplicates (tweens of arrays of objects could cause duplicates)
                        while (--i > -1) {
                            t = a[i];
                            j = i;
                            while (--j > -1) {
                                if (t === a[j]) {
                                    a.splice(i, 1);
                                }
                            }
                        }
                    } else if (target._gsTweenID) {
                        a = _register(target).concat();
                        i = a.length;
                        while (--i > -1) {
                            if (a[i]._gc || (onlyActive && !a[i].isActive())) {
                                a.splice(i, 1);
                            }
                        }
                    }
                    return a || [];
                };

                TweenLite.killTweensOf = TweenLite.killDelayedCallsTo = function(target, onlyActive, vars) {
                    if (typeof(onlyActive) === "object") {
                        vars = onlyActive; //for backwards compatibility (before "onlyActive" parameter was inserted)
                        onlyActive = false;
                    }
                    var a = TweenLite.getTweensOf(target, onlyActive),
                        i = a.length;
                    while (--i > -1) {
                        a[i]._kill(vars, target);
                    }
                };



                /*
                 * ----------------------------------------------------------------
                 * TweenPlugin   (could easily be split out as a separate file/class, but included for ease of use (so that people don't need to include another script call before loading plugins which is easy to forget)
                 * ----------------------------------------------------------------
                 */
                var TweenPlugin = _class("plugins.TweenPlugin", function(props, priority) {
                    this._overwriteProps = (props || "").split(",");
                    this._propName = this._overwriteProps[0];
                    this._priority = priority || 0;
                    this._super = TweenPlugin.prototype;
                }, true);

                p = TweenPlugin.prototype;
                TweenPlugin.version = "1.19.0";
                TweenPlugin.API = 2;
                p._firstPT = null;
                p._addTween = _addPropTween;
                p.setRatio = _setRatio;

                p._kill = function(lookup) {
                    var a = this._overwriteProps,
                        pt = this._firstPT,
                        i;
                    if (lookup[this._propName] != null) {
                        this._overwriteProps = [];
                    } else {
                        i = a.length;
                        while (--i > -1) {
                            if (lookup[a[i]] != null) {
                                a.splice(i, 1);
                            }
                        }
                    }
                    while (pt) {
                        if (lookup[pt.n] != null) {
                            if (pt._next) {
                                pt._next._prev = pt._prev;
                            }
                            if (pt._prev) {
                                pt._prev._next = pt._next;
                                pt._prev = null;
                            } else if (this._firstPT === pt) {
                                this._firstPT = pt._next;
                            }
                        }
                        pt = pt._next;
                    }
                    return false;
                };

                p._mod = p._roundProps = function(lookup) {
                    var pt = this._firstPT,
                        val;
                    while (pt) {
                        val = lookup[this._propName] || (pt.n != null && lookup[pt.n.split(this._propName + "_").join("")]);
                        if (val && typeof(val) === "function") { //some properties that are very plugin-specific add a prefix named after the _propName plus an underscore, so we need to ignore that extra stuff here.
                            if (pt.f === 2) {
                                pt.t._applyPT.m = val;
                            } else {
                                pt.m = val;
                            }
                        }
                        pt = pt._next;
                    }
                };

                TweenLite._onPluginEvent = function(type, tween) {
                    var pt = tween._firstPT,
                        changed, pt2, first, last, next;
                    if (type === "_onInitAllProps") {
                        //sorts the PropTween linked list in order of priority because some plugins need to render earlier/later than others, like MotionBlurPlugin applies its effects after all x/y/alpha tweens have rendered on each frame.
                        while (pt) {
                            next = pt._next;
                            pt2 = first;
                            while (pt2 && pt2.pr > pt.pr) {
                                pt2 = pt2._next;
                            }
                            if ((pt._prev = pt2 ? pt2._prev : last)) {
                                pt._prev._next = pt;
                            } else {
                                first = pt;
                            }
                            if ((pt._next = pt2)) {
                                pt2._prev = pt;
                            } else {
                                last = pt;
                            }
                            pt = next;
                        }
                        pt = tween._firstPT = first;
                    }
                    while (pt) {
                        if (pt.pg)
                            if (typeof(pt.t[type]) === "function")
                                if (pt.t[type]()) {
                                    changed = true;
                                }
                        pt = pt._next;
                    }
                    return changed;
                };

                TweenPlugin.activate = function(plugins) {
                    var i = plugins.length;
                    while (--i > -1) {
                        if (plugins[i].API === TweenPlugin.API) {
                            _plugins[(new plugins[i]())._propName] = plugins[i];
                        }
                    }
                    return true;
                };

                //provides a more concise way to define plugins that have no dependencies besides TweenPlugin and TweenLite, wrapping common boilerplate stuff into one function (added in 1.9.0). You don't NEED to use this to define a plugin - the old way still works and can be useful in certain (rare) situations.
                _gsDefine.plugin = function(config) {
                    if (!config || !config.propName || !config.init || !config.API) { throw "illegal plugin definition."; }
                    var propName = config.propName,
                        priority = config.priority || 0,
                        overwriteProps = config.overwriteProps,
                        map = { init: "_onInitTween", set: "setRatio", kill: "_kill", round: "_mod", mod: "_mod", initAll: "_onInitAllProps" },
                        Plugin = _class("plugins." + propName.charAt(0).toUpperCase() + propName.substr(1) + "Plugin",
                            function() {
                                TweenPlugin.call(this, propName, priority);
                                this._overwriteProps = overwriteProps || [];
                            }, (config.global === true)),
                        p = Plugin.prototype = new TweenPlugin(propName),
                        prop;
                    p.constructor = Plugin;
                    Plugin.API = config.API;
                    for (prop in map) {
                        if (typeof(config[prop]) === "function") {
                            p[map[prop]] = config[prop];
                        }
                    }
                    Plugin.version = config.version;
                    TweenPlugin.activate([Plugin]);
                    return Plugin;
                };


                //now run through all the dependencies discovered and if any are missing, log that to the console as a warning. This is why it's best to have TweenLite load last - it can check all the dependencies for you.
                a = window._gsQueue;
                if (a) {
                    for (i = 0; i < a.length; i++) {
                        a[i]();
                    }
                    for (p in _defLookup) {
                        if (!_defLookup[p].func) {
                            window.console.log("GSAP encountered missing dependency: " + p);
                        }
                    }
                }

                _tickerActive = false; //ensures that the first official animation forces a ticker.tick() to update the time when it is instantiated

            })((typeof(module) !== "undefined" && module.exports && typeof(global) !== "undefined") ? global : this || window, "TweenMax");
            /* WEBPACK VAR INJECTION */
        }.call(exports, (function() { return this; }())))

        /***/
    })
    /******/
]);
//# sourceMappingURL=water.js.map
//# sourceMappingURL=data:application/json;charset=utf8;base64,
